// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FusionAuthIdpSamlV2IdpInitiated extends pulumi.CustomResource {
    /**
     * Get an existing FusionAuthIdpSamlV2IdpInitiated resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FusionAuthIdpSamlV2IdpInitiatedState, opts?: pulumi.CustomResourceOptions): FusionAuthIdpSamlV2IdpInitiated {
        return new FusionAuthIdpSamlV2IdpInitiated(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fusionauth:index/fusionAuthIdpSamlV2IdpInitiated:FusionAuthIdpSamlV2IdpInitiated';

    /**
     * Returns true if the given object is an instance of FusionAuthIdpSamlV2IdpInitiated.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FusionAuthIdpSamlV2IdpInitiated {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FusionAuthIdpSamlV2IdpInitiated.__pulumiType;
    }

    /**
     * The configuration for each Application that the identity provider is enabled for.
     */
    public readonly applicationConfigurations!: pulumi.Output<outputs.FusionAuthIdpSamlV2IdpInitiatedApplicationConfiguration[] | undefined>;
    /**
     * Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login
     * an Event Log will be created.
     */
    public readonly debug!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the email claim (Attribute in the Assertion element) in the SAML response that FusionAuth uses to uniquely
     * identity the user. If this is not set, the `useNameForEmail` flag must be true.
     */
    public readonly emailClaim!: pulumi.Output<string | undefined>;
    /**
     * Determines if this provider is enabled. If it is false then it will be disabled globally.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
     */
    public readonly idpId!: pulumi.Output<string | undefined>;
    /**
     * The EntityId (unique identifier) of the SAML v2 identity provider. This value should be provided to you. Prior to 1.27.1
     * this value was required to be a URL.
     */
    public readonly issuer!: pulumi.Output<string>;
    /**
     * The id of the key stored in Key Master that is used to verify the SAML response sent back to FusionAuth from the
     * identity provider. This key must be a verification only key or certificate (meaning that it only has a public key
     * component).
     */
    public readonly keyId!: pulumi.Output<string>;
    /**
     * The id of a SAML reconcile lambda that is applied when the identity provider sends back a successful SAML response.
     */
    public readonly lambdaReconcileId!: pulumi.Output<string | undefined>;
    /**
     * The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
     */
    public readonly linkingStrategy!: pulumi.Output<string>;
    /**
     * The name of this SAML v2 identity provider. This is only used for display purposes.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
     */
    public readonly tenantConfigurations!: pulumi.Output<outputs.FusionAuthIdpSamlV2IdpInitiatedTenantConfiguration[] | undefined>;
    /**
     * Whether or not FusionAuth will use the NameID element value as the email address of the user for reconciliation
     * processing. If this is false, then the `emailClaim` property must be set.
     */
    public readonly useNameForEmail!: pulumi.Output<boolean | undefined>;

    /**
     * Create a FusionAuthIdpSamlV2IdpInitiated resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FusionAuthIdpSamlV2IdpInitiatedArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FusionAuthIdpSamlV2IdpInitiatedArgs | FusionAuthIdpSamlV2IdpInitiatedState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FusionAuthIdpSamlV2IdpInitiatedState | undefined;
            resourceInputs["applicationConfigurations"] = state ? state.applicationConfigurations : undefined;
            resourceInputs["debug"] = state ? state.debug : undefined;
            resourceInputs["emailClaim"] = state ? state.emailClaim : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["idpId"] = state ? state.idpId : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["lambdaReconcileId"] = state ? state.lambdaReconcileId : undefined;
            resourceInputs["linkingStrategy"] = state ? state.linkingStrategy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tenantConfigurations"] = state ? state.tenantConfigurations : undefined;
            resourceInputs["useNameForEmail"] = state ? state.useNameForEmail : undefined;
        } else {
            const args = argsOrState as FusionAuthIdpSamlV2IdpInitiatedArgs | undefined;
            if ((!args || args.issuer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            resourceInputs["applicationConfigurations"] = args ? args.applicationConfigurations : undefined;
            resourceInputs["debug"] = args ? args.debug : undefined;
            resourceInputs["emailClaim"] = args ? args.emailClaim : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["idpId"] = args ? args.idpId : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["lambdaReconcileId"] = args ? args.lambdaReconcileId : undefined;
            resourceInputs["linkingStrategy"] = args ? args.linkingStrategy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tenantConfigurations"] = args ? args.tenantConfigurations : undefined;
            resourceInputs["useNameForEmail"] = args ? args.useNameForEmail : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FusionAuthIdpSamlV2IdpInitiated.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FusionAuthIdpSamlV2IdpInitiated resources.
 */
export interface FusionAuthIdpSamlV2IdpInitiatedState {
    /**
     * The configuration for each Application that the identity provider is enabled for.
     */
    applicationConfigurations?: pulumi.Input<pulumi.Input<inputs.FusionAuthIdpSamlV2IdpInitiatedApplicationConfiguration>[]>;
    /**
     * Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login
     * an Event Log will be created.
     */
    debug?: pulumi.Input<boolean>;
    /**
     * The name of the email claim (Attribute in the Assertion element) in the SAML response that FusionAuth uses to uniquely
     * identity the user. If this is not set, the `useNameForEmail` flag must be true.
     */
    emailClaim?: pulumi.Input<string>;
    /**
     * Determines if this provider is enabled. If it is false then it will be disabled globally.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
     */
    idpId?: pulumi.Input<string>;
    /**
     * The EntityId (unique identifier) of the SAML v2 identity provider. This value should be provided to you. Prior to 1.27.1
     * this value was required to be a URL.
     */
    issuer?: pulumi.Input<string>;
    /**
     * The id of the key stored in Key Master that is used to verify the SAML response sent back to FusionAuth from the
     * identity provider. This key must be a verification only key or certificate (meaning that it only has a public key
     * component).
     */
    keyId?: pulumi.Input<string>;
    /**
     * The id of a SAML reconcile lambda that is applied when the identity provider sends back a successful SAML response.
     */
    lambdaReconcileId?: pulumi.Input<string>;
    /**
     * The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
     */
    linkingStrategy?: pulumi.Input<string>;
    /**
     * The name of this SAML v2 identity provider. This is only used for display purposes.
     */
    name?: pulumi.Input<string>;
    /**
     * The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
     */
    tenantConfigurations?: pulumi.Input<pulumi.Input<inputs.FusionAuthIdpSamlV2IdpInitiatedTenantConfiguration>[]>;
    /**
     * Whether or not FusionAuth will use the NameID element value as the email address of the user for reconciliation
     * processing. If this is false, then the `emailClaim` property must be set.
     */
    useNameForEmail?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a FusionAuthIdpSamlV2IdpInitiated resource.
 */
export interface FusionAuthIdpSamlV2IdpInitiatedArgs {
    /**
     * The configuration for each Application that the identity provider is enabled for.
     */
    applicationConfigurations?: pulumi.Input<pulumi.Input<inputs.FusionAuthIdpSamlV2IdpInitiatedApplicationConfiguration>[]>;
    /**
     * Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login
     * an Event Log will be created.
     */
    debug?: pulumi.Input<boolean>;
    /**
     * The name of the email claim (Attribute in the Assertion element) in the SAML response that FusionAuth uses to uniquely
     * identity the user. If this is not set, the `useNameForEmail` flag must be true.
     */
    emailClaim?: pulumi.Input<string>;
    /**
     * Determines if this provider is enabled. If it is false then it will be disabled globally.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
     */
    idpId?: pulumi.Input<string>;
    /**
     * The EntityId (unique identifier) of the SAML v2 identity provider. This value should be provided to you. Prior to 1.27.1
     * this value was required to be a URL.
     */
    issuer: pulumi.Input<string>;
    /**
     * The id of the key stored in Key Master that is used to verify the SAML response sent back to FusionAuth from the
     * identity provider. This key must be a verification only key or certificate (meaning that it only has a public key
     * component).
     */
    keyId: pulumi.Input<string>;
    /**
     * The id of a SAML reconcile lambda that is applied when the identity provider sends back a successful SAML response.
     */
    lambdaReconcileId?: pulumi.Input<string>;
    /**
     * The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
     */
    linkingStrategy?: pulumi.Input<string>;
    /**
     * The name of this SAML v2 identity provider. This is only used for display purposes.
     */
    name?: pulumi.Input<string>;
    /**
     * The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
     */
    tenantConfigurations?: pulumi.Input<pulumi.Input<inputs.FusionAuthIdpSamlV2IdpInitiatedTenantConfiguration>[]>;
    /**
     * Whether or not FusionAuth will use the NameID element value as the email address of the user for reconciliation
     * processing. If this is false, then the `emailClaim` property must be set.
     */
    useNameForEmail?: pulumi.Input<boolean>;
}
