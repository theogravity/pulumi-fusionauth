// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Imported Key Resource
 *
 * Cryptographic keys are used in signing and verifying JWTs and verifying responses for third party identity providers. It is more likely you will interact with keys using the FusionAuth UI in the Key Master menu.
 *
 * [Keys API](https://fusionauth.io/docs/v1/tech/apis/keys)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as fusionauth from "pulumi-fusionauth";
 *
 * const name = new fusionauth.FusionAuthImportedKey("name", {
 *     kid: "8675309",
 *     privateKey: fs.readFileSync("./AuthKey_8675309.p8"),
 * });
 * ```
 */
export class FusionAuthImportedKey extends pulumi.CustomResource {
    /**
     * Get an existing FusionAuthImportedKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FusionAuthImportedKeyState, opts?: pulumi.CustomResourceOptions): FusionAuthImportedKey {
        return new FusionAuthImportedKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fusionauth:index/fusionAuthImportedKey:FusionAuthImportedKey';

    /**
     * Returns true if the given object is an instance of FusionAuthImportedKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FusionAuthImportedKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FusionAuthImportedKey.__pulumiType;
    }

    /**
     * The algorithm used to encrypt the Key. The following values represent algorithms supported by FusionAuth:
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * The certificate to import. The publicKey will be extracted from the certificate.
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * The Id to use for the new key. If not specified a secure random UUID will be generated.
     */
    public readonly keyId!: pulumi.Output<string | undefined>;
    /**
     * The Key identifier 'kid'.
     */
    public readonly kid!: pulumi.Output<string>;
    /**
     * The name of the Key.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Key private key. Optional if importing an RSA or EC key. If the key is only to be used for token validation, only a public key is necessary and this field may be omitted.
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * "The Key public key. Required if importing an RSA or EC key and a certificate is not provided."
     */
    public readonly publicKey!: pulumi.Output<string>;
    /**
     * The Key secret. This field is required if importing an HMAC key type.
     */
    public readonly secret!: pulumi.Output<string | undefined>;
    /**
     * The Key type. This field is required if importing an HMAC key type, or if importing a public key / private key pair. The possible values are:
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a FusionAuthImportedKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FusionAuthImportedKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FusionAuthImportedKeyArgs | FusionAuthImportedKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FusionAuthImportedKeyState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["kid"] = state ? state.kid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FusionAuthImportedKeyArgs | undefined;
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["kid"] = args ? args.kid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey", "secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FusionAuthImportedKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FusionAuthImportedKey resources.
 */
export interface FusionAuthImportedKeyState {
    /**
     * The algorithm used to encrypt the Key. The following values represent algorithms supported by FusionAuth:
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The certificate to import. The publicKey will be extracted from the certificate.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The Id to use for the new key. If not specified a secure random UUID will be generated.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The Key identifier 'kid'.
     */
    kid?: pulumi.Input<string>;
    /**
     * The name of the Key.
     */
    name?: pulumi.Input<string>;
    /**
     * The Key private key. Optional if importing an RSA or EC key. If the key is only to be used for token validation, only a public key is necessary and this field may be omitted.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * "The Key public key. Required if importing an RSA or EC key and a certificate is not provided."
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The Key secret. This field is required if importing an HMAC key type.
     */
    secret?: pulumi.Input<string>;
    /**
     * The Key type. This field is required if importing an HMAC key type, or if importing a public key / private key pair. The possible values are:
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FusionAuthImportedKey resource.
 */
export interface FusionAuthImportedKeyArgs {
    /**
     * The algorithm used to encrypt the Key. The following values represent algorithms supported by FusionAuth:
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The certificate to import. The publicKey will be extracted from the certificate.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The Id to use for the new key. If not specified a secure random UUID will be generated.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The Key identifier 'kid'.
     */
    kid?: pulumi.Input<string>;
    /**
     * The name of the Key.
     */
    name?: pulumi.Input<string>;
    /**
     * The Key private key. Optional if importing an RSA or EC key. If the key is only to be used for token validation, only a public key is necessary and this field may be omitted.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * "The Key public key. Required if importing an RSA or EC key and a certificate is not provided."
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The Key secret. This field is required if importing an HMAC key type.
     */
    secret?: pulumi.Input<string>;
    /**
     * The Key type. This field is required if importing an HMAC key type, or if importing a public key / private key pair. The possible values are:
     */
    type?: pulumi.Input<string>;
}
