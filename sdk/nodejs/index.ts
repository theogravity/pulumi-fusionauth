// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { FusionAuthApiKeyArgs, FusionAuthApiKeyState } from "./fusionAuthApiKey";
export type FusionAuthApiKey = import("./fusionAuthApiKey").FusionAuthApiKey;
export const FusionAuthApiKey: typeof import("./fusionAuthApiKey").FusionAuthApiKey = null as any;
utilities.lazyLoad(exports, ["FusionAuthApiKey"], () => require("./fusionAuthApiKey"));

export { FusionAuthApplicationArgs, FusionAuthApplicationState } from "./fusionAuthApplication";
export type FusionAuthApplication = import("./fusionAuthApplication").FusionAuthApplication;
export const FusionAuthApplication: typeof import("./fusionAuthApplication").FusionAuthApplication = null as any;
utilities.lazyLoad(exports, ["FusionAuthApplication"], () => require("./fusionAuthApplication"));

export { FusionAuthApplicationRoleArgs, FusionAuthApplicationRoleState } from "./fusionAuthApplicationRole";
export type FusionAuthApplicationRole = import("./fusionAuthApplicationRole").FusionAuthApplicationRole;
export const FusionAuthApplicationRole: typeof import("./fusionAuthApplicationRole").FusionAuthApplicationRole = null as any;
utilities.lazyLoad(exports, ["FusionAuthApplicationRole"], () => require("./fusionAuthApplicationRole"));

export { FusionAuthEMailArgs, FusionAuthEMailState } from "./fusionAuthEMail";
export type FusionAuthEMail = import("./fusionAuthEMail").FusionAuthEMail;
export const FusionAuthEMail: typeof import("./fusionAuthEMail").FusionAuthEMail = null as any;
utilities.lazyLoad(exports, ["FusionAuthEMail"], () => require("./fusionAuthEMail"));

export { FusionAuthEntityArgs, FusionAuthEntityState } from "./fusionAuthEntity";
export type FusionAuthEntity = import("./fusionAuthEntity").FusionAuthEntity;
export const FusionAuthEntity: typeof import("./fusionAuthEntity").FusionAuthEntity = null as any;
utilities.lazyLoad(exports, ["FusionAuthEntity"], () => require("./fusionAuthEntity"));

export { FusionAuthEntityGrantArgs, FusionAuthEntityGrantState } from "./fusionAuthEntityGrant";
export type FusionAuthEntityGrant = import("./fusionAuthEntityGrant").FusionAuthEntityGrant;
export const FusionAuthEntityGrant: typeof import("./fusionAuthEntityGrant").FusionAuthEntityGrant = null as any;
utilities.lazyLoad(exports, ["FusionAuthEntityGrant"], () => require("./fusionAuthEntityGrant"));

export { FusionAuthEntityTypeArgs, FusionAuthEntityTypeState } from "./fusionAuthEntityType";
export type FusionAuthEntityType = import("./fusionAuthEntityType").FusionAuthEntityType;
export const FusionAuthEntityType: typeof import("./fusionAuthEntityType").FusionAuthEntityType = null as any;
utilities.lazyLoad(exports, ["FusionAuthEntityType"], () => require("./fusionAuthEntityType"));

export { FusionAuthEntityTypePermissionArgs, FusionAuthEntityTypePermissionState } from "./fusionAuthEntityTypePermission";
export type FusionAuthEntityTypePermission = import("./fusionAuthEntityTypePermission").FusionAuthEntityTypePermission;
export const FusionAuthEntityTypePermission: typeof import("./fusionAuthEntityTypePermission").FusionAuthEntityTypePermission = null as any;
utilities.lazyLoad(exports, ["FusionAuthEntityTypePermission"], () => require("./fusionAuthEntityTypePermission"));

export { FusionAuthFormArgs, FusionAuthFormState } from "./fusionAuthForm";
export type FusionAuthForm = import("./fusionAuthForm").FusionAuthForm;
export const FusionAuthForm: typeof import("./fusionAuthForm").FusionAuthForm = null as any;
utilities.lazyLoad(exports, ["FusionAuthForm"], () => require("./fusionAuthForm"));

export { FusionAuthFormFieldArgs, FusionAuthFormFieldState } from "./fusionAuthFormField";
export type FusionAuthFormField = import("./fusionAuthFormField").FusionAuthFormField;
export const FusionAuthFormField: typeof import("./fusionAuthFormField").FusionAuthFormField = null as any;
utilities.lazyLoad(exports, ["FusionAuthFormField"], () => require("./fusionAuthFormField"));

export { FusionAuthGenericConnectorArgs, FusionAuthGenericConnectorState } from "./fusionAuthGenericConnector";
export type FusionAuthGenericConnector = import("./fusionAuthGenericConnector").FusionAuthGenericConnector;
export const FusionAuthGenericConnector: typeof import("./fusionAuthGenericConnector").FusionAuthGenericConnector = null as any;
utilities.lazyLoad(exports, ["FusionAuthGenericConnector"], () => require("./fusionAuthGenericConnector"));

export { FusionAuthGroupArgs, FusionAuthGroupState } from "./fusionAuthGroup";
export type FusionAuthGroup = import("./fusionAuthGroup").FusionAuthGroup;
export const FusionAuthGroup: typeof import("./fusionAuthGroup").FusionAuthGroup = null as any;
utilities.lazyLoad(exports, ["FusionAuthGroup"], () => require("./fusionAuthGroup"));

export { FusionAuthIdpAppleArgs, FusionAuthIdpAppleState } from "./fusionAuthIdpApple";
export type FusionAuthIdpApple = import("./fusionAuthIdpApple").FusionAuthIdpApple;
export const FusionAuthIdpApple: typeof import("./fusionAuthIdpApple").FusionAuthIdpApple = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpApple"], () => require("./fusionAuthIdpApple"));

export { FusionAuthIdpExternalJwtArgs, FusionAuthIdpExternalJwtState } from "./fusionAuthIdpExternalJwt";
export type FusionAuthIdpExternalJwt = import("./fusionAuthIdpExternalJwt").FusionAuthIdpExternalJwt;
export const FusionAuthIdpExternalJwt: typeof import("./fusionAuthIdpExternalJwt").FusionAuthIdpExternalJwt = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpExternalJwt"], () => require("./fusionAuthIdpExternalJwt"));

export { FusionAuthIdpFacebookArgs, FusionAuthIdpFacebookState } from "./fusionAuthIdpFacebook";
export type FusionAuthIdpFacebook = import("./fusionAuthIdpFacebook").FusionAuthIdpFacebook;
export const FusionAuthIdpFacebook: typeof import("./fusionAuthIdpFacebook").FusionAuthIdpFacebook = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpFacebook"], () => require("./fusionAuthIdpFacebook"));

export { FusionAuthIdpGoogleArgs, FusionAuthIdpGoogleState } from "./fusionAuthIdpGoogle";
export type FusionAuthIdpGoogle = import("./fusionAuthIdpGoogle").FusionAuthIdpGoogle;
export const FusionAuthIdpGoogle: typeof import("./fusionAuthIdpGoogle").FusionAuthIdpGoogle = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpGoogle"], () => require("./fusionAuthIdpGoogle"));

export { FusionAuthIdpLinkedInArgs, FusionAuthIdpLinkedInState } from "./fusionAuthIdpLinkedIn";
export type FusionAuthIdpLinkedIn = import("./fusionAuthIdpLinkedIn").FusionAuthIdpLinkedIn;
export const FusionAuthIdpLinkedIn: typeof import("./fusionAuthIdpLinkedIn").FusionAuthIdpLinkedIn = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpLinkedIn"], () => require("./fusionAuthIdpLinkedIn"));

export { FusionAuthIdpOpenIdConnectArgs, FusionAuthIdpOpenIdConnectState } from "./fusionAuthIdpOpenIdConnect";
export type FusionAuthIdpOpenIdConnect = import("./fusionAuthIdpOpenIdConnect").FusionAuthIdpOpenIdConnect;
export const FusionAuthIdpOpenIdConnect: typeof import("./fusionAuthIdpOpenIdConnect").FusionAuthIdpOpenIdConnect = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpOpenIdConnect"], () => require("./fusionAuthIdpOpenIdConnect"));

export { FusionAuthIdpPsnArgs, FusionAuthIdpPsnState } from "./fusionAuthIdpPsn";
export type FusionAuthIdpPsn = import("./fusionAuthIdpPsn").FusionAuthIdpPsn;
export const FusionAuthIdpPsn: typeof import("./fusionAuthIdpPsn").FusionAuthIdpPsn = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpPsn"], () => require("./fusionAuthIdpPsn"));

export { FusionAuthIdpSamlV2IdpInitiatedArgs, FusionAuthIdpSamlV2IdpInitiatedState } from "./fusionAuthIdpSamlV2IdpInitiated";
export type FusionAuthIdpSamlV2IdpInitiated = import("./fusionAuthIdpSamlV2IdpInitiated").FusionAuthIdpSamlV2IdpInitiated;
export const FusionAuthIdpSamlV2IdpInitiated: typeof import("./fusionAuthIdpSamlV2IdpInitiated").FusionAuthIdpSamlV2IdpInitiated = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpSamlV2IdpInitiated"], () => require("./fusionAuthIdpSamlV2IdpInitiated"));

export { FusionAuthIdpSamlv2Args, FusionAuthIdpSamlv2State } from "./fusionAuthIdpSamlv2";
export type FusionAuthIdpSamlv2 = import("./fusionAuthIdpSamlv2").FusionAuthIdpSamlv2;
export const FusionAuthIdpSamlv2: typeof import("./fusionAuthIdpSamlv2").FusionAuthIdpSamlv2 = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpSamlv2"], () => require("./fusionAuthIdpSamlv2"));

export { FusionAuthIdpSteamArgs, FusionAuthIdpSteamState } from "./fusionAuthIdpSteam";
export type FusionAuthIdpSteam = import("./fusionAuthIdpSteam").FusionAuthIdpSteam;
export const FusionAuthIdpSteam: typeof import("./fusionAuthIdpSteam").FusionAuthIdpSteam = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpSteam"], () => require("./fusionAuthIdpSteam"));

export { FusionAuthIdpTwitchArgs, FusionAuthIdpTwitchState } from "./fusionAuthIdpTwitch";
export type FusionAuthIdpTwitch = import("./fusionAuthIdpTwitch").FusionAuthIdpTwitch;
export const FusionAuthIdpTwitch: typeof import("./fusionAuthIdpTwitch").FusionAuthIdpTwitch = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpTwitch"], () => require("./fusionAuthIdpTwitch"));

export { FusionAuthIdpXBoxArgs, FusionAuthIdpXBoxState } from "./fusionAuthIdpXBox";
export type FusionAuthIdpXBox = import("./fusionAuthIdpXBox").FusionAuthIdpXBox;
export const FusionAuthIdpXBox: typeof import("./fusionAuthIdpXBox").FusionAuthIdpXBox = null as any;
utilities.lazyLoad(exports, ["FusionAuthIdpXBox"], () => require("./fusionAuthIdpXBox"));

export { FusionAuthImportedKeyArgs, FusionAuthImportedKeyState } from "./fusionAuthImportedKey";
export type FusionAuthImportedKey = import("./fusionAuthImportedKey").FusionAuthImportedKey;
export const FusionAuthImportedKey: typeof import("./fusionAuthImportedKey").FusionAuthImportedKey = null as any;
utilities.lazyLoad(exports, ["FusionAuthImportedKey"], () => require("./fusionAuthImportedKey"));

export { FusionAuthKeyArgs, FusionAuthKeyState } from "./fusionAuthKey";
export type FusionAuthKey = import("./fusionAuthKey").FusionAuthKey;
export const FusionAuthKey: typeof import("./fusionAuthKey").FusionAuthKey = null as any;
utilities.lazyLoad(exports, ["FusionAuthKey"], () => require("./fusionAuthKey"));

export { FusionAuthLambdaArgs, FusionAuthLambdaState } from "./fusionAuthLambda";
export type FusionAuthLambda = import("./fusionAuthLambda").FusionAuthLambda;
export const FusionAuthLambda: typeof import("./fusionAuthLambda").FusionAuthLambda = null as any;
utilities.lazyLoad(exports, ["FusionAuthLambda"], () => require("./fusionAuthLambda"));

export { FusionAuthReactorArgs, FusionAuthReactorState } from "./fusionAuthReactor";
export type FusionAuthReactor = import("./fusionAuthReactor").FusionAuthReactor;
export const FusionAuthReactor: typeof import("./fusionAuthReactor").FusionAuthReactor = null as any;
utilities.lazyLoad(exports, ["FusionAuthReactor"], () => require("./fusionAuthReactor"));

export { FusionAuthRegistrationArgs, FusionAuthRegistrationState } from "./fusionAuthRegistration";
export type FusionAuthRegistration = import("./fusionAuthRegistration").FusionAuthRegistration;
export const FusionAuthRegistration: typeof import("./fusionAuthRegistration").FusionAuthRegistration = null as any;
utilities.lazyLoad(exports, ["FusionAuthRegistration"], () => require("./fusionAuthRegistration"));

export { FusionAuthSystemConfigurationArgs, FusionAuthSystemConfigurationState } from "./fusionAuthSystemConfiguration";
export type FusionAuthSystemConfiguration = import("./fusionAuthSystemConfiguration").FusionAuthSystemConfiguration;
export const FusionAuthSystemConfiguration: typeof import("./fusionAuthSystemConfiguration").FusionAuthSystemConfiguration = null as any;
utilities.lazyLoad(exports, ["FusionAuthSystemConfiguration"], () => require("./fusionAuthSystemConfiguration"));

export { FusionAuthTenantArgs, FusionAuthTenantState } from "./fusionAuthTenant";
export type FusionAuthTenant = import("./fusionAuthTenant").FusionAuthTenant;
export const FusionAuthTenant: typeof import("./fusionAuthTenant").FusionAuthTenant = null as any;
utilities.lazyLoad(exports, ["FusionAuthTenant"], () => require("./fusionAuthTenant"));

export { FusionAuthThemeArgs, FusionAuthThemeState } from "./fusionAuthTheme";
export type FusionAuthTheme = import("./fusionAuthTheme").FusionAuthTheme;
export const FusionAuthTheme: typeof import("./fusionAuthTheme").FusionAuthTheme = null as any;
utilities.lazyLoad(exports, ["FusionAuthTheme"], () => require("./fusionAuthTheme"));

export { FusionAuthUserArgs, FusionAuthUserState } from "./fusionAuthUser";
export type FusionAuthUser = import("./fusionAuthUser").FusionAuthUser;
export const FusionAuthUser: typeof import("./fusionAuthUser").FusionAuthUser = null as any;
utilities.lazyLoad(exports, ["FusionAuthUser"], () => require("./fusionAuthUser"));

export { FusionAuthUserActionArgs, FusionAuthUserActionState } from "./fusionAuthUserAction";
export type FusionAuthUserAction = import("./fusionAuthUserAction").FusionAuthUserAction;
export const FusionAuthUserAction: typeof import("./fusionAuthUserAction").FusionAuthUserAction = null as any;
utilities.lazyLoad(exports, ["FusionAuthUserAction"], () => require("./fusionAuthUserAction"));

export { FusionAuthWebhookArgs, FusionAuthWebhookState } from "./fusionAuthWebhook";
export type FusionAuthWebhook = import("./fusionAuthWebhook").FusionAuthWebhook;
export const FusionAuthWebhook: typeof import("./fusionAuthWebhook").FusionAuthWebhook = null as any;
utilities.lazyLoad(exports, ["FusionAuthWebhook"], () => require("./fusionAuthWebhook"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetApplicationRoleArgs, GetApplicationRoleResult, GetApplicationRoleOutputArgs } from "./getApplicationRole";
export const getApplicationRole: typeof import("./getApplicationRole").getApplicationRole = null as any;
export const getApplicationRoleOutput: typeof import("./getApplicationRole").getApplicationRoleOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationRole","getApplicationRoleOutput"], () => require("./getApplicationRole"));

export { GetEMailArgs, GetEMailResult, GetEMailOutputArgs } from "./getEMail";
export const getEMail: typeof import("./getEMail").getEMail = null as any;
export const getEMailOutput: typeof import("./getEMail").getEMailOutput = null as any;
utilities.lazyLoad(exports, ["getEMail","getEMailOutput"], () => require("./getEMail"));

export { GetFormArgs, GetFormResult, GetFormOutputArgs } from "./getForm";
export const getForm: typeof import("./getForm").getForm = null as any;
export const getFormOutput: typeof import("./getForm").getFormOutput = null as any;
utilities.lazyLoad(exports, ["getForm","getFormOutput"], () => require("./getForm"));

export { GetFormFieldArgs, GetFormFieldResult, GetFormFieldOutputArgs } from "./getFormField";
export const getFormField: typeof import("./getFormField").getFormField = null as any;
export const getFormFieldOutput: typeof import("./getFormField").getFormFieldOutput = null as any;
utilities.lazyLoad(exports, ["getFormField","getFormFieldOutput"], () => require("./getFormField"));

export { GetIdpArgs, GetIdpResult, GetIdpOutputArgs } from "./getIdp";
export const getIdp: typeof import("./getIdp").getIdp = null as any;
export const getIdpOutput: typeof import("./getIdp").getIdpOutput = null as any;
utilities.lazyLoad(exports, ["getIdp","getIdpOutput"], () => require("./getIdp"));

export { GetLambdaArgs, GetLambdaResult, GetLambdaOutputArgs } from "./getLambda";
export const getLambda: typeof import("./getLambda").getLambda = null as any;
export const getLambdaOutput: typeof import("./getLambda").getLambdaOutput = null as any;
utilities.lazyLoad(exports, ["getLambda","getLambdaOutput"], () => require("./getLambda"));

export { GetTenantArgs, GetTenantResult, GetTenantOutputArgs } from "./getTenant";
export const getTenant: typeof import("./getTenant").getTenant = null as any;
export const getTenantOutput: typeof import("./getTenant").getTenantOutput = null as any;
utilities.lazyLoad(exports, ["getTenant","getTenantOutput"], () => require("./getTenant"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fusionauth:index/fusionAuthApiKey:FusionAuthApiKey":
                return new FusionAuthApiKey(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthApplication:FusionAuthApplication":
                return new FusionAuthApplication(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthApplicationRole:FusionAuthApplicationRole":
                return new FusionAuthApplicationRole(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthEMail:FusionAuthEMail":
                return new FusionAuthEMail(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthEntity:FusionAuthEntity":
                return new FusionAuthEntity(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthEntityGrant:FusionAuthEntityGrant":
                return new FusionAuthEntityGrant(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthEntityType:FusionAuthEntityType":
                return new FusionAuthEntityType(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthEntityTypePermission:FusionAuthEntityTypePermission":
                return new FusionAuthEntityTypePermission(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthForm:FusionAuthForm":
                return new FusionAuthForm(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthFormField:FusionAuthFormField":
                return new FusionAuthFormField(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthGenericConnector:FusionAuthGenericConnector":
                return new FusionAuthGenericConnector(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthGroup:FusionAuthGroup":
                return new FusionAuthGroup(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpApple:FusionAuthIdpApple":
                return new FusionAuthIdpApple(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpExternalJwt:FusionAuthIdpExternalJwt":
                return new FusionAuthIdpExternalJwt(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpFacebook:FusionAuthIdpFacebook":
                return new FusionAuthIdpFacebook(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpGoogle:FusionAuthIdpGoogle":
                return new FusionAuthIdpGoogle(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpLinkedIn:FusionAuthIdpLinkedIn":
                return new FusionAuthIdpLinkedIn(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpOpenIdConnect:FusionAuthIdpOpenIdConnect":
                return new FusionAuthIdpOpenIdConnect(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpPsn:FusionAuthIdpPsn":
                return new FusionAuthIdpPsn(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpSamlV2IdpInitiated:FusionAuthIdpSamlV2IdpInitiated":
                return new FusionAuthIdpSamlV2IdpInitiated(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpSamlv2:FusionAuthIdpSamlv2":
                return new FusionAuthIdpSamlv2(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpSteam:FusionAuthIdpSteam":
                return new FusionAuthIdpSteam(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpTwitch:FusionAuthIdpTwitch":
                return new FusionAuthIdpTwitch(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthIdpXBox:FusionAuthIdpXBox":
                return new FusionAuthIdpXBox(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthImportedKey:FusionAuthImportedKey":
                return new FusionAuthImportedKey(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthKey:FusionAuthKey":
                return new FusionAuthKey(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthLambda:FusionAuthLambda":
                return new FusionAuthLambda(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthReactor:FusionAuthReactor":
                return new FusionAuthReactor(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthRegistration:FusionAuthRegistration":
                return new FusionAuthRegistration(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthSystemConfiguration:FusionAuthSystemConfiguration":
                return new FusionAuthSystemConfiguration(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthTenant:FusionAuthTenant":
                return new FusionAuthTenant(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthTheme:FusionAuthTheme":
                return new FusionAuthTheme(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthUser:FusionAuthUser":
                return new FusionAuthUser(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthUserAction:FusionAuthUserAction":
                return new FusionAuthUserAction(name, <any>undefined, { urn })
            case "fusionauth:index/fusionAuthWebhook:FusionAuthWebhook":
                return new FusionAuthWebhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthApiKey", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthApplication", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthApplicationRole", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthEMail", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthEntity", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthEntityGrant", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthEntityType", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthEntityTypePermission", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthForm", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthFormField", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthGenericConnector", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthGroup", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpApple", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpExternalJwt", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpFacebook", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpGoogle", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpLinkedIn", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpOpenIdConnect", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpPsn", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpSamlV2IdpInitiated", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpSamlv2", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpSteam", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpTwitch", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthIdpXBox", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthImportedKey", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthKey", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthLambda", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthReactor", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthRegistration", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthSystemConfiguration", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthTenant", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthTheme", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthUser", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthUserAction", _module)
pulumi.runtime.registerResourceModule("fusionauth", "index/fusionAuthWebhook", _module)
pulumi.runtime.registerResourcePackage("fusionauth", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fusionauth") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
