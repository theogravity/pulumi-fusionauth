// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Reactor Resource
 *
 * The Reactor is FusionAuthâ€™s license system. Reactor is used to activate features based upon your licensing tier.
 *
 * [Reactor API](https://fusionauth.io/docs/v1/tech/apis/reactor)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fusionauth from "pulumi-fusionauth";
 *
 * const reactor = new fusionauth.FusionAuthReactor("reactor", {
 *     license: "abc",
 *     licenseId: "xyz",
 * });
 * ```
 */
export class FusionAuthReactor extends pulumi.CustomResource {
    /**
     * Get an existing FusionAuthReactor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FusionAuthReactorState, opts?: pulumi.CustomResourceOptions): FusionAuthReactor {
        return new FusionAuthReactor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fusionauth:index/fusionAuthReactor:FusionAuthReactor';

    /**
     * Returns true if the given object is an instance of FusionAuthReactor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FusionAuthReactor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FusionAuthReactor.__pulumiType;
    }

    /**
     * The Base64 encoded license value. This value is necessary in an air gapped configuration where outbound network access is not available.
     */
    public readonly license!: pulumi.Output<string | undefined>;
    /**
     * The license Id to activate.
     */
    public readonly licenseId!: pulumi.Output<string>;

    /**
     * Create a FusionAuthReactor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FusionAuthReactorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FusionAuthReactorArgs | FusionAuthReactorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FusionAuthReactorState | undefined;
            resourceInputs["license"] = state ? state.license : undefined;
            resourceInputs["licenseId"] = state ? state.licenseId : undefined;
        } else {
            const args = argsOrState as FusionAuthReactorArgs | undefined;
            if ((!args || args.licenseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseId'");
            }
            resourceInputs["license"] = args?.license ? pulumi.secret(args.license) : undefined;
            resourceInputs["licenseId"] = args?.licenseId ? pulumi.secret(args.licenseId) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["license", "licenseId"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FusionAuthReactor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FusionAuthReactor resources.
 */
export interface FusionAuthReactorState {
    /**
     * The Base64 encoded license value. This value is necessary in an air gapped configuration where outbound network access is not available.
     */
    license?: pulumi.Input<string>;
    /**
     * The license Id to activate.
     */
    licenseId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FusionAuthReactor resource.
 */
export interface FusionAuthReactorArgs {
    /**
     * The Base64 encoded license value. This value is necessary in an air gapped configuration where outbound network access is not available.
     */
    license?: pulumi.Input<string>;
    /**
     * The license Id to activate.
     */
    licenseId: pulumi.Input<string>;
}
