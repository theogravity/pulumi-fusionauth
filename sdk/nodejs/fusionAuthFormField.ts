// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Form Field Resource
 *
 * A FusionAuth Form Field is an object that can be customized to receive input within a FusionAuth Form.
 *
 * [Form Field API](https://fusionauth.io/docs/v1/tech/apis/form-fields/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fusionauth from "pulumi-fusionauth";
 *
 * const field = new fusionauth.FusionAuthFormField("field", {
 *     confirm: true,
 *     data: {
 *         leftAddOn: "send",
 *     },
 *     description: "Information about this custom field",
 *     key: "user.firstName",
 *     required: true,
 * });
 * ```
 */
export class FusionAuthFormField extends pulumi.CustomResource {
    /**
     * Get an existing FusionAuthFormField resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FusionAuthFormFieldState, opts?: pulumi.CustomResourceOptions): FusionAuthFormField {
        return new FusionAuthFormField(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fusionauth:index/fusionAuthFormField:FusionAuthFormField';

    /**
     * Returns true if the given object is an instance of FusionAuthFormField.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FusionAuthFormField {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FusionAuthFormField.__pulumiType;
    }

    /**
     * Determines if the user input should be confirmed by requiring the value to be entered twice. If true, a confirmation field is included.
     */
    public readonly confirm!: pulumi.Output<boolean | undefined>;
    /**
     * The Id of an existing Consent. This field will be required when the type is set to consent.
     */
    public readonly consentId!: pulumi.Output<string | undefined>;
    /**
     * The Form Field control
     */
    public readonly control!: pulumi.Output<string>;
    /**
     * An object that can hold any information about the Form Field that should be persisted.
     */
    public readonly data!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * A description of the Form Field.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The Id to use for the new Form Field. If not specified a secure random UUID will be generated.
     */
    public readonly formFieldId!: pulumi.Output<string | undefined>;
    /**
     * The key is the path to the value in the user or registration object.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The unique name of the Form Field.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of options that are applied to checkbox, radio, or select controls.
     */
    public readonly options!: pulumi.Output<string[] | undefined>;
    /**
     * Determines if a value is required to complete the form.
     */
    public readonly required!: pulumi.Output<boolean | undefined>;
    /**
     * The data type used to store the value in FusionAuth.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly validator!: pulumi.Output<outputs.FusionAuthFormFieldValidator>;

    /**
     * Create a FusionAuthFormField resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FusionAuthFormFieldArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FusionAuthFormFieldArgs | FusionAuthFormFieldState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FusionAuthFormFieldState | undefined;
            resourceInputs["confirm"] = state ? state.confirm : undefined;
            resourceInputs["consentId"] = state ? state.consentId : undefined;
            resourceInputs["control"] = state ? state.control : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["formFieldId"] = state ? state.formFieldId : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["required"] = state ? state.required : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validator"] = state ? state.validator : undefined;
        } else {
            const args = argsOrState as FusionAuthFormFieldArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["confirm"] = args ? args.confirm : undefined;
            resourceInputs["consentId"] = args ? args.consentId : undefined;
            resourceInputs["control"] = args ? args.control : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["formFieldId"] = args ? args.formFieldId : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["required"] = args ? args.required : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["validator"] = args ? args.validator : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FusionAuthFormField.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FusionAuthFormField resources.
 */
export interface FusionAuthFormFieldState {
    /**
     * Determines if the user input should be confirmed by requiring the value to be entered twice. If true, a confirmation field is included.
     */
    confirm?: pulumi.Input<boolean>;
    /**
     * The Id of an existing Consent. This field will be required when the type is set to consent.
     */
    consentId?: pulumi.Input<string>;
    /**
     * The Form Field control
     */
    control?: pulumi.Input<string>;
    /**
     * An object that can hold any information about the Form Field that should be persisted.
     */
    data?: pulumi.Input<{[key: string]: any}>;
    /**
     * A description of the Form Field.
     */
    description?: pulumi.Input<string>;
    /**
     * The Id to use for the new Form Field. If not specified a secure random UUID will be generated.
     */
    formFieldId?: pulumi.Input<string>;
    /**
     * The key is the path to the value in the user or registration object.
     */
    key?: pulumi.Input<string>;
    /**
     * The unique name of the Form Field.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of options that are applied to checkbox, radio, or select controls.
     */
    options?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines if a value is required to complete the form.
     */
    required?: pulumi.Input<boolean>;
    /**
     * The data type used to store the value in FusionAuth.
     */
    type?: pulumi.Input<string>;
    validator?: pulumi.Input<inputs.FusionAuthFormFieldValidator>;
}

/**
 * The set of arguments for constructing a FusionAuthFormField resource.
 */
export interface FusionAuthFormFieldArgs {
    /**
     * Determines if the user input should be confirmed by requiring the value to be entered twice. If true, a confirmation field is included.
     */
    confirm?: pulumi.Input<boolean>;
    /**
     * The Id of an existing Consent. This field will be required when the type is set to consent.
     */
    consentId?: pulumi.Input<string>;
    /**
     * The Form Field control
     */
    control?: pulumi.Input<string>;
    /**
     * An object that can hold any information about the Form Field that should be persisted.
     */
    data?: pulumi.Input<{[key: string]: any}>;
    /**
     * A description of the Form Field.
     */
    description?: pulumi.Input<string>;
    /**
     * The Id to use for the new Form Field. If not specified a secure random UUID will be generated.
     */
    formFieldId?: pulumi.Input<string>;
    /**
     * The key is the path to the value in the user or registration object.
     */
    key: pulumi.Input<string>;
    /**
     * The unique name of the Form Field.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of options that are applied to checkbox, radio, or select controls.
     */
    options?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines if a value is required to complete the form.
     */
    required?: pulumi.Input<boolean>;
    /**
     * The data type used to store the value in FusionAuth.
     */
    type?: pulumi.Input<string>;
    validator?: pulumi.Input<inputs.FusionAuthFormFieldValidator>;
}
