// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Application OAuth Scope Resource
 *
 * The Application OAuth Scope resource allows you to define the scopes that an application can request when using OAuth.
 *
 * [Application OAuth Scope API](https://fusionauth.io/docs/apis/scopes)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fusionauth from "pulumi-fusionauth";
 *
 * const _this = new fusionauth.FusionAuthApplicationOAuthScope("this", {
 *     applicationId: fusionauth_application["this"].id,
 *     data: {
 *         addedBy: "Tom",
 *         addedOn: "2025-02-05",
 *     },
 *     defaultConsentDetail: "This will provide the requesting application read-only access to your data",
 *     defaultConsentMessage: "View your data",
 *     description: "Provides an application read-only access to a user's data",
 *     required: true,
 * });
 * ```
 *
 * @deprecated fusionauth.index/applicationoauthscope.ApplicationOauthScope has been deprecated in favor of fusionauth.index/fusionauthapplicationoauthscope.FusionAuthApplicationOAuthScope
 */
export class ApplicationOauthScope extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationOauthScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationOauthScopeState, opts?: pulumi.CustomResourceOptions): ApplicationOauthScope {
        pulumi.log.warn("ApplicationOauthScope is deprecated: fusionauth.index/applicationoauthscope.ApplicationOauthScope has been deprecated in favor of fusionauth.index/fusionauthapplicationoauthscope.FusionAuthApplicationOAuthScope")
        return new ApplicationOauthScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fusionauth:index/applicationOauthScope:ApplicationOauthScope';

    /**
     * Returns true if the given object is an instance of ApplicationOauthScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationOauthScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationOauthScope.__pulumiType;
    }

    /**
     * ID of the application that this role is for.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * An object that can hold any information about the OAuth Scope that should be persisted.
     */
    public readonly data!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * "The default detail to display on the OAuth consent screen if one cannot be found in the theme.
     */
    public readonly defaultConsentDetail!: pulumi.Output<string | undefined>;
    /**
     * The default message to display on the OAuth consent screen if one cannot be found in the theme.
     */
    public readonly defaultConsentMessage!: pulumi.Output<string | undefined>;
    /**
     * A description of the OAuth Scope. This is used for display purposes only.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the Role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Determines if the OAuth Scope is required when requested in an OAuth workflow.
     */
    public readonly required!: pulumi.Output<boolean | undefined>;
    /**
     * The Id to use for the new OAuth Scope. If not specified a secure random UUID will be generated.
     */
    public readonly scopeId!: pulumi.Output<string>;

    /**
     * Create a ApplicationOauthScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated fusionauth.index/applicationoauthscope.ApplicationOauthScope has been deprecated in favor of fusionauth.index/fusionauthapplicationoauthscope.FusionAuthApplicationOAuthScope */
    constructor(name: string, args: ApplicationOauthScopeArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated fusionauth.index/applicationoauthscope.ApplicationOauthScope has been deprecated in favor of fusionauth.index/fusionauthapplicationoauthscope.FusionAuthApplicationOAuthScope */
    constructor(name: string, argsOrState?: ApplicationOauthScopeArgs | ApplicationOauthScopeState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("ApplicationOauthScope is deprecated: fusionauth.index/applicationoauthscope.ApplicationOauthScope has been deprecated in favor of fusionauth.index/fusionauthapplicationoauthscope.FusionAuthApplicationOAuthScope")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationOauthScopeState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["defaultConsentDetail"] = state ? state.defaultConsentDetail : undefined;
            resourceInputs["defaultConsentMessage"] = state ? state.defaultConsentMessage : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["required"] = state ? state.required : undefined;
            resourceInputs["scopeId"] = state ? state.scopeId : undefined;
        } else {
            const args = argsOrState as ApplicationOauthScopeArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["defaultConsentDetail"] = args ? args.defaultConsentDetail : undefined;
            resourceInputs["defaultConsentMessage"] = args ? args.defaultConsentMessage : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["required"] = args ? args.required : undefined;
            resourceInputs["scopeId"] = args ? args.scopeId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationOauthScope.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationOauthScope resources.
 */
export interface ApplicationOauthScopeState {
    /**
     * ID of the application that this role is for.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * An object that can hold any information about the OAuth Scope that should be persisted.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * "The default detail to display on the OAuth consent screen if one cannot be found in the theme.
     */
    defaultConsentDetail?: pulumi.Input<string>;
    /**
     * The default message to display on the OAuth consent screen if one cannot be found in the theme.
     */
    defaultConsentMessage?: pulumi.Input<string>;
    /**
     * A description of the OAuth Scope. This is used for display purposes only.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Role.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines if the OAuth Scope is required when requested in an OAuth workflow.
     */
    required?: pulumi.Input<boolean>;
    /**
     * The Id to use for the new OAuth Scope. If not specified a secure random UUID will be generated.
     */
    scopeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationOauthScope resource.
 */
export interface ApplicationOauthScopeArgs {
    /**
     * ID of the application that this role is for.
     */
    applicationId: pulumi.Input<string>;
    /**
     * An object that can hold any information about the OAuth Scope that should be persisted.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * "The default detail to display on the OAuth consent screen if one cannot be found in the theme.
     */
    defaultConsentDetail?: pulumi.Input<string>;
    /**
     * The default message to display on the OAuth consent screen if one cannot be found in the theme.
     */
    defaultConsentMessage?: pulumi.Input<string>;
    /**
     * A description of the OAuth Scope. This is used for display purposes only.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Role.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines if the OAuth Scope is required when requested in an OAuth workflow.
     */
    required?: pulumi.Input<boolean>;
    /**
     * The Id to use for the new OAuth Scope. If not specified a secure random UUID will be generated.
     */
    scopeId?: pulumi.Input<string>;
}
