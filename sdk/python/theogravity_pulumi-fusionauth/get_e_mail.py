# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetEMailResult',
    'AwaitableGetEMailResult',
    'get_e_mail',
    'get_e_mail_output',
]

@pulumi.output_type
class GetEMailResult:
    """
    A collection of values returned by getEMail.
    """
    def __init__(__self__, default_from_name=None, default_html_template=None, default_subject=None, default_text_template=None, from_email=None, id=None, localized_from_names=None, localized_html_templates=None, localized_subjects=None, localized_text_templates=None, name=None):
        if default_from_name and not isinstance(default_from_name, str):
            raise TypeError("Expected argument 'default_from_name' to be a str")
        pulumi.set(__self__, "default_from_name", default_from_name)
        if default_html_template and not isinstance(default_html_template, str):
            raise TypeError("Expected argument 'default_html_template' to be a str")
        pulumi.set(__self__, "default_html_template", default_html_template)
        if default_subject and not isinstance(default_subject, str):
            raise TypeError("Expected argument 'default_subject' to be a str")
        pulumi.set(__self__, "default_subject", default_subject)
        if default_text_template and not isinstance(default_text_template, str):
            raise TypeError("Expected argument 'default_text_template' to be a str")
        pulumi.set(__self__, "default_text_template", default_text_template)
        if from_email and not isinstance(from_email, str):
            raise TypeError("Expected argument 'from_email' to be a str")
        pulumi.set(__self__, "from_email", from_email)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if localized_from_names and not isinstance(localized_from_names, dict):
            raise TypeError("Expected argument 'localized_from_names' to be a dict")
        pulumi.set(__self__, "localized_from_names", localized_from_names)
        if localized_html_templates and not isinstance(localized_html_templates, dict):
            raise TypeError("Expected argument 'localized_html_templates' to be a dict")
        pulumi.set(__self__, "localized_html_templates", localized_html_templates)
        if localized_subjects and not isinstance(localized_subjects, dict):
            raise TypeError("Expected argument 'localized_subjects' to be a dict")
        pulumi.set(__self__, "localized_subjects", localized_subjects)
        if localized_text_templates and not isinstance(localized_text_templates, dict):
            raise TypeError("Expected argument 'localized_text_templates' to be a dict")
        pulumi.set(__self__, "localized_text_templates", localized_text_templates)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="defaultFromName")
    def default_from_name(self) -> str:
        """
        The default From Name used when sending emails.
        """
        return pulumi.get(self, "default_from_name")

    @property
    @pulumi.getter(name="defaultHtmlTemplate")
    def default_html_template(self) -> str:
        """
        The default HTML Email Template.
        """
        return pulumi.get(self, "default_html_template")

    @property
    @pulumi.getter(name="defaultSubject")
    def default_subject(self) -> str:
        """
        The default Subject used when sending emails.
        """
        return pulumi.get(self, "default_subject")

    @property
    @pulumi.getter(name="defaultTextTemplate")
    def default_text_template(self) -> str:
        """
        The default Text Email Template.
        """
        return pulumi.get(self, "default_text_template")

    @property
    @pulumi.getter(name="fromEmail")
    def from_email(self) -> Optional[str]:
        """
        The email address that this email will be sent from.
        """
        return pulumi.get(self, "from_email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of the Email Template.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localizedFromNames")
    def localized_from_names(self) -> Mapping[str, Any]:
        """
        The From Name used when sending emails to users who speak other languages.
        """
        return pulumi.get(self, "localized_from_names")

    @property
    @pulumi.getter(name="localizedHtmlTemplates")
    def localized_html_templates(self) -> Mapping[str, Any]:
        """
        The HTML Email Template used when sending emails to users who speak other languages.
        """
        return pulumi.get(self, "localized_html_templates")

    @property
    @pulumi.getter(name="localizedSubjects")
    def localized_subjects(self) -> Mapping[str, Any]:
        """
        The Subject used when sending emails to users who speak other languages.
        """
        return pulumi.get(self, "localized_subjects")

    @property
    @pulumi.getter(name="localizedTextTemplates")
    def localized_text_templates(self) -> Mapping[str, Any]:
        """
        The Text Email Template used when sending emails to users who speak other languages.
        """
        return pulumi.get(self, "localized_text_templates")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


class AwaitableGetEMailResult(GetEMailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEMailResult(
            default_from_name=self.default_from_name,
            default_html_template=self.default_html_template,
            default_subject=self.default_subject,
            default_text_template=self.default_text_template,
            from_email=self.from_email,
            id=self.id,
            localized_from_names=self.localized_from_names,
            localized_html_templates=self.localized_html_templates,
            localized_subjects=self.localized_subjects,
            localized_text_templates=self.localized_text_templates,
            name=self.name)


def get_e_mail(from_email: Optional[str] = None,
               name: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEMailResult:
    """
    ## # Email Resource

    This data source is used to fetch information about a specific Email Template.

    [Emails API](https://fusionauth.io/docs/v1/tech/apis/emails)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fusionauth as fusionauth

    default_breached_password = fusionauth.get_e_mail(name="[FusionAuth Default] Breached Password Notification")
    ```


    :param str from_email: The email address that this email will be sent from.
    :param str name: The name of the Email Template.
    """
    __args__ = dict()
    __args__['fromEmail'] = from_email
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fusionauth:index/getEMail:getEMail', __args__, opts=opts, typ=GetEMailResult).value

    return AwaitableGetEMailResult(
        default_from_name=__ret__.default_from_name,
        default_html_template=__ret__.default_html_template,
        default_subject=__ret__.default_subject,
        default_text_template=__ret__.default_text_template,
        from_email=__ret__.from_email,
        id=__ret__.id,
        localized_from_names=__ret__.localized_from_names,
        localized_html_templates=__ret__.localized_html_templates,
        localized_subjects=__ret__.localized_subjects,
        localized_text_templates=__ret__.localized_text_templates,
        name=__ret__.name)


@_utilities.lift_output_func(get_e_mail)
def get_e_mail_output(from_email: Optional[pulumi.Input[Optional[str]]] = None,
                      name: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEMailResult]:
    """
    ## # Email Resource

    This data source is used to fetch information about a specific Email Template.

    [Emails API](https://fusionauth.io/docs/v1/tech/apis/emails)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fusionauth as fusionauth

    default_breached_password = fusionauth.get_e_mail(name="[FusionAuth Default] Breached Password Notification")
    ```


    :param str from_email: The email address that this email will be sent from.
    :param str name: The name of the Email Template.
    """
    ...
