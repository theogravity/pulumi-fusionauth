# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FusionAuthSystemConfigurationArgs', 'FusionAuthSystemConfiguration']

@pulumi.input_type
class FusionAuthSystemConfigurationArgs:
    def __init__(__self__, *,
                 audit_log_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationAuditLogConfigurationArgs']] = None,
                 cors_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationCorsConfigurationArgs']] = None,
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 event_log_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationEventLogConfigurationArgs']] = None,
                 login_record_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationLoginRecordConfigurationArgs']] = None,
                 report_timezone: Optional[pulumi.Input[str]] = None,
                 trusted_proxy_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs']] = None,
                 ui_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationUiConfigurationArgs']] = None,
                 usage_data_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationUsageDataConfigurationArgs']] = None,
                 webhook_event_log_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationWebhookEventLogConfigurationArgs']] = None):
        """
        The set of arguments for constructing a FusionAuthSystemConfiguration resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] data: An object that can hold any information about the System that should be persisted.
        :param pulumi.Input[str] report_timezone: The time zone used to adjust the stored UTC time when generating reports. Since reports are usually rolled up hourly, this timezone will be used for demarcating the hours.
        :param pulumi.Input['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs'] trusted_proxy_configuration: The trusted proxy configuration.
        :param pulumi.Input['FusionAuthSystemConfigurationUsageDataConfigurationArgs'] usage_data_configuration: The usage data configuration.
        """
        if audit_log_configuration is not None:
            pulumi.set(__self__, "audit_log_configuration", audit_log_configuration)
        if cors_configuration is not None:
            pulumi.set(__self__, "cors_configuration", cors_configuration)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if event_log_configuration is not None:
            pulumi.set(__self__, "event_log_configuration", event_log_configuration)
        if login_record_configuration is not None:
            pulumi.set(__self__, "login_record_configuration", login_record_configuration)
        if report_timezone is not None:
            pulumi.set(__self__, "report_timezone", report_timezone)
        if trusted_proxy_configuration is not None:
            pulumi.set(__self__, "trusted_proxy_configuration", trusted_proxy_configuration)
        if ui_configuration is not None:
            pulumi.set(__self__, "ui_configuration", ui_configuration)
        if usage_data_configuration is not None:
            pulumi.set(__self__, "usage_data_configuration", usage_data_configuration)
        if webhook_event_log_configuration is not None:
            pulumi.set(__self__, "webhook_event_log_configuration", webhook_event_log_configuration)

    @property
    @pulumi.getter(name="auditLogConfiguration")
    def audit_log_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationAuditLogConfigurationArgs']]:
        return pulumi.get(self, "audit_log_configuration")

    @audit_log_configuration.setter
    def audit_log_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationAuditLogConfigurationArgs']]):
        pulumi.set(self, "audit_log_configuration", value)

    @property
    @pulumi.getter(name="corsConfiguration")
    def cors_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationCorsConfigurationArgs']]:
        return pulumi.get(self, "cors_configuration")

    @cors_configuration.setter
    def cors_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationCorsConfigurationArgs']]):
        pulumi.set(self, "cors_configuration", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An object that can hold any information about the System that should be persisted.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter(name="eventLogConfiguration")
    def event_log_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationEventLogConfigurationArgs']]:
        return pulumi.get(self, "event_log_configuration")

    @event_log_configuration.setter
    def event_log_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationEventLogConfigurationArgs']]):
        pulumi.set(self, "event_log_configuration", value)

    @property
    @pulumi.getter(name="loginRecordConfiguration")
    def login_record_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationLoginRecordConfigurationArgs']]:
        return pulumi.get(self, "login_record_configuration")

    @login_record_configuration.setter
    def login_record_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationLoginRecordConfigurationArgs']]):
        pulumi.set(self, "login_record_configuration", value)

    @property
    @pulumi.getter(name="reportTimezone")
    def report_timezone(self) -> Optional[pulumi.Input[str]]:
        """
        The time zone used to adjust the stored UTC time when generating reports. Since reports are usually rolled up hourly, this timezone will be used for demarcating the hours.
        """
        return pulumi.get(self, "report_timezone")

    @report_timezone.setter
    def report_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_timezone", value)

    @property
    @pulumi.getter(name="trustedProxyConfiguration")
    def trusted_proxy_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs']]:
        """
        The trusted proxy configuration.
        """
        return pulumi.get(self, "trusted_proxy_configuration")

    @trusted_proxy_configuration.setter
    def trusted_proxy_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs']]):
        pulumi.set(self, "trusted_proxy_configuration", value)

    @property
    @pulumi.getter(name="uiConfiguration")
    def ui_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationUiConfigurationArgs']]:
        return pulumi.get(self, "ui_configuration")

    @ui_configuration.setter
    def ui_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationUiConfigurationArgs']]):
        pulumi.set(self, "ui_configuration", value)

    @property
    @pulumi.getter(name="usageDataConfiguration")
    def usage_data_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationUsageDataConfigurationArgs']]:
        """
        The usage data configuration.
        """
        return pulumi.get(self, "usage_data_configuration")

    @usage_data_configuration.setter
    def usage_data_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationUsageDataConfigurationArgs']]):
        pulumi.set(self, "usage_data_configuration", value)

    @property
    @pulumi.getter(name="webhookEventLogConfiguration")
    def webhook_event_log_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationWebhookEventLogConfigurationArgs']]:
        return pulumi.get(self, "webhook_event_log_configuration")

    @webhook_event_log_configuration.setter
    def webhook_event_log_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationWebhookEventLogConfigurationArgs']]):
        pulumi.set(self, "webhook_event_log_configuration", value)


@pulumi.input_type
class _FusionAuthSystemConfigurationState:
    def __init__(__self__, *,
                 audit_log_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationAuditLogConfigurationArgs']] = None,
                 cors_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationCorsConfigurationArgs']] = None,
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 event_log_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationEventLogConfigurationArgs']] = None,
                 login_record_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationLoginRecordConfigurationArgs']] = None,
                 report_timezone: Optional[pulumi.Input[str]] = None,
                 trusted_proxy_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs']] = None,
                 ui_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationUiConfigurationArgs']] = None,
                 usage_data_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationUsageDataConfigurationArgs']] = None,
                 webhook_event_log_configuration: Optional[pulumi.Input['FusionAuthSystemConfigurationWebhookEventLogConfigurationArgs']] = None):
        """
        Input properties used for looking up and filtering FusionAuthSystemConfiguration resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] data: An object that can hold any information about the System that should be persisted.
        :param pulumi.Input[str] report_timezone: The time zone used to adjust the stored UTC time when generating reports. Since reports are usually rolled up hourly, this timezone will be used for demarcating the hours.
        :param pulumi.Input['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs'] trusted_proxy_configuration: The trusted proxy configuration.
        :param pulumi.Input['FusionAuthSystemConfigurationUsageDataConfigurationArgs'] usage_data_configuration: The usage data configuration.
        """
        if audit_log_configuration is not None:
            pulumi.set(__self__, "audit_log_configuration", audit_log_configuration)
        if cors_configuration is not None:
            pulumi.set(__self__, "cors_configuration", cors_configuration)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if event_log_configuration is not None:
            pulumi.set(__self__, "event_log_configuration", event_log_configuration)
        if login_record_configuration is not None:
            pulumi.set(__self__, "login_record_configuration", login_record_configuration)
        if report_timezone is not None:
            pulumi.set(__self__, "report_timezone", report_timezone)
        if trusted_proxy_configuration is not None:
            pulumi.set(__self__, "trusted_proxy_configuration", trusted_proxy_configuration)
        if ui_configuration is not None:
            pulumi.set(__self__, "ui_configuration", ui_configuration)
        if usage_data_configuration is not None:
            pulumi.set(__self__, "usage_data_configuration", usage_data_configuration)
        if webhook_event_log_configuration is not None:
            pulumi.set(__self__, "webhook_event_log_configuration", webhook_event_log_configuration)

    @property
    @pulumi.getter(name="auditLogConfiguration")
    def audit_log_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationAuditLogConfigurationArgs']]:
        return pulumi.get(self, "audit_log_configuration")

    @audit_log_configuration.setter
    def audit_log_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationAuditLogConfigurationArgs']]):
        pulumi.set(self, "audit_log_configuration", value)

    @property
    @pulumi.getter(name="corsConfiguration")
    def cors_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationCorsConfigurationArgs']]:
        return pulumi.get(self, "cors_configuration")

    @cors_configuration.setter
    def cors_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationCorsConfigurationArgs']]):
        pulumi.set(self, "cors_configuration", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An object that can hold any information about the System that should be persisted.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter(name="eventLogConfiguration")
    def event_log_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationEventLogConfigurationArgs']]:
        return pulumi.get(self, "event_log_configuration")

    @event_log_configuration.setter
    def event_log_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationEventLogConfigurationArgs']]):
        pulumi.set(self, "event_log_configuration", value)

    @property
    @pulumi.getter(name="loginRecordConfiguration")
    def login_record_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationLoginRecordConfigurationArgs']]:
        return pulumi.get(self, "login_record_configuration")

    @login_record_configuration.setter
    def login_record_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationLoginRecordConfigurationArgs']]):
        pulumi.set(self, "login_record_configuration", value)

    @property
    @pulumi.getter(name="reportTimezone")
    def report_timezone(self) -> Optional[pulumi.Input[str]]:
        """
        The time zone used to adjust the stored UTC time when generating reports. Since reports are usually rolled up hourly, this timezone will be used for demarcating the hours.
        """
        return pulumi.get(self, "report_timezone")

    @report_timezone.setter
    def report_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_timezone", value)

    @property
    @pulumi.getter(name="trustedProxyConfiguration")
    def trusted_proxy_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs']]:
        """
        The trusted proxy configuration.
        """
        return pulumi.get(self, "trusted_proxy_configuration")

    @trusted_proxy_configuration.setter
    def trusted_proxy_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs']]):
        pulumi.set(self, "trusted_proxy_configuration", value)

    @property
    @pulumi.getter(name="uiConfiguration")
    def ui_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationUiConfigurationArgs']]:
        return pulumi.get(self, "ui_configuration")

    @ui_configuration.setter
    def ui_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationUiConfigurationArgs']]):
        pulumi.set(self, "ui_configuration", value)

    @property
    @pulumi.getter(name="usageDataConfiguration")
    def usage_data_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationUsageDataConfigurationArgs']]:
        """
        The usage data configuration.
        """
        return pulumi.get(self, "usage_data_configuration")

    @usage_data_configuration.setter
    def usage_data_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationUsageDataConfigurationArgs']]):
        pulumi.set(self, "usage_data_configuration", value)

    @property
    @pulumi.getter(name="webhookEventLogConfiguration")
    def webhook_event_log_configuration(self) -> Optional[pulumi.Input['FusionAuthSystemConfigurationWebhookEventLogConfigurationArgs']]:
        return pulumi.get(self, "webhook_event_log_configuration")

    @webhook_event_log_configuration.setter
    def webhook_event_log_configuration(self, value: Optional[pulumi.Input['FusionAuthSystemConfigurationWebhookEventLogConfigurationArgs']]):
        pulumi.set(self, "webhook_event_log_configuration", value)


class FusionAuthSystemConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_log_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationAuditLogConfigurationArgs', 'FusionAuthSystemConfigurationAuditLogConfigurationArgsDict']]] = None,
                 cors_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationCorsConfigurationArgs', 'FusionAuthSystemConfigurationCorsConfigurationArgsDict']]] = None,
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 event_log_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationEventLogConfigurationArgs', 'FusionAuthSystemConfigurationEventLogConfigurationArgsDict']]] = None,
                 login_record_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationLoginRecordConfigurationArgs', 'FusionAuthSystemConfigurationLoginRecordConfigurationArgsDict']]] = None,
                 report_timezone: Optional[pulumi.Input[str]] = None,
                 trusted_proxy_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs', 'FusionAuthSystemConfigurationTrustedProxyConfigurationArgsDict']]] = None,
                 ui_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationUiConfigurationArgs', 'FusionAuthSystemConfigurationUiConfigurationArgsDict']]] = None,
                 usage_data_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationUsageDataConfigurationArgs', 'FusionAuthSystemConfigurationUsageDataConfigurationArgsDict']]] = None,
                 webhook_event_log_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationWebhookEventLogConfigurationArgs', 'FusionAuthSystemConfigurationWebhookEventLogConfigurationArgsDict']]] = None,
                 __props__=None):
        """
        ## # System Configuration Resource

        A registration is the association between a User and an Application that they log into.

        [System Configuration API](https://fusionauth.io/docs/v1/tech/apis/system)

        ## Example Usage

        ```python
        import pulumi
        import theogravity_pulumi_fusionauth as fusionauth

        example = fusionauth.FusionAuthSystemConfiguration("example",
            audit_log_configuration={
                "delete": {
                    "enabled": True,
                    "number_of_days_to_retain": 367,
                },
            },
            cors_configuration={
                "allowed_methods": [
                    "POST",
                    "PUT",
                ],
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] data: An object that can hold any information about the System that should be persisted.
        :param pulumi.Input[str] report_timezone: The time zone used to adjust the stored UTC time when generating reports. Since reports are usually rolled up hourly, this timezone will be used for demarcating the hours.
        :param pulumi.Input[Union['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs', 'FusionAuthSystemConfigurationTrustedProxyConfigurationArgsDict']] trusted_proxy_configuration: The trusted proxy configuration.
        :param pulumi.Input[Union['FusionAuthSystemConfigurationUsageDataConfigurationArgs', 'FusionAuthSystemConfigurationUsageDataConfigurationArgsDict']] usage_data_configuration: The usage data configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FusionAuthSystemConfigurationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # System Configuration Resource

        A registration is the association between a User and an Application that they log into.

        [System Configuration API](https://fusionauth.io/docs/v1/tech/apis/system)

        ## Example Usage

        ```python
        import pulumi
        import theogravity_pulumi_fusionauth as fusionauth

        example = fusionauth.FusionAuthSystemConfiguration("example",
            audit_log_configuration={
                "delete": {
                    "enabled": True,
                    "number_of_days_to_retain": 367,
                },
            },
            cors_configuration={
                "allowed_methods": [
                    "POST",
                    "PUT",
                ],
            })
        ```

        :param str resource_name: The name of the resource.
        :param FusionAuthSystemConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FusionAuthSystemConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_log_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationAuditLogConfigurationArgs', 'FusionAuthSystemConfigurationAuditLogConfigurationArgsDict']]] = None,
                 cors_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationCorsConfigurationArgs', 'FusionAuthSystemConfigurationCorsConfigurationArgsDict']]] = None,
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 event_log_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationEventLogConfigurationArgs', 'FusionAuthSystemConfigurationEventLogConfigurationArgsDict']]] = None,
                 login_record_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationLoginRecordConfigurationArgs', 'FusionAuthSystemConfigurationLoginRecordConfigurationArgsDict']]] = None,
                 report_timezone: Optional[pulumi.Input[str]] = None,
                 trusted_proxy_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs', 'FusionAuthSystemConfigurationTrustedProxyConfigurationArgsDict']]] = None,
                 ui_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationUiConfigurationArgs', 'FusionAuthSystemConfigurationUiConfigurationArgsDict']]] = None,
                 usage_data_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationUsageDataConfigurationArgs', 'FusionAuthSystemConfigurationUsageDataConfigurationArgsDict']]] = None,
                 webhook_event_log_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationWebhookEventLogConfigurationArgs', 'FusionAuthSystemConfigurationWebhookEventLogConfigurationArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FusionAuthSystemConfigurationArgs.__new__(FusionAuthSystemConfigurationArgs)

            __props__.__dict__["audit_log_configuration"] = audit_log_configuration
            __props__.__dict__["cors_configuration"] = cors_configuration
            __props__.__dict__["data"] = data
            __props__.__dict__["event_log_configuration"] = event_log_configuration
            __props__.__dict__["login_record_configuration"] = login_record_configuration
            __props__.__dict__["report_timezone"] = report_timezone
            __props__.__dict__["trusted_proxy_configuration"] = trusted_proxy_configuration
            __props__.__dict__["ui_configuration"] = ui_configuration
            __props__.__dict__["usage_data_configuration"] = usage_data_configuration
            __props__.__dict__["webhook_event_log_configuration"] = webhook_event_log_configuration
        super(FusionAuthSystemConfiguration, __self__).__init__(
            'fusionauth:index/fusionAuthSystemConfiguration:FusionAuthSystemConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            audit_log_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationAuditLogConfigurationArgs', 'FusionAuthSystemConfigurationAuditLogConfigurationArgsDict']]] = None,
            cors_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationCorsConfigurationArgs', 'FusionAuthSystemConfigurationCorsConfigurationArgsDict']]] = None,
            data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            event_log_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationEventLogConfigurationArgs', 'FusionAuthSystemConfigurationEventLogConfigurationArgsDict']]] = None,
            login_record_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationLoginRecordConfigurationArgs', 'FusionAuthSystemConfigurationLoginRecordConfigurationArgsDict']]] = None,
            report_timezone: Optional[pulumi.Input[str]] = None,
            trusted_proxy_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs', 'FusionAuthSystemConfigurationTrustedProxyConfigurationArgsDict']]] = None,
            ui_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationUiConfigurationArgs', 'FusionAuthSystemConfigurationUiConfigurationArgsDict']]] = None,
            usage_data_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationUsageDataConfigurationArgs', 'FusionAuthSystemConfigurationUsageDataConfigurationArgsDict']]] = None,
            webhook_event_log_configuration: Optional[pulumi.Input[Union['FusionAuthSystemConfigurationWebhookEventLogConfigurationArgs', 'FusionAuthSystemConfigurationWebhookEventLogConfigurationArgsDict']]] = None) -> 'FusionAuthSystemConfiguration':
        """
        Get an existing FusionAuthSystemConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] data: An object that can hold any information about the System that should be persisted.
        :param pulumi.Input[str] report_timezone: The time zone used to adjust the stored UTC time when generating reports. Since reports are usually rolled up hourly, this timezone will be used for demarcating the hours.
        :param pulumi.Input[Union['FusionAuthSystemConfigurationTrustedProxyConfigurationArgs', 'FusionAuthSystemConfigurationTrustedProxyConfigurationArgsDict']] trusted_proxy_configuration: The trusted proxy configuration.
        :param pulumi.Input[Union['FusionAuthSystemConfigurationUsageDataConfigurationArgs', 'FusionAuthSystemConfigurationUsageDataConfigurationArgsDict']] usage_data_configuration: The usage data configuration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FusionAuthSystemConfigurationState.__new__(_FusionAuthSystemConfigurationState)

        __props__.__dict__["audit_log_configuration"] = audit_log_configuration
        __props__.__dict__["cors_configuration"] = cors_configuration
        __props__.__dict__["data"] = data
        __props__.__dict__["event_log_configuration"] = event_log_configuration
        __props__.__dict__["login_record_configuration"] = login_record_configuration
        __props__.__dict__["report_timezone"] = report_timezone
        __props__.__dict__["trusted_proxy_configuration"] = trusted_proxy_configuration
        __props__.__dict__["ui_configuration"] = ui_configuration
        __props__.__dict__["usage_data_configuration"] = usage_data_configuration
        __props__.__dict__["webhook_event_log_configuration"] = webhook_event_log_configuration
        return FusionAuthSystemConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="auditLogConfiguration")
    def audit_log_configuration(self) -> pulumi.Output['outputs.FusionAuthSystemConfigurationAuditLogConfiguration']:
        return pulumi.get(self, "audit_log_configuration")

    @property
    @pulumi.getter(name="corsConfiguration")
    def cors_configuration(self) -> pulumi.Output['outputs.FusionAuthSystemConfigurationCorsConfiguration']:
        return pulumi.get(self, "cors_configuration")

    @property
    @pulumi.getter
    def data(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        An object that can hold any information about the System that should be persisted.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="eventLogConfiguration")
    def event_log_configuration(self) -> pulumi.Output['outputs.FusionAuthSystemConfigurationEventLogConfiguration']:
        return pulumi.get(self, "event_log_configuration")

    @property
    @pulumi.getter(name="loginRecordConfiguration")
    def login_record_configuration(self) -> pulumi.Output['outputs.FusionAuthSystemConfigurationLoginRecordConfiguration']:
        return pulumi.get(self, "login_record_configuration")

    @property
    @pulumi.getter(name="reportTimezone")
    def report_timezone(self) -> pulumi.Output[Optional[str]]:
        """
        The time zone used to adjust the stored UTC time when generating reports. Since reports are usually rolled up hourly, this timezone will be used for demarcating the hours.
        """
        return pulumi.get(self, "report_timezone")

    @property
    @pulumi.getter(name="trustedProxyConfiguration")
    def trusted_proxy_configuration(self) -> pulumi.Output[Optional['outputs.FusionAuthSystemConfigurationTrustedProxyConfiguration']]:
        """
        The trusted proxy configuration.
        """
        return pulumi.get(self, "trusted_proxy_configuration")

    @property
    @pulumi.getter(name="uiConfiguration")
    def ui_configuration(self) -> pulumi.Output['outputs.FusionAuthSystemConfigurationUiConfiguration']:
        return pulumi.get(self, "ui_configuration")

    @property
    @pulumi.getter(name="usageDataConfiguration")
    def usage_data_configuration(self) -> pulumi.Output[Optional['outputs.FusionAuthSystemConfigurationUsageDataConfiguration']]:
        """
        The usage data configuration.
        """
        return pulumi.get(self, "usage_data_configuration")

    @property
    @pulumi.getter(name="webhookEventLogConfiguration")
    def webhook_event_log_configuration(self) -> pulumi.Output['outputs.FusionAuthSystemConfigurationWebhookEventLogConfiguration']:
        return pulumi.get(self, "webhook_event_log_configuration")

