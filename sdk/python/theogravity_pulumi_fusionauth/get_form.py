# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetFormResult',
    'AwaitableGetFormResult',
    'get_form',
    'get_form_output',
]

@pulumi.output_type
class GetFormResult:
    """
    A collection of values returned by getForm.
    """
    def __init__(__self__, data=None, form_id=None, id=None, name=None, steps=None, type=None):
        if data and not isinstance(data, dict):
            raise TypeError("Expected argument 'data' to be a dict")
        pulumi.set(__self__, "data", data)
        if form_id and not isinstance(form_id, str):
            raise TypeError("Expected argument 'form_id' to be a str")
        pulumi.set(__self__, "form_id", form_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if steps and not isinstance(steps, list):
            raise TypeError("Expected argument 'steps' to be a list")
        pulumi.set(__self__, "steps", steps)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def data(self) -> Optional[Mapping[str, str]]:
        """
        An object that can hold any information about the Form that should be persisted.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="formId")
    def form_id(self) -> str:
        return pulumi.get(self, "form_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The unique name of the Form.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence['outputs.GetFormStepResult']]:
        """
        An ordered list of objects containing one or more Form Fields.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The form type. The possible values are:
        * `adminRegistration` - This form be used to customize the add and edit User Registration form in the FusionAuth UI.
        * `adminUser` - This form can be used to customize the add and edit User form in the FusionAuth UI.
        """
        return pulumi.get(self, "type")


class AwaitableGetFormResult(GetFormResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFormResult(
            data=self.data,
            form_id=self.form_id,
            id=self.id,
            name=self.name,
            steps=self.steps,
            type=self.type)


def get_form(data: Optional[Mapping[str, str]] = None,
             form_id: Optional[str] = None,
             name: Optional[str] = None,
             steps: Optional[Sequence[Union['GetFormStepArgs', 'GetFormStepArgsDict']]] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFormResult:
    """
    ## # Form Resource

    A FusionAuth Form is a customizable object that contains one-to-many ordered steps. Each step is comprised of one or more Form Fields.

    [Forms API](https://fusionauth.io/docs/v1/tech/apis/forms)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fusionauth as fusionauth

    default = fusionauth.get_form(name="Default User Self Service provided by FusionAuth")
    ```


    :param Mapping[str, str] data: An object that can hold any information about the Form that should be persisted.
    :param str form_id: The unique id of the Form. Either `form_id` or `name` must be specified.
    :param str name: The name of the Form. Either `form_id` or `name` must be specified.
    :param Sequence[Union['GetFormStepArgs', 'GetFormStepArgsDict']] steps: An ordered list of objects containing one or more Form Fields.
    :param str type: The form type. The possible values are:
           * `adminRegistration` - This form be used to customize the add and edit User Registration form in the FusionAuth UI.
           * `adminUser` - This form can be used to customize the add and edit User form in the FusionAuth UI.
    """
    __args__ = dict()
    __args__['data'] = data
    __args__['formId'] = form_id
    __args__['name'] = name
    __args__['steps'] = steps
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fusionauth:index/getForm:getForm', __args__, opts=opts, typ=GetFormResult).value

    return AwaitableGetFormResult(
        data=pulumi.get(__ret__, 'data'),
        form_id=pulumi.get(__ret__, 'form_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        steps=pulumi.get(__ret__, 'steps'),
        type=pulumi.get(__ret__, 'type'))
def get_form_output(data: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                    form_id: Optional[pulumi.Input[Optional[str]]] = None,
                    name: Optional[pulumi.Input[Optional[str]]] = None,
                    steps: Optional[pulumi.Input[Optional[Sequence[Union['GetFormStepArgs', 'GetFormStepArgsDict']]]]] = None,
                    type: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFormResult]:
    """
    ## # Form Resource

    A FusionAuth Form is a customizable object that contains one-to-many ordered steps. Each step is comprised of one or more Form Fields.

    [Forms API](https://fusionauth.io/docs/v1/tech/apis/forms)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fusionauth as fusionauth

    default = fusionauth.get_form(name="Default User Self Service provided by FusionAuth")
    ```


    :param Mapping[str, str] data: An object that can hold any information about the Form that should be persisted.
    :param str form_id: The unique id of the Form. Either `form_id` or `name` must be specified.
    :param str name: The name of the Form. Either `form_id` or `name` must be specified.
    :param Sequence[Union['GetFormStepArgs', 'GetFormStepArgsDict']] steps: An ordered list of objects containing one or more Form Fields.
    :param str type: The form type. The possible values are:
           * `adminRegistration` - This form be used to customize the add and edit User Registration form in the FusionAuth UI.
           * `adminUser` - This form can be used to customize the add and edit User form in the FusionAuth UI.
    """
    __args__ = dict()
    __args__['data'] = data
    __args__['formId'] = form_id
    __args__['name'] = name
    __args__['steps'] = steps
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('fusionauth:index/getForm:getForm', __args__, opts=opts, typ=GetFormResult)
    return __ret__.apply(lambda __response__: GetFormResult(
        data=pulumi.get(__response__, 'data'),
        form_id=pulumi.get(__response__, 'form_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        steps=pulumi.get(__response__, 'steps'),
        type=pulumi.get(__response__, 'type')))
