// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace theogravity.Fusionauth
{
    /// <summary>
    /// ## # External JWT Identity Provider Resource
    /// 
    /// This is a special type of identity provider that is only used via the JWT Reconcile API. This identity provider defines the claims inside the incoming JWT and how they map to fields in the FusionAuth User object.
    /// 
    /// In order for this identity provider to use the JWT, it also needs the public key or HMAC secret that the JWT was signed with. FusionAuth will verify that the JWT is valid and has not expired. Once the JWT has been validated, FusionAuth will reconcile it to ensure that the User exists and is up-to-date.
    /// 
    /// [External JWT Identity Providers API](https://fusionauth.io/docs/v1/tech/apis/identity-providers/external-jwt/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Fusionauth = theogravity.Fusionauth;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var jwt = new Fusionauth.FusionAuthIdpExternalJwt("jwt", new()
    ///     {
    ///         ClaimMap = 
    ///         {
    ///             { "dept", "RegistrationData" },
    ///             { "first_name", "firstName" },
    ///             { "last_name", "lastName" },
    ///         },
    ///         Debug = false,
    ///         Enabled = true,
    ///         HeaderKeyParameter = "kid",
    ///         Oauth2AuthorizationEndpoint = "https://acme.com/adfs/oauth2/authorize?client_id=cf3b00da-9551-460a-ad18-33232e6cbff0&amp;response_type=code&amp;redirect_uri=https://acme.com/oauth2/redirect",
    ///         Oauth2TokenEndpoint = "https://acme.com/adfs/oauth2/token",
    ///         UniqueIdentityClaim = "email",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [FusionauthResourceType("fusionauth:index/fusionAuthIdpExternalJwt:FusionAuthIdpExternalJwt")]
    public partial class FusionAuthIdpExternalJwt : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        [Output("applicationConfigurations")]
        public Output<ImmutableArray<Outputs.FusionAuthIdpExternalJwtApplicationConfiguration>> ApplicationConfigurations { get; private set; } = null!;

        /// <summary>
        /// A map of incoming claims to User fields, User data or Registration data. The key of the map is the incoming claim name
        /// from the configured identity provider.
        /// </summary>
        [Output("claimMap")]
        public Output<ImmutableDictionary<string, object>?> ClaimMap { get; private set; } = null!;

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
        /// </summary>
        [Output("debug")]
        public Output<bool?> Debug { get; private set; } = null!;

        /// <summary>
        /// An array of domains that are managed by this Identity Provider.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<string>> Domains { get; private set; } = null!;

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The name header claim that identifies the public key used to verify the signature. In most cases this be kid or x5t.
        /// </summary>
        [Output("headerKeyParameter")]
        public Output<string> HeaderKeyParameter { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
        /// </summary>
        [Output("idpId")]
        public Output<string?> IdpId { get; private set; } = null!;

        /// <summary>
        /// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
        /// </summary>
        [Output("lambdaReconcileId")]
        public Output<string?> LambdaReconcileId { get; private set; } = null!;

        /// <summary>
        /// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
        /// </summary>
        [Output("linkingStrategy")]
        public Output<string> LinkingStrategy { get; private set; } = null!;

        /// <summary>
        /// The name of the Identity Provider.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The authorization endpoint for this Identity Provider. This value is not utilized by FusionAuth is only provided to be returned by the Lookup Identity Provider API response. During integration you may then utilize this value to perform the browser redirect to the OAuth2 authorize endpoint.
        /// </summary>
        [Output("oauth2AuthorizationEndpoint")]
        public Output<string?> Oauth2AuthorizationEndpoint { get; private set; } = null!;

        /// <summary>
        /// TThe token endpoint for this Identity Provider. This value is not utilized by FusionAuth is only provided to be returned by the Lookup Identity Provider API response. During integration you may then utilize this value to complete the OAuth2 grant workflow.
        /// </summary>
        [Output("oauth2TokenEndpoint")]
        public Output<string?> Oauth2TokenEndpoint { get; private set; } = null!;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        [Output("tenantConfigurations")]
        public Output<ImmutableArray<Outputs.FusionAuthIdpExternalJwtTenantConfiguration>> TenantConfigurations { get; private set; } = null!;

        /// <summary>
        /// The name of the claim that represents the unique identify of the User. This will generally be email or the name of the claim that provides the email address.
        /// </summary>
        [Output("uniqueIdentityClaim")]
        public Output<string> UniqueIdentityClaim { get; private set; } = null!;


        /// <summary>
        /// Create a FusionAuthIdpExternalJwt resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FusionAuthIdpExternalJwt(string name, FusionAuthIdpExternalJwtArgs args, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthIdpExternalJwt:FusionAuthIdpExternalJwt", name, args ?? new FusionAuthIdpExternalJwtArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FusionAuthIdpExternalJwt(string name, Input<string> id, FusionAuthIdpExternalJwtState? state = null, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthIdpExternalJwt:FusionAuthIdpExternalJwt", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/theogravity/pulumi-fusionauth/releases/download/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FusionAuthIdpExternalJwt resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FusionAuthIdpExternalJwt Get(string name, Input<string> id, FusionAuthIdpExternalJwtState? state = null, CustomResourceOptions? options = null)
        {
            return new FusionAuthIdpExternalJwt(name, id, state, options);
        }
    }

    public sealed class FusionAuthIdpExternalJwtArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationConfigurations")]
        private InputList<Inputs.FusionAuthIdpExternalJwtApplicationConfigurationArgs>? _applicationConfigurations;

        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpExternalJwtApplicationConfigurationArgs> ApplicationConfigurations
        {
            get => _applicationConfigurations ?? (_applicationConfigurations = new InputList<Inputs.FusionAuthIdpExternalJwtApplicationConfigurationArgs>());
            set => _applicationConfigurations = value;
        }

        [Input("claimMap")]
        private InputMap<object>? _claimMap;

        /// <summary>
        /// A map of incoming claims to User fields, User data or Registration data. The key of the map is the incoming claim name
        /// from the configured identity provider.
        /// </summary>
        public InputMap<object> ClaimMap
        {
            get => _claimMap ?? (_claimMap = new InputMap<object>());
            set => _claimMap = value;
        }

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
        /// </summary>
        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// An array of domains that are managed by this Identity Provider.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name header claim that identifies the public key used to verify the signature. In most cases this be kid or x5t.
        /// </summary>
        [Input("headerKeyParameter", required: true)]
        public Input<string> HeaderKeyParameter { get; set; } = null!;

        /// <summary>
        /// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
        /// </summary>
        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        /// <summary>
        /// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
        /// </summary>
        [Input("lambdaReconcileId")]
        public Input<string>? LambdaReconcileId { get; set; }

        /// <summary>
        /// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
        /// </summary>
        [Input("linkingStrategy")]
        public Input<string>? LinkingStrategy { get; set; }

        /// <summary>
        /// The name of the Identity Provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The authorization endpoint for this Identity Provider. This value is not utilized by FusionAuth is only provided to be returned by the Lookup Identity Provider API response. During integration you may then utilize this value to perform the browser redirect to the OAuth2 authorize endpoint.
        /// </summary>
        [Input("oauth2AuthorizationEndpoint")]
        public Input<string>? Oauth2AuthorizationEndpoint { get; set; }

        /// <summary>
        /// TThe token endpoint for this Identity Provider. This value is not utilized by FusionAuth is only provided to be returned by the Lookup Identity Provider API response. During integration you may then utilize this value to complete the OAuth2 grant workflow.
        /// </summary>
        [Input("oauth2TokenEndpoint")]
        public Input<string>? Oauth2TokenEndpoint { get; set; }

        [Input("tenantConfigurations")]
        private InputList<Inputs.FusionAuthIdpExternalJwtTenantConfigurationArgs>? _tenantConfigurations;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpExternalJwtTenantConfigurationArgs> TenantConfigurations
        {
            get => _tenantConfigurations ?? (_tenantConfigurations = new InputList<Inputs.FusionAuthIdpExternalJwtTenantConfigurationArgs>());
            set => _tenantConfigurations = value;
        }

        /// <summary>
        /// The name of the claim that represents the unique identify of the User. This will generally be email or the name of the claim that provides the email address.
        /// </summary>
        [Input("uniqueIdentityClaim", required: true)]
        public Input<string> UniqueIdentityClaim { get; set; } = null!;

        public FusionAuthIdpExternalJwtArgs()
        {
        }
        public static new FusionAuthIdpExternalJwtArgs Empty => new FusionAuthIdpExternalJwtArgs();
    }

    public sealed class FusionAuthIdpExternalJwtState : global::Pulumi.ResourceArgs
    {
        [Input("applicationConfigurations")]
        private InputList<Inputs.FusionAuthIdpExternalJwtApplicationConfigurationGetArgs>? _applicationConfigurations;

        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpExternalJwtApplicationConfigurationGetArgs> ApplicationConfigurations
        {
            get => _applicationConfigurations ?? (_applicationConfigurations = new InputList<Inputs.FusionAuthIdpExternalJwtApplicationConfigurationGetArgs>());
            set => _applicationConfigurations = value;
        }

        [Input("claimMap")]
        private InputMap<object>? _claimMap;

        /// <summary>
        /// A map of incoming claims to User fields, User data or Registration data. The key of the map is the incoming claim name
        /// from the configured identity provider.
        /// </summary>
        public InputMap<object> ClaimMap
        {
            get => _claimMap ?? (_claimMap = new InputMap<object>());
            set => _claimMap = value;
        }

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
        /// </summary>
        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// An array of domains that are managed by this Identity Provider.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name header claim that identifies the public key used to verify the signature. In most cases this be kid or x5t.
        /// </summary>
        [Input("headerKeyParameter")]
        public Input<string>? HeaderKeyParameter { get; set; }

        /// <summary>
        /// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
        /// </summary>
        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        /// <summary>
        /// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
        /// </summary>
        [Input("lambdaReconcileId")]
        public Input<string>? LambdaReconcileId { get; set; }

        /// <summary>
        /// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
        /// </summary>
        [Input("linkingStrategy")]
        public Input<string>? LinkingStrategy { get; set; }

        /// <summary>
        /// The name of the Identity Provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The authorization endpoint for this Identity Provider. This value is not utilized by FusionAuth is only provided to be returned by the Lookup Identity Provider API response. During integration you may then utilize this value to perform the browser redirect to the OAuth2 authorize endpoint.
        /// </summary>
        [Input("oauth2AuthorizationEndpoint")]
        public Input<string>? Oauth2AuthorizationEndpoint { get; set; }

        /// <summary>
        /// TThe token endpoint for this Identity Provider. This value is not utilized by FusionAuth is only provided to be returned by the Lookup Identity Provider API response. During integration you may then utilize this value to complete the OAuth2 grant workflow.
        /// </summary>
        [Input("oauth2TokenEndpoint")]
        public Input<string>? Oauth2TokenEndpoint { get; set; }

        [Input("tenantConfigurations")]
        private InputList<Inputs.FusionAuthIdpExternalJwtTenantConfigurationGetArgs>? _tenantConfigurations;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpExternalJwtTenantConfigurationGetArgs> TenantConfigurations
        {
            get => _tenantConfigurations ?? (_tenantConfigurations = new InputList<Inputs.FusionAuthIdpExternalJwtTenantConfigurationGetArgs>());
            set => _tenantConfigurations = value;
        }

        /// <summary>
        /// The name of the claim that represents the unique identify of the User. This will generally be email or the name of the claim that provides the email address.
        /// </summary>
        [Input("uniqueIdentityClaim")]
        public Input<string>? UniqueIdentityClaim { get; set; }

        public FusionAuthIdpExternalJwtState()
        {
        }
        public static new FusionAuthIdpExternalJwtState Empty => new FusionAuthIdpExternalJwtState();
    }
}
