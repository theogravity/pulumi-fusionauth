// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace theogravity.Fusionauth
{
    /// <summary>
    /// ## # OpenID Connect Identity Provider Resource
    /// 
    /// OpenID Connect identity providers connect to external OpenID Connect login systems. This type of login will optionally provide a Login with …​ button on FusionAuth’s login page. This button is customizable by using different properties of the identity provider.
    /// 
    /// Optionally, this identity provider can define one or more domains it is associated with. This is useful for allowing employees to log in with their corporate credentials. As long as the company has an identity solution that provides OpenID Connect, you can leverage this feature. This is referred to as a Domain Based Identity Provider. If you enable domains for an identity provider, the Login with …​ button will not be displayed. Instead, only the email form field will be displayed initially on the FusionAuth login page. Once the user types in their email address, FusionAuth will determine if the user is logging in locally or if they should be redirected to this identity provider. This is determined by extracting the domain from their email address and comparing it to the domains associated with the identity provider.
    /// 
    /// FusionAuth will also leverage the /userinfo API that is part of the OpenID Connect specification. The email address returned from the Userinfo response will be used to create or lookup the existing user. Additional claims from the Userinfo response can be used to reconcile the User in FusionAuth by using an OpenID Connect Reconcile Lambda. Unless you assign a reconcile lambda to this provider, on the email address will be used from the available claims returned by the OpenID Connect identity provider.
    /// 
    /// If the external OpenID Connect identity provider returns a refresh token, it will be stored in the UserRegistration object inside the tokens Map. This Map stores the tokens from the various identity providers so that you can use them in your application to call their APIs.
    /// 
    /// [OpenID Connect Identity Providers API](https://fusionauth.io/docs/v1/tech/apis/identity-providers/openid-connect)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fusionauth = theogravity.Fusionauth;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var openID = new Fusionauth.FusionAuthIdpOpenIdConnect("openID", new()
    ///     {
    ///         ApplicationConfigurations = new[]
    ///         {
    ///             new Fusionauth.Inputs.FusionAuthIdpOpenIdConnectApplicationConfigurationArgs
    ///             {
    ///                 ApplicationId = fusionauth_application.Myapp.Id,
    ///                 CreateRegistration = true,
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         Oauth2AuthorizationEndpoint = "https://acme.com/oauth2/authorization",
    ///         Oauth2ClientId = "191c23dc-b772-4558-bd21-dc1cbf74ae21",
    ///         Oauth2ClientSecret = "SUsnoP0pWUYfXvWbSe5pvj8Di5nAxOvO",
    ///         Oauth2ClientAuthenticationMethod = "client_secret_basic",
    ///         Oauth2Scope = "openid offline_access",
    ///         Oauth2TokenEndpoint = "https://acme.com/oauth2/token",
    ///         Oauth2UserInfoEndpoint = "https://acme.com/oauth2/userinfo",
    ///         ButtonText = "Login with OpenID Connect",
    ///         Debug = false,
    ///         Enabled = true,
    ///         TenantConfigurations = new[]
    ///         {
    ///             new Fusionauth.Inputs.FusionAuthIdpOpenIdConnectTenantConfigurationArgs
    ///             {
    ///                 TenantId = fusionauth_tenant.Example.Id,
    ///                 LimitUserLinkCountEnabled = false,
    ///                 LimitUserLinkCountMaximumLinks = 42,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [FusionauthResourceType("fusionauth:index/fusionAuthIdpOpenIdConnect:FusionAuthIdpOpenIdConnect")]
    public partial class FusionAuthIdpOpenIdConnect : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        [Output("applicationConfigurations")]
        public Output<ImmutableArray<Outputs.FusionAuthIdpOpenIdConnectApplicationConfiguration>> ApplicationConfigurations { get; private set; } = null!;

        /// <summary>
        /// The top-level button image (URL) to use on the FusionAuth login page for this Identity Provider.
        /// </summary>
        [Output("buttonImageUrl")]
        public Output<string?> ButtonImageUrl { get; private set; } = null!;

        /// <summary>
        /// The top-level button text to use on the FusionAuth login page for this Identity Provider.
        /// </summary>
        [Output("buttonText")]
        public Output<string> ButtonText { get; private set; } = null!;

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
        /// </summary>
        [Output("debug")]
        public Output<bool?> Debug { get; private set; } = null!;

        /// <summary>
        /// This is an optional list of domains that this OpenID Connect provider should be used for. This converts the FusionAuth login form to a domain-based login form. This type of form first asks the user for their email. FusionAuth then uses their email to determine if an OpenID Connect identity provider should be used. If an OpenID Connect provider should be used, the browser is redirected to the authorization endpoint of that identity provider. Otherwise, the password field is revealed on the form so that the user can login using FusionAuth.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<string>> Domains { get; private set; } = null!;

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
        /// </summary>
        [Output("idpId")]
        public Output<string?> IdpId { get; private set; } = null!;

        /// <summary>
        /// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
        /// </summary>
        [Output("lambdaReconcileId")]
        public Output<string?> LambdaReconcileId { get; private set; } = null!;

        /// <summary>
        /// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
        /// </summary>
        [Output("linkingStrategy")]
        public Output<string> LinkingStrategy { get; private set; } = null!;

        /// <summary>
        /// The name of this OpenID Connect identity provider. This is only used for display purposes.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The top-level authorization endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the authorization endpoint. If you provide an issuer then this field will be ignored.
        /// </summary>
        [Output("oauth2AuthorizationEndpoint")]
        public Output<string?> Oauth2AuthorizationEndpoint { get; private set; } = null!;

        /// <summary>
        /// The client authentication method to use with the OpenID Connect identity provider.
        /// </summary>
        [Output("oauth2ClientAuthenticationMethod")]
        public Output<string?> Oauth2ClientAuthenticationMethod { get; private set; } = null!;

        /// <summary>
        /// The top-level client id for your Application.
        /// </summary>
        [Output("oauth2ClientId")]
        public Output<string> Oauth2ClientId { get; private set; } = null!;

        /// <summary>
        /// The top-level client secret to use with the OpenID Connect identity provider.
        /// </summary>
        [Output("oauth2ClientSecret")]
        public Output<string?> Oauth2ClientSecret { get; private set; } = null!;

        /// <summary>
        /// An optional configuration to modify the expected name of the claim returned by the IdP that contains the email address.
        /// </summary>
        [Output("oauth2EmailClaim")]
        public Output<string?> Oauth2EmailClaim { get; private set; } = null!;

        /// <summary>
        /// The top-level issuer URI for the OpenID Connect identity provider. If this is provided, the authorization endpoint, token endpoint and userinfo endpoint will all be resolved using the issuer URI plus /.well-known/openid-configuration.
        /// </summary>
        [Output("oauth2Issuer")]
        public Output<string?> Oauth2Issuer { get; private set; } = null!;

        /// <summary>
        /// The top-level scope that you are requesting from the OpenID Connect identity provider.
        /// </summary>
        [Output("oauth2Scope")]
        public Output<string?> Oauth2Scope { get; private set; } = null!;

        /// <summary>
        /// The top-level token endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the token endpoint. If you provide an issuer then this field will be ignored.
        /// </summary>
        [Output("oauth2TokenEndpoint")]
        public Output<string?> Oauth2TokenEndpoint { get; private set; } = null!;

        /// <summary>
        /// An optional configuration to modify the expected name of the claim returned by the IdP that contains the user Id.
        /// </summary>
        [Output("oauth2UniqueIdClaim")]
        public Output<string?> Oauth2UniqueIdClaim { get; private set; } = null!;

        /// <summary>
        /// The top-level userinfo endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the userinfo endpoint. If you provide an issuer then this field will be ignored.
        /// </summary>
        [Output("oauth2UserInfoEndpoint")]
        public Output<string?> Oauth2UserInfoEndpoint { get; private set; } = null!;

        /// <summary>
        /// An optional configuration to modify the expected name of the claim returned by the IdP that contains the username.
        /// </summary>
        [Output("oauth2UsernameClaim")]
        public Output<string?> Oauth2UsernameClaim { get; private set; } = null!;

        /// <summary>
        /// Set this value equal to true if you wish to use POST bindings with this OpenID Connect identity provider. The default value of false means that a redirect binding which uses a GET request will be used.
        /// </summary>
        [Output("postRequest")]
        public Output<bool?> PostRequest { get; private set; } = null!;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        [Output("tenantConfigurations")]
        public Output<ImmutableArray<Outputs.FusionAuthIdpOpenIdConnectTenantConfiguration>> TenantConfigurations { get; private set; } = null!;


        /// <summary>
        /// Create a FusionAuthIdpOpenIdConnect resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FusionAuthIdpOpenIdConnect(string name, FusionAuthIdpOpenIdConnectArgs args, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthIdpOpenIdConnect:FusionAuthIdpOpenIdConnect", name, args ?? new FusionAuthIdpOpenIdConnectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FusionAuthIdpOpenIdConnect(string name, Input<string> id, FusionAuthIdpOpenIdConnectState? state = null, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthIdpOpenIdConnect:FusionAuthIdpOpenIdConnect", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/theogravity/pulumi-fusionauth/releases/download/v${VERSION}",
                AdditionalSecretOutputs =
                {
                    "oauth2ClientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FusionAuthIdpOpenIdConnect resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FusionAuthIdpOpenIdConnect Get(string name, Input<string> id, FusionAuthIdpOpenIdConnectState? state = null, CustomResourceOptions? options = null)
        {
            return new FusionAuthIdpOpenIdConnect(name, id, state, options);
        }
    }

    public sealed class FusionAuthIdpOpenIdConnectArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationConfigurations")]
        private InputList<Inputs.FusionAuthIdpOpenIdConnectApplicationConfigurationArgs>? _applicationConfigurations;

        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpOpenIdConnectApplicationConfigurationArgs> ApplicationConfigurations
        {
            get => _applicationConfigurations ?? (_applicationConfigurations = new InputList<Inputs.FusionAuthIdpOpenIdConnectApplicationConfigurationArgs>());
            set => _applicationConfigurations = value;
        }

        /// <summary>
        /// The top-level button image (URL) to use on the FusionAuth login page for this Identity Provider.
        /// </summary>
        [Input("buttonImageUrl")]
        public Input<string>? ButtonImageUrl { get; set; }

        /// <summary>
        /// The top-level button text to use on the FusionAuth login page for this Identity Provider.
        /// </summary>
        [Input("buttonText", required: true)]
        public Input<string> ButtonText { get; set; } = null!;

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
        /// </summary>
        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// This is an optional list of domains that this OpenID Connect provider should be used for. This converts the FusionAuth login form to a domain-based login form. This type of form first asks the user for their email. FusionAuth then uses their email to determine if an OpenID Connect identity provider should be used. If an OpenID Connect provider should be used, the browser is redirected to the authorization endpoint of that identity provider. Otherwise, the password field is revealed on the form so that the user can login using FusionAuth.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
        /// </summary>
        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        /// <summary>
        /// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
        /// </summary>
        [Input("lambdaReconcileId")]
        public Input<string>? LambdaReconcileId { get; set; }

        /// <summary>
        /// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
        /// </summary>
        [Input("linkingStrategy")]
        public Input<string>? LinkingStrategy { get; set; }

        /// <summary>
        /// The name of this OpenID Connect identity provider. This is only used for display purposes.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The top-level authorization endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the authorization endpoint. If you provide an issuer then this field will be ignored.
        /// </summary>
        [Input("oauth2AuthorizationEndpoint")]
        public Input<string>? Oauth2AuthorizationEndpoint { get; set; }

        /// <summary>
        /// The client authentication method to use with the OpenID Connect identity provider.
        /// </summary>
        [Input("oauth2ClientAuthenticationMethod")]
        public Input<string>? Oauth2ClientAuthenticationMethod { get; set; }

        /// <summary>
        /// The top-level client id for your Application.
        /// </summary>
        [Input("oauth2ClientId", required: true)]
        public Input<string> Oauth2ClientId { get; set; } = null!;

        [Input("oauth2ClientSecret")]
        private Input<string>? _oauth2ClientSecret;

        /// <summary>
        /// The top-level client secret to use with the OpenID Connect identity provider.
        /// </summary>
        public Input<string>? Oauth2ClientSecret
        {
            get => _oauth2ClientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauth2ClientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// An optional configuration to modify the expected name of the claim returned by the IdP that contains the email address.
        /// </summary>
        [Input("oauth2EmailClaim")]
        public Input<string>? Oauth2EmailClaim { get; set; }

        /// <summary>
        /// The top-level issuer URI for the OpenID Connect identity provider. If this is provided, the authorization endpoint, token endpoint and userinfo endpoint will all be resolved using the issuer URI plus /.well-known/openid-configuration.
        /// </summary>
        [Input("oauth2Issuer")]
        public Input<string>? Oauth2Issuer { get; set; }

        /// <summary>
        /// The top-level scope that you are requesting from the OpenID Connect identity provider.
        /// </summary>
        [Input("oauth2Scope")]
        public Input<string>? Oauth2Scope { get; set; }

        /// <summary>
        /// The top-level token endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the token endpoint. If you provide an issuer then this field will be ignored.
        /// </summary>
        [Input("oauth2TokenEndpoint")]
        public Input<string>? Oauth2TokenEndpoint { get; set; }

        /// <summary>
        /// An optional configuration to modify the expected name of the claim returned by the IdP that contains the user Id.
        /// </summary>
        [Input("oauth2UniqueIdClaim")]
        public Input<string>? Oauth2UniqueIdClaim { get; set; }

        /// <summary>
        /// The top-level userinfo endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the userinfo endpoint. If you provide an issuer then this field will be ignored.
        /// </summary>
        [Input("oauth2UserInfoEndpoint")]
        public Input<string>? Oauth2UserInfoEndpoint { get; set; }

        /// <summary>
        /// An optional configuration to modify the expected name of the claim returned by the IdP that contains the username.
        /// </summary>
        [Input("oauth2UsernameClaim")]
        public Input<string>? Oauth2UsernameClaim { get; set; }

        /// <summary>
        /// Set this value equal to true if you wish to use POST bindings with this OpenID Connect identity provider. The default value of false means that a redirect binding which uses a GET request will be used.
        /// </summary>
        [Input("postRequest")]
        public Input<bool>? PostRequest { get; set; }

        [Input("tenantConfigurations")]
        private InputList<Inputs.FusionAuthIdpOpenIdConnectTenantConfigurationArgs>? _tenantConfigurations;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpOpenIdConnectTenantConfigurationArgs> TenantConfigurations
        {
            get => _tenantConfigurations ?? (_tenantConfigurations = new InputList<Inputs.FusionAuthIdpOpenIdConnectTenantConfigurationArgs>());
            set => _tenantConfigurations = value;
        }

        public FusionAuthIdpOpenIdConnectArgs()
        {
        }
        public static new FusionAuthIdpOpenIdConnectArgs Empty => new FusionAuthIdpOpenIdConnectArgs();
    }

    public sealed class FusionAuthIdpOpenIdConnectState : global::Pulumi.ResourceArgs
    {
        [Input("applicationConfigurations")]
        private InputList<Inputs.FusionAuthIdpOpenIdConnectApplicationConfigurationGetArgs>? _applicationConfigurations;

        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpOpenIdConnectApplicationConfigurationGetArgs> ApplicationConfigurations
        {
            get => _applicationConfigurations ?? (_applicationConfigurations = new InputList<Inputs.FusionAuthIdpOpenIdConnectApplicationConfigurationGetArgs>());
            set => _applicationConfigurations = value;
        }

        /// <summary>
        /// The top-level button image (URL) to use on the FusionAuth login page for this Identity Provider.
        /// </summary>
        [Input("buttonImageUrl")]
        public Input<string>? ButtonImageUrl { get; set; }

        /// <summary>
        /// The top-level button text to use on the FusionAuth login page for this Identity Provider.
        /// </summary>
        [Input("buttonText")]
        public Input<string>? ButtonText { get; set; }

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
        /// </summary>
        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// This is an optional list of domains that this OpenID Connect provider should be used for. This converts the FusionAuth login form to a domain-based login form. This type of form first asks the user for their email. FusionAuth then uses their email to determine if an OpenID Connect identity provider should be used. If an OpenID Connect provider should be used, the browser is redirected to the authorization endpoint of that identity provider. Otherwise, the password field is revealed on the form so that the user can login using FusionAuth.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
        /// </summary>
        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        /// <summary>
        /// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
        /// </summary>
        [Input("lambdaReconcileId")]
        public Input<string>? LambdaReconcileId { get; set; }

        /// <summary>
        /// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
        /// </summary>
        [Input("linkingStrategy")]
        public Input<string>? LinkingStrategy { get; set; }

        /// <summary>
        /// The name of this OpenID Connect identity provider. This is only used for display purposes.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The top-level authorization endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the authorization endpoint. If you provide an issuer then this field will be ignored.
        /// </summary>
        [Input("oauth2AuthorizationEndpoint")]
        public Input<string>? Oauth2AuthorizationEndpoint { get; set; }

        /// <summary>
        /// The client authentication method to use with the OpenID Connect identity provider.
        /// </summary>
        [Input("oauth2ClientAuthenticationMethod")]
        public Input<string>? Oauth2ClientAuthenticationMethod { get; set; }

        /// <summary>
        /// The top-level client id for your Application.
        /// </summary>
        [Input("oauth2ClientId")]
        public Input<string>? Oauth2ClientId { get; set; }

        [Input("oauth2ClientSecret")]
        private Input<string>? _oauth2ClientSecret;

        /// <summary>
        /// The top-level client secret to use with the OpenID Connect identity provider.
        /// </summary>
        public Input<string>? Oauth2ClientSecret
        {
            get => _oauth2ClientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauth2ClientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// An optional configuration to modify the expected name of the claim returned by the IdP that contains the email address.
        /// </summary>
        [Input("oauth2EmailClaim")]
        public Input<string>? Oauth2EmailClaim { get; set; }

        /// <summary>
        /// The top-level issuer URI for the OpenID Connect identity provider. If this is provided, the authorization endpoint, token endpoint and userinfo endpoint will all be resolved using the issuer URI plus /.well-known/openid-configuration.
        /// </summary>
        [Input("oauth2Issuer")]
        public Input<string>? Oauth2Issuer { get; set; }

        /// <summary>
        /// The top-level scope that you are requesting from the OpenID Connect identity provider.
        /// </summary>
        [Input("oauth2Scope")]
        public Input<string>? Oauth2Scope { get; set; }

        /// <summary>
        /// The top-level token endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the token endpoint. If you provide an issuer then this field will be ignored.
        /// </summary>
        [Input("oauth2TokenEndpoint")]
        public Input<string>? Oauth2TokenEndpoint { get; set; }

        /// <summary>
        /// An optional configuration to modify the expected name of the claim returned by the IdP that contains the user Id.
        /// </summary>
        [Input("oauth2UniqueIdClaim")]
        public Input<string>? Oauth2UniqueIdClaim { get; set; }

        /// <summary>
        /// The top-level userinfo endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the userinfo endpoint. If you provide an issuer then this field will be ignored.
        /// </summary>
        [Input("oauth2UserInfoEndpoint")]
        public Input<string>? Oauth2UserInfoEndpoint { get; set; }

        /// <summary>
        /// An optional configuration to modify the expected name of the claim returned by the IdP that contains the username.
        /// </summary>
        [Input("oauth2UsernameClaim")]
        public Input<string>? Oauth2UsernameClaim { get; set; }

        /// <summary>
        /// Set this value equal to true if you wish to use POST bindings with this OpenID Connect identity provider. The default value of false means that a redirect binding which uses a GET request will be used.
        /// </summary>
        [Input("postRequest")]
        public Input<bool>? PostRequest { get; set; }

        [Input("tenantConfigurations")]
        private InputList<Inputs.FusionAuthIdpOpenIdConnectTenantConfigurationGetArgs>? _tenantConfigurations;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpOpenIdConnectTenantConfigurationGetArgs> TenantConfigurations
        {
            get => _tenantConfigurations ?? (_tenantConfigurations = new InputList<Inputs.FusionAuthIdpOpenIdConnectTenantConfigurationGetArgs>());
            set => _tenantConfigurations = value;
        }

        public FusionAuthIdpOpenIdConnectState()
        {
        }
        public static new FusionAuthIdpOpenIdConnectState Empty => new FusionAuthIdpOpenIdConnectState();
    }
}
