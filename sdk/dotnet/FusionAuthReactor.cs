// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace theogravity.Fusionauth
{
    /// <summary>
    /// ## # Reactor Resource
    /// 
    /// The Reactor is FusionAuthâ€™s license system. Reactor is used to activate features based upon your licensing tier.
    /// 
    /// [Reactor API](https://fusionauth.io/docs/v1/tech/apis/reactor)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Fusionauth = theogravity.Fusionauth;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var reactor = new Fusionauth.FusionAuthReactor("reactor", new()
    ///     {
    ///         License = "abc",
    ///         LicenseId = "xyz",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [FusionauthResourceType("fusionauth:index/fusionAuthReactor:FusionAuthReactor")]
    public partial class FusionAuthReactor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Base64 encoded license value. This value is necessary in an air gapped configuration where outbound network access is not available.
        /// </summary>
        [Output("license")]
        public Output<string?> License { get; private set; } = null!;

        /// <summary>
        /// The license Id to activate.
        /// </summary>
        [Output("licenseId")]
        public Output<string> LicenseId { get; private set; } = null!;


        /// <summary>
        /// Create a FusionAuthReactor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FusionAuthReactor(string name, FusionAuthReactorArgs args, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthReactor:FusionAuthReactor", name, args ?? new FusionAuthReactorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FusionAuthReactor(string name, Input<string> id, FusionAuthReactorState? state = null, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthReactor:FusionAuthReactor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/theogravity/pulumi-fusionauth/releases/download/v${VERSION}",
                AdditionalSecretOutputs =
                {
                    "license",
                    "licenseId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FusionAuthReactor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FusionAuthReactor Get(string name, Input<string> id, FusionAuthReactorState? state = null, CustomResourceOptions? options = null)
        {
            return new FusionAuthReactor(name, id, state, options);
        }
    }

    public sealed class FusionAuthReactorArgs : global::Pulumi.ResourceArgs
    {
        [Input("license")]
        private Input<string>? _license;

        /// <summary>
        /// The Base64 encoded license value. This value is necessary in an air gapped configuration where outbound network access is not available.
        /// </summary>
        public Input<string>? License
        {
            get => _license;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _license = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("licenseId", required: true)]
        private Input<string>? _licenseId;

        /// <summary>
        /// The license Id to activate.
        /// </summary>
        public Input<string>? LicenseId
        {
            get => _licenseId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _licenseId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public FusionAuthReactorArgs()
        {
        }
        public static new FusionAuthReactorArgs Empty => new FusionAuthReactorArgs();
    }

    public sealed class FusionAuthReactorState : global::Pulumi.ResourceArgs
    {
        [Input("license")]
        private Input<string>? _license;

        /// <summary>
        /// The Base64 encoded license value. This value is necessary in an air gapped configuration where outbound network access is not available.
        /// </summary>
        public Input<string>? License
        {
            get => _license;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _license = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("licenseId")]
        private Input<string>? _licenseId;

        /// <summary>
        /// The license Id to activate.
        /// </summary>
        public Input<string>? LicenseId
        {
            get => _licenseId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _licenseId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public FusionAuthReactorState()
        {
        }
        public static new FusionAuthReactorState Empty => new FusionAuthReactorState();
    }
}
