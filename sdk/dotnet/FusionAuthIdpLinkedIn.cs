// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace theogravity.Fusionauth
{
    /// <summary>
    /// ## # LinkedIn Identity Provider Resource
    /// 
    /// The LinkedIn identity provider type will use OAuth 2.0 to authenticate a user with LinkedIn. It will also provide a
    /// `Login with LinkedIn` button on FusionAuth’s login page that will direct a user to the LinkedIn login page.
    /// Additionally, after successful user authentication, this identity provider will call LinkedIn’s `/v2/me` and
    /// `/v2/emailAddress` APIs to load additional details about the user and store them in FusionAuth.
    /// 
    /// The email address returned by the LinkedIn `/v2/emailAddress` API will be used to create or look up the existing user.
    /// Additional claims returned by LinkedIn can be used to reconcile the User to FusionAuth by using a LinkedIn Reconcile
    /// lambda. Unless you assign a reconcile lambda to this provider, only the email address will be used from the available
    /// claims returned by LinkedIn.
    /// 
    /// FusionAuth will also store the LinkedIn `access_token` returned from the login endpoint in the `identityProviderLink`
    /// object. This object is accessible using the Link API.
    /// 
    /// The `identityProviderLink` object stores the token so that you can use it in your application to call LinkedIn APIs on
    /// behalf of the user if desired.
    /// 
    /// [LinkedIn Identity Providers API](https://fusionauth.io/docs/v1/tech/apis/identity-providers/linkedin)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Fusionauth = theogravity.Fusionauth;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var linkedin = new Fusionauth.FusionAuthIdpLinkedIn("linkedin", new()
    ///     {
    ///         ApplicationConfigurations = new[]
    ///         {
    ///             new Fusionauth.Inputs.FusionAuthIdpLinkedInApplicationConfigurationArgs
    ///             {
    ///                 ApplicationId = fusionauth_application.Myapp.Id,
    ///                 CreateRegistration = true,
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         ButtonText = "Login with LinkedIn",
    ///         Debug = false,
    ///         Enabled = true,
    ///         ClientId = "9876543210",
    ///         ClientSecret = "716a572f917640698cdb99e9d7e64115",
    ///         Scope = "r_emailaddress r_liteprofile",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [FusionauthResourceType("fusionauth:index/fusionAuthIdpLinkedIn:FusionAuthIdpLinkedIn")]
    public partial class FusionAuthIdpLinkedIn : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        [Output("applicationConfigurations")]
        public Output<ImmutableArray<Outputs.FusionAuthIdpLinkedInApplicationConfiguration>> ApplicationConfigurations { get; private set; } = null!;

        /// <summary>
        /// The top-level button text to use on the FusionAuth login page for this Identity Provider.
        /// </summary>
        [Output("buttonText")]
        public Output<string> ButtonText { get; private set; } = null!;

        /// <summary>
        /// The top-level LinkedIn client id for your Application. This value is retrieved from the LinkedIn developer website when you set up your LinkedIn app.
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// The top-level client secret to use with the LinkedIn Identity Provider when retrieving the long-lived token. This value is retrieved from the LinkedIn developer website when you set up your LinkedIn app.
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, an Event Log is created each time this provider is invoked to reconcile a login.
        /// </summary>
        [Output("debug")]
        public Output<bool?> Debug { get; private set; } = null!;

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
        /// </summary>
        [Output("lambdaReconcileId")]
        public Output<string> LambdaReconcileId { get; private set; } = null!;

        /// <summary>
        /// The linking strategy to use when creating the link between the Facebook Identity Provider and the user.
        /// The valid values are:
        /// </summary>
        [Output("linkingStrategy")]
        public Output<string> LinkingStrategy { get; private set; } = null!;

        /// <summary>
        /// The top-level scope that you are requesting from LinkedIn.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        [Output("tenantConfigurations")]
        public Output<ImmutableArray<Outputs.FusionAuthIdpLinkedInTenantConfiguration>> TenantConfigurations { get; private set; } = null!;


        /// <summary>
        /// Create a FusionAuthIdpLinkedIn resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FusionAuthIdpLinkedIn(string name, FusionAuthIdpLinkedInArgs args, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthIdpLinkedIn:FusionAuthIdpLinkedIn", name, args ?? new FusionAuthIdpLinkedInArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FusionAuthIdpLinkedIn(string name, Input<string> id, FusionAuthIdpLinkedInState? state = null, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthIdpLinkedIn:FusionAuthIdpLinkedIn", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/theogravity/pulumi-fusionauth/releases/download/v${VERSION}",
                AdditionalSecretOutputs =
                {
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FusionAuthIdpLinkedIn resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FusionAuthIdpLinkedIn Get(string name, Input<string> id, FusionAuthIdpLinkedInState? state = null, CustomResourceOptions? options = null)
        {
            return new FusionAuthIdpLinkedIn(name, id, state, options);
        }
    }

    public sealed class FusionAuthIdpLinkedInArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationConfigurations")]
        private InputList<Inputs.FusionAuthIdpLinkedInApplicationConfigurationArgs>? _applicationConfigurations;

        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpLinkedInApplicationConfigurationArgs> ApplicationConfigurations
        {
            get => _applicationConfigurations ?? (_applicationConfigurations = new InputList<Inputs.FusionAuthIdpLinkedInApplicationConfigurationArgs>());
            set => _applicationConfigurations = value;
        }

        /// <summary>
        /// The top-level button text to use on the FusionAuth login page for this Identity Provider.
        /// </summary>
        [Input("buttonText", required: true)]
        public Input<string> ButtonText { get; set; } = null!;

        /// <summary>
        /// The top-level LinkedIn client id for your Application. This value is retrieved from the LinkedIn developer website when you set up your LinkedIn app.
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("clientSecret", required: true)]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The top-level client secret to use with the LinkedIn Identity Provider when retrieving the long-lived token. This value is retrieved from the LinkedIn developer website when you set up your LinkedIn app.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, an Event Log is created each time this provider is invoked to reconcile a login.
        /// </summary>
        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
        /// </summary>
        [Input("lambdaReconcileId")]
        public Input<string>? LambdaReconcileId { get; set; }

        /// <summary>
        /// The linking strategy to use when creating the link between the Facebook Identity Provider and the user.
        /// The valid values are:
        /// </summary>
        [Input("linkingStrategy")]
        public Input<string>? LinkingStrategy { get; set; }

        /// <summary>
        /// The top-level scope that you are requesting from LinkedIn.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        [Input("tenantConfigurations")]
        private InputList<Inputs.FusionAuthIdpLinkedInTenantConfigurationArgs>? _tenantConfigurations;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpLinkedInTenantConfigurationArgs> TenantConfigurations
        {
            get => _tenantConfigurations ?? (_tenantConfigurations = new InputList<Inputs.FusionAuthIdpLinkedInTenantConfigurationArgs>());
            set => _tenantConfigurations = value;
        }

        public FusionAuthIdpLinkedInArgs()
        {
        }
        public static new FusionAuthIdpLinkedInArgs Empty => new FusionAuthIdpLinkedInArgs();
    }

    public sealed class FusionAuthIdpLinkedInState : global::Pulumi.ResourceArgs
    {
        [Input("applicationConfigurations")]
        private InputList<Inputs.FusionAuthIdpLinkedInApplicationConfigurationGetArgs>? _applicationConfigurations;

        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpLinkedInApplicationConfigurationGetArgs> ApplicationConfigurations
        {
            get => _applicationConfigurations ?? (_applicationConfigurations = new InputList<Inputs.FusionAuthIdpLinkedInApplicationConfigurationGetArgs>());
            set => _applicationConfigurations = value;
        }

        /// <summary>
        /// The top-level button text to use on the FusionAuth login page for this Identity Provider.
        /// </summary>
        [Input("buttonText")]
        public Input<string>? ButtonText { get; set; }

        /// <summary>
        /// The top-level LinkedIn client id for your Application. This value is retrieved from the LinkedIn developer website when you set up your LinkedIn app.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The top-level client secret to use with the LinkedIn Identity Provider when retrieving the long-lived token. This value is retrieved from the LinkedIn developer website when you set up your LinkedIn app.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, an Event Log is created each time this provider is invoked to reconcile a login.
        /// </summary>
        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
        /// </summary>
        [Input("lambdaReconcileId")]
        public Input<string>? LambdaReconcileId { get; set; }

        /// <summary>
        /// The linking strategy to use when creating the link between the Facebook Identity Provider and the user.
        /// The valid values are:
        /// </summary>
        [Input("linkingStrategy")]
        public Input<string>? LinkingStrategy { get; set; }

        /// <summary>
        /// The top-level scope that you are requesting from LinkedIn.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        [Input("tenantConfigurations")]
        private InputList<Inputs.FusionAuthIdpLinkedInTenantConfigurationGetArgs>? _tenantConfigurations;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpLinkedInTenantConfigurationGetArgs> TenantConfigurations
        {
            get => _tenantConfigurations ?? (_tenantConfigurations = new InputList<Inputs.FusionAuthIdpLinkedInTenantConfigurationGetArgs>());
            set => _tenantConfigurations = value;
        }

        public FusionAuthIdpLinkedInState()
        {
        }
        public static new FusionAuthIdpLinkedInState Empty => new FusionAuthIdpLinkedInState();
    }
}
