// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace theogravity.Fusionauth.Outputs
{

    [OutputType]
    public sealed class FusionAuthTenantEmailConfiguration
    {
        /// <summary>
        /// The additional SMTP headers to be added to each outgoing email. Each SMTP header consists of a name and a value.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? AdditionalHeaders;
        /// <summary>
        /// Determines if debug should be enabled to create an event log to assist in debugging SMTP errors.
        /// </summary>
        public readonly bool? Debug;
        /// <summary>
        /// The default email address that emails will be sent from when a from address is not provided on an individual email template. This is the address part email address (i.e. Jared Dunn &lt;jared@piedpiper.com&gt;).
        /// </summary>
        public readonly string? DefaultFromEmail;
        /// <summary>
        /// The default From Name used in sending emails when a from name is not provided on an individual email template. This is the display name part of the email address ( i.e. Jared Dunn &lt;jared@piedpiper.com&gt;).
        /// </summary>
        public readonly string? DefaultFromName;
        /// <summary>
        /// The Id of the Email Template that is used when a user is sent a forgot password email.
        /// </summary>
        public readonly string? EmailUpdateEmailTemplateId;
        /// <summary>
        /// The Id of the Email Template used to verify user emails.
        /// </summary>
        public readonly string? EmailVerifiedEmailTemplateId;
        /// <summary>
        /// The Id of the Email Template that is used when a user is sent a forgot password email.
        /// </summary>
        public readonly string? ForgotPasswordEmailTemplateId;
        /// <summary>
        /// The host name of the SMTP server that FusionAuth will use.
        /// </summary>
        public readonly string? Host;
        /// <summary>
        /// When set to true, this allows email to be verified as a result of completing a similar email based workflow such as change password. When seto false, the user must explicitly complete the email verification workflow even if the user has already completed a similar email workflow such as change password.
        /// </summary>
        public readonly bool? ImplicitEmailVerificationAllowed;
        /// <summary>
        /// The Id of the Email Template used to send emails to users when another user attempts to create an account with their login Id.
        /// </summary>
        public readonly string? LoginIdInUseOnCreateEmailTemplateId;
        /// <summary>
        /// The Id of the Email Template used to send emails to users when another user attempts to create an account with their login Id.
        /// </summary>
        public readonly string? LoginIdInUseOnUpdateEmailTemplateId;
        /// <summary>
        /// The Id of the Email Template used to send emails to users when they log in on a new device.
        /// </summary>
        public readonly string? LoginNewDeviceEmailTemplateId;
        /// <summary>
        /// The Id of the Email Template used to send emails to users when a suspicious login occurs.
        /// </summary>
        public readonly string? LoginSuspiciousEmailTemplateId;
        /// <summary>
        /// An optional password FusionAuth will use to authenticate with the SMTP server.
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// The Id of the Email Template used to send emails to users when they have completed a 'forgot password' workflow and their password habeen reset.
        /// </summary>
        public readonly string? PasswordResetSuccessEmailTemplateId;
        /// <summary>
        /// The Id of the Email Template used to send emails to users when they have completed a 'forgot password' workflow and their password has been rese
        /// </summary>
        public readonly string? PasswordUpdateEmailTemplateId;
        /// <summary>
        /// The Id of the Passwordless Email Template.
        /// </summary>
        public readonly string? PasswordlessEmailTemplateId;
        /// <summary>
        /// The port of the SMTP server that FusionAuth will use.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// Additional Email Configuration in a properties file formatted String.
        /// </summary>
        public readonly string? Properties;
        /// <summary>
        /// The type of security protocol FusionAuth will use when connecting to the SMTP server.
        /// </summary>
        public readonly string? Security;
        /// <summary>
        /// The Id of the Email Template that is used when a user had their account created for them and they must set their password manually and they are sent an email to set their password.
        /// </summary>
        public readonly string? SetPasswordEmailTemplateId;
        /// <summary>
        /// The Id of the Email Template used to send emails to users when a MFA method has been added to their account.
        /// </summary>
        public readonly string? TwoFactorMethodAddEmailTemplateId;
        /// <summary>
        /// The Id of the Email Template used to send emails to users when a MFA method has been removed from their account.
        /// </summary>
        public readonly string? TwoFactorMethodRemoveEmailTemplateId;
        public readonly Outputs.FusionAuthTenantEmailConfigurationUnverified? Unverified;
        /// <summary>
        /// An optional username FusionAuth will to authenticate with the SMTP server.
        /// </summary>
        public readonly string? Username;
        /// <summary>
        /// The Id of the Email Template that is used to send the verification emails to users. These emails are used to verify that a user’s email address ivalid. If either the verifyEmail or verifyEmailWhenChanged fields are true this field is required.
        /// </summary>
        public readonly string? VerificationEmailTemplateId;
        /// <summary>
        /// The process by which the user will verify their email address. Possible values are `ClickableLink` or `FormField`.
        /// </summary>
        public readonly string? VerificationStrategy;
        /// <summary>
        /// Whether the user’s email addresses are verified when the registers with your application.
        /// </summary>
        public readonly bool? VerifyEmail;
        /// <summary>
        /// Whether the user’s email addresses are verified when the user changes them.
        /// </summary>
        public readonly bool? VerifyEmailWhenChanged;

        [OutputConstructor]
        private FusionAuthTenantEmailConfiguration(
            ImmutableDictionary<string, string>? additionalHeaders,

            bool? debug,

            string? defaultFromEmail,

            string? defaultFromName,

            string? emailUpdateEmailTemplateId,

            string? emailVerifiedEmailTemplateId,

            string? forgotPasswordEmailTemplateId,

            string? host,

            bool? implicitEmailVerificationAllowed,

            string? loginIdInUseOnCreateEmailTemplateId,

            string? loginIdInUseOnUpdateEmailTemplateId,

            string? loginNewDeviceEmailTemplateId,

            string? loginSuspiciousEmailTemplateId,

            string? password,

            string? passwordResetSuccessEmailTemplateId,

            string? passwordUpdateEmailTemplateId,

            string? passwordlessEmailTemplateId,

            int? port,

            string? properties,

            string? security,

            string? setPasswordEmailTemplateId,

            string? twoFactorMethodAddEmailTemplateId,

            string? twoFactorMethodRemoveEmailTemplateId,

            Outputs.FusionAuthTenantEmailConfigurationUnverified? unverified,

            string? username,

            string? verificationEmailTemplateId,

            string? verificationStrategy,

            bool? verifyEmail,

            bool? verifyEmailWhenChanged)
        {
            AdditionalHeaders = additionalHeaders;
            Debug = debug;
            DefaultFromEmail = defaultFromEmail;
            DefaultFromName = defaultFromName;
            EmailUpdateEmailTemplateId = emailUpdateEmailTemplateId;
            EmailVerifiedEmailTemplateId = emailVerifiedEmailTemplateId;
            ForgotPasswordEmailTemplateId = forgotPasswordEmailTemplateId;
            Host = host;
            ImplicitEmailVerificationAllowed = implicitEmailVerificationAllowed;
            LoginIdInUseOnCreateEmailTemplateId = loginIdInUseOnCreateEmailTemplateId;
            LoginIdInUseOnUpdateEmailTemplateId = loginIdInUseOnUpdateEmailTemplateId;
            LoginNewDeviceEmailTemplateId = loginNewDeviceEmailTemplateId;
            LoginSuspiciousEmailTemplateId = loginSuspiciousEmailTemplateId;
            Password = password;
            PasswordResetSuccessEmailTemplateId = passwordResetSuccessEmailTemplateId;
            PasswordUpdateEmailTemplateId = passwordUpdateEmailTemplateId;
            PasswordlessEmailTemplateId = passwordlessEmailTemplateId;
            Port = port;
            Properties = properties;
            Security = security;
            SetPasswordEmailTemplateId = setPasswordEmailTemplateId;
            TwoFactorMethodAddEmailTemplateId = twoFactorMethodAddEmailTemplateId;
            TwoFactorMethodRemoveEmailTemplateId = twoFactorMethodRemoveEmailTemplateId;
            Unverified = unverified;
            Username = username;
            VerificationEmailTemplateId = verificationEmailTemplateId;
            VerificationStrategy = verificationStrategy;
            VerifyEmail = verifyEmail;
            VerifyEmailWhenChanged = verifyEmailWhenChanged;
        }
    }
}
