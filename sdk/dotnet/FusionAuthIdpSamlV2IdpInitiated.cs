// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace theogravity.Fusionauth
{
    [FusionauthResourceType("fusionauth:index/fusionAuthIdpSamlV2IdpInitiated:FusionAuthIdpSamlV2IdpInitiated")]
    public partial class FusionAuthIdpSamlV2IdpInitiated : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        [Output("applicationConfigurations")]
        public Output<ImmutableArray<Outputs.FusionAuthIdpSamlV2IdpInitiatedApplicationConfiguration>> ApplicationConfigurations { get; private set; } = null!;

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login
        /// an Event Log will be created.
        /// </summary>
        [Output("debug")]
        public Output<bool?> Debug { get; private set; } = null!;

        /// <summary>
        /// The name of the email claim (Attribute in the Assertion element) in the SAML response that FusionAuth uses to uniquely
        /// identity the user. If this is not set, the `use_name_for_email` flag must be true.
        /// </summary>
        [Output("emailClaim")]
        public Output<string?> EmailClaim { get; private set; } = null!;

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
        /// </summary>
        [Output("idpId")]
        public Output<string?> IdpId { get; private set; } = null!;

        /// <summary>
        /// The EntityId (unique identifier) of the SAML v2 identity provider. This value should be provided to you. Prior to 1.27.1
        /// this value was required to be a URL.
        /// </summary>
        [Output("issuer")]
        public Output<string> Issuer { get; private set; } = null!;

        /// <summary>
        /// The id of the key stored in Key Master that is used to verify the SAML response sent back to FusionAuth from the
        /// identity provider. This key must be a verification only key or certificate (meaning that it only has a public key
        /// component).
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// The id of a SAML reconcile lambda that is applied when the identity provider sends back a successful SAML response.
        /// </summary>
        [Output("lambdaReconcileId")]
        public Output<string?> LambdaReconcileId { get; private set; } = null!;

        /// <summary>
        /// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
        /// </summary>
        [Output("linkingStrategy")]
        public Output<string> LinkingStrategy { get; private set; } = null!;

        /// <summary>
        /// The name of this SAML v2 identity provider. This is only used for display purposes.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        [Output("tenantConfigurations")]
        public Output<ImmutableArray<Outputs.FusionAuthIdpSamlV2IdpInitiatedTenantConfiguration>> TenantConfigurations { get; private set; } = null!;

        /// <summary>
        /// Whether or not FusionAuth will use the NameID element value as the email address of the user for reconciliation
        /// processing. If this is false, then the `email_claim` property must be set.
        /// </summary>
        [Output("useNameForEmail")]
        public Output<bool?> UseNameForEmail { get; private set; } = null!;


        /// <summary>
        /// Create a FusionAuthIdpSamlV2IdpInitiated resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FusionAuthIdpSamlV2IdpInitiated(string name, FusionAuthIdpSamlV2IdpInitiatedArgs args, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthIdpSamlV2IdpInitiated:FusionAuthIdpSamlV2IdpInitiated", name, args ?? new FusionAuthIdpSamlV2IdpInitiatedArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FusionAuthIdpSamlV2IdpInitiated(string name, Input<string> id, FusionAuthIdpSamlV2IdpInitiatedState? state = null, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthIdpSamlV2IdpInitiated:FusionAuthIdpSamlV2IdpInitiated", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/theogravity/pulumi-fusionauth/releases/download/${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FusionAuthIdpSamlV2IdpInitiated resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FusionAuthIdpSamlV2IdpInitiated Get(string name, Input<string> id, FusionAuthIdpSamlV2IdpInitiatedState? state = null, CustomResourceOptions? options = null)
        {
            return new FusionAuthIdpSamlV2IdpInitiated(name, id, state, options);
        }
    }

    public sealed class FusionAuthIdpSamlV2IdpInitiatedArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationConfigurations")]
        private InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedApplicationConfigurationArgs>? _applicationConfigurations;

        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedApplicationConfigurationArgs> ApplicationConfigurations
        {
            get => _applicationConfigurations ?? (_applicationConfigurations = new InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedApplicationConfigurationArgs>());
            set => _applicationConfigurations = value;
        }

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login
        /// an Event Log will be created.
        /// </summary>
        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        /// <summary>
        /// The name of the email claim (Attribute in the Assertion element) in the SAML response that FusionAuth uses to uniquely
        /// identity the user. If this is not set, the `use_name_for_email` flag must be true.
        /// </summary>
        [Input("emailClaim")]
        public Input<string>? EmailClaim { get; set; }

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
        /// </summary>
        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        /// <summary>
        /// The EntityId (unique identifier) of the SAML v2 identity provider. This value should be provided to you. Prior to 1.27.1
        /// this value was required to be a URL.
        /// </summary>
        [Input("issuer", required: true)]
        public Input<string> Issuer { get; set; } = null!;

        /// <summary>
        /// The id of the key stored in Key Master that is used to verify the SAML response sent back to FusionAuth from the
        /// identity provider. This key must be a verification only key or certificate (meaning that it only has a public key
        /// component).
        /// </summary>
        [Input("keyId", required: true)]
        public Input<string> KeyId { get; set; } = null!;

        /// <summary>
        /// The id of a SAML reconcile lambda that is applied when the identity provider sends back a successful SAML response.
        /// </summary>
        [Input("lambdaReconcileId")]
        public Input<string>? LambdaReconcileId { get; set; }

        /// <summary>
        /// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
        /// </summary>
        [Input("linkingStrategy")]
        public Input<string>? LinkingStrategy { get; set; }

        /// <summary>
        /// The name of this SAML v2 identity provider. This is only used for display purposes.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tenantConfigurations")]
        private InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedTenantConfigurationArgs>? _tenantConfigurations;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedTenantConfigurationArgs> TenantConfigurations
        {
            get => _tenantConfigurations ?? (_tenantConfigurations = new InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedTenantConfigurationArgs>());
            set => _tenantConfigurations = value;
        }

        /// <summary>
        /// Whether or not FusionAuth will use the NameID element value as the email address of the user for reconciliation
        /// processing. If this is false, then the `email_claim` property must be set.
        /// </summary>
        [Input("useNameForEmail")]
        public Input<bool>? UseNameForEmail { get; set; }

        public FusionAuthIdpSamlV2IdpInitiatedArgs()
        {
        }
        public static new FusionAuthIdpSamlV2IdpInitiatedArgs Empty => new FusionAuthIdpSamlV2IdpInitiatedArgs();
    }

    public sealed class FusionAuthIdpSamlV2IdpInitiatedState : global::Pulumi.ResourceArgs
    {
        [Input("applicationConfigurations")]
        private InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedApplicationConfigurationGetArgs>? _applicationConfigurations;

        /// <summary>
        /// The configuration for each Application that the identity provider is enabled for.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedApplicationConfigurationGetArgs> ApplicationConfigurations
        {
            get => _applicationConfigurations ?? (_applicationConfigurations = new InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedApplicationConfigurationGetArgs>());
            set => _applicationConfigurations = value;
        }

        /// <summary>
        /// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login
        /// an Event Log will be created.
        /// </summary>
        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        /// <summary>
        /// The name of the email claim (Attribute in the Assertion element) in the SAML response that FusionAuth uses to uniquely
        /// identity the user. If this is not set, the `use_name_for_email` flag must be true.
        /// </summary>
        [Input("emailClaim")]
        public Input<string>? EmailClaim { get; set; }

        /// <summary>
        /// Determines if this provider is enabled. If it is false then it will be disabled globally.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
        /// </summary>
        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        /// <summary>
        /// The EntityId (unique identifier) of the SAML v2 identity provider. This value should be provided to you. Prior to 1.27.1
        /// this value was required to be a URL.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// The id of the key stored in Key Master that is used to verify the SAML response sent back to FusionAuth from the
        /// identity provider. This key must be a verification only key or certificate (meaning that it only has a public key
        /// component).
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// The id of a SAML reconcile lambda that is applied when the identity provider sends back a successful SAML response.
        /// </summary>
        [Input("lambdaReconcileId")]
        public Input<string>? LambdaReconcileId { get; set; }

        /// <summary>
        /// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
        /// </summary>
        [Input("linkingStrategy")]
        public Input<string>? LinkingStrategy { get; set; }

        /// <summary>
        /// The name of this SAML v2 identity provider. This is only used for display purposes.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tenantConfigurations")]
        private InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedTenantConfigurationGetArgs>? _tenantConfigurations;

        /// <summary>
        /// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
        /// </summary>
        public InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedTenantConfigurationGetArgs> TenantConfigurations
        {
            get => _tenantConfigurations ?? (_tenantConfigurations = new InputList<Inputs.FusionAuthIdpSamlV2IdpInitiatedTenantConfigurationGetArgs>());
            set => _tenantConfigurations = value;
        }

        /// <summary>
        /// Whether or not FusionAuth will use the NameID element value as the email address of the user for reconciliation
        /// processing. If this is false, then the `email_claim` property must be set.
        /// </summary>
        [Input("useNameForEmail")]
        public Input<bool>? UseNameForEmail { get; set; }

        public FusionAuthIdpSamlV2IdpInitiatedState()
        {
        }
        public static new FusionAuthIdpSamlV2IdpInitiatedState Empty => new FusionAuthIdpSamlV2IdpInitiatedState();
    }
}
