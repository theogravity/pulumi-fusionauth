// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace theogravity.Fusionauth
{
    /// <summary>
    /// ## # User Resource
    /// 
    /// [Users API](https://fusionauth.io/docs/v1/tech/apis/users)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Fusionauth = theogravity.Fusionauth;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Fusionauth.FusionAuthUser("example", new()
    ///     {
    ///         UserId = "4c4511df-0d0d-4029-8c2b-f6c01b9e138d",
    ///         BirthDate = "1976-05-30",
    ///         Data = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["displayName"] = "Johnny Boy",
    ///             ["favoriteColors"] = new[]
    ///             {
    ///                 "Red",
    ///                 "Blue",
    ///             },
    ///         }),
    ///         Email = "example@fusionauth.io",
    ///         EncryptionScheme = "salted-sha256",
    ///         Expiry = 1571786483322,
    ///         FirstName = "John",
    ///         FullName = "John Doe",
    ///         ImageUrl = "http://65.media.tumblr.com/tumblr_l7dbl0MHbU1qz50x3o1_500.png",
    ///         LastName = "Doe",
    ///         MiddleName = "William",
    ///         MobilePhone = "303-555-1234",
    ///         PasswordChangeRequired = false,
    ///         PreferredLanguages = new[]
    ///         {
    ///             "en",
    ///             "fr",
    ///         },
    ///         Timezone = "America/Denver",
    ///         UsernameStatus = "ACTIVE",
    ///         Username = "johnny123",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [FusionauthResourceType("fusionauth:index/fusionAuthUser:FusionAuthUser")]
    public partial class FusionAuthUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An optional Application Id. When this value is provided, it will be used to resolve an application specific email template if you have configured transactional emails such as setup password, email verification and others.
        /// </summary>
        [Output("applicationId")]
        public Output<string?> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// An ISO-8601 formatted date of the User’s birthdate such as YYYY-MM-DD.
        /// </summary>
        [Output("birthDate")]
        public Output<string?> BirthDate { get; private set; } = null!;

        /// <summary>
        /// An object that can hold any information about a User that should be persisted. Must be a JSON serialised string.
        /// </summary>
        [Output("data")]
        public Output<string?> Data { get; private set; } = null!;

        /// <summary>
        /// An optional Application Id. When this value is provided, it will be used to resolve an application specific email template if you have configured transactional emails such as setup password, email verification and others.
        /// </summary>
        [Output("disableDomainBlock")]
        public Output<bool?> DisableDomainBlock { get; private set; } = null!;

        /// <summary>
        /// The value of the email address for this method.
        /// </summary>
        [Output("email")]
        public Output<string?> Email { get; private set; } = null!;

        /// <summary>
        /// The method for encrypting the User’s password.
        /// </summary>
        [Output("encryptionScheme")]
        public Output<string?> EncryptionScheme { get; private set; } = null!;

        /// <summary>
        /// The expiration instant of the User’s account. An expired user is not permitted to login.
        /// </summary>
        [Output("expiry")]
        public Output<int?> Expiry { get; private set; } = null!;

        /// <summary>
        /// The first name of the User.
        /// </summary>
        [Output("firstName")]
        public Output<string?> FirstName { get; private set; } = null!;

        /// <summary>
        /// The User’s full name as a separate field that is not calculated from firstName and lastName.
        /// </summary>
        [Output("fullName")]
        public Output<string?> FullName { get; private set; } = null!;

        /// <summary>
        /// The URL that points to an image file that is the User’s profile image.
        /// </summary>
        [Output("imageUrl")]
        public Output<string?> ImageUrl { get; private set; } = null!;

        /// <summary>
        /// The User’s last name.
        /// </summary>
        [Output("lastName")]
        public Output<string?> LastName { get; private set; } = null!;

        /// <summary>
        /// The User’s middle name.
        /// </summary>
        [Output("middleName")]
        public Output<string?> MiddleName { get; private set; } = null!;

        /// <summary>
        /// The value of the mobile phone for this method.
        /// </summary>
        [Output("mobilePhone")]
        public Output<string?> MobilePhone { get; private set; } = null!;

        /// <summary>
        /// The email address of the user’s parent or guardian. This field is used to allow a child user to identify their parent so FusionAuth can make a request to the parent to confirm the parent relationship.
        /// </summary>
        [Output("parentEmail")]
        public Output<string?> ParentEmail { get; private set; } = null!;

        /// <summary>
        /// The User’s plain texts password. This password will be hashed and the provided value will never be stored and cannot be retrieved.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Indicates that the User’s password needs to be changed during their next login attempt.
        /// </summary>
        [Output("passwordChangeRequired")]
        public Output<bool?> PasswordChangeRequired { get; private set; } = null!;

        /// <summary>
        /// An array of locale strings that give, in order, the User’s preferred languages. These are important for email templates and other localizable text.
        /// </summary>
        [Output("preferredLanguages")]
        public Output<ImmutableArray<string>> PreferredLanguages { get; private set; } = null!;

        /// <summary>
        /// Indicates to FusionAuth to send the User an email asking them to set their password. The Email Template that is used is configured in the System Configuration setting for Set Password Email Template.
        /// </summary>
        [Output("sendSetPasswordEmail")]
        public Output<bool?> SendSetPasswordEmail { get; private set; } = null!;

        /// <summary>
        /// Indicates to FusionAuth that it should skip email verification even if it is enabled. This is useful for creating admin or internal User accounts.
        /// </summary>
        [Output("skipVerification")]
        public Output<bool?> SkipVerification { get; private set; } = null!;

        /// <summary>
        /// The unique Id of the tenant used to scope this API request.
        /// </summary>
        [Output("tenantId")]
        public Output<string?> TenantId { get; private set; } = null!;

        /// <summary>
        /// The User’s preferred timezone. The string must be in an IANA time zone format.
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        [Output("twoFactorMethods")]
        public Output<ImmutableArray<Outputs.FusionAuthUserTwoFactorMethod>> TwoFactorMethods { get; private set; } = null!;

        /// <summary>
        /// A list of recovery codes. These may be used in place of a code provided by an MFA factor. They are single use. If a recovery code is used in a disable request, all MFA methods are removed. If, after that, a Multi-Factor method is added, a new set of recovery codes will be generated.
        /// </summary>
        [Output("twoFactorRecoveryCodes")]
        public Output<ImmutableArray<string>> TwoFactorRecoveryCodes { get; private set; } = null!;

        /// <summary>
        /// The Id to use for the new User. If not specified a secure random UUID will be generated..
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;

        /// <summary>
        /// The username of the User. The username is stored and returned as a case sensitive value, however a username is considered unique regardless of the case. bob is considered equal to BoB so either version of this username can be used whenever providing it as input to an API.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;

        /// <summary>
        /// The current status of the username. This is used if you are moderating usernames via CleanSpeak.
        /// </summary>
        [Output("usernameStatus")]
        public Output<string?> UsernameStatus { get; private set; } = null!;


        /// <summary>
        /// Create a FusionAuthUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FusionAuthUser(string name, FusionAuthUserArgs? args = null, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthUser:FusionAuthUser", name, args ?? new FusionAuthUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FusionAuthUser(string name, Input<string> id, FusionAuthUserState? state = null, CustomResourceOptions? options = null)
            : base("fusionauth:index/fusionAuthUser:FusionAuthUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/theogravity/pulumi-fusionauth/releases/download/v${VERSION}",
                AdditionalSecretOutputs =
                {
                    "password",
                    "twoFactorRecoveryCodes",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FusionAuthUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FusionAuthUser Get(string name, Input<string> id, FusionAuthUserState? state = null, CustomResourceOptions? options = null)
        {
            return new FusionAuthUser(name, id, state, options);
        }
    }

    public sealed class FusionAuthUserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional Application Id. When this value is provided, it will be used to resolve an application specific email template if you have configured transactional emails such as setup password, email verification and others.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// An ISO-8601 formatted date of the User’s birthdate such as YYYY-MM-DD.
        /// </summary>
        [Input("birthDate")]
        public Input<string>? BirthDate { get; set; }

        /// <summary>
        /// An object that can hold any information about a User that should be persisted. Must be a JSON serialised string.
        /// </summary>
        [Input("data")]
        public Input<string>? Data { get; set; }

        /// <summary>
        /// An optional Application Id. When this value is provided, it will be used to resolve an application specific email template if you have configured transactional emails such as setup password, email verification and others.
        /// </summary>
        [Input("disableDomainBlock")]
        public Input<bool>? DisableDomainBlock { get; set; }

        /// <summary>
        /// The value of the email address for this method.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// The method for encrypting the User’s password.
        /// </summary>
        [Input("encryptionScheme")]
        public Input<string>? EncryptionScheme { get; set; }

        /// <summary>
        /// The expiration instant of the User’s account. An expired user is not permitted to login.
        /// </summary>
        [Input("expiry")]
        public Input<int>? Expiry { get; set; }

        /// <summary>
        /// The first name of the User.
        /// </summary>
        [Input("firstName")]
        public Input<string>? FirstName { get; set; }

        /// <summary>
        /// The User’s full name as a separate field that is not calculated from firstName and lastName.
        /// </summary>
        [Input("fullName")]
        public Input<string>? FullName { get; set; }

        /// <summary>
        /// The URL that points to an image file that is the User’s profile image.
        /// </summary>
        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        /// <summary>
        /// The User’s last name.
        /// </summary>
        [Input("lastName")]
        public Input<string>? LastName { get; set; }

        /// <summary>
        /// The User’s middle name.
        /// </summary>
        [Input("middleName")]
        public Input<string>? MiddleName { get; set; }

        /// <summary>
        /// The value of the mobile phone for this method.
        /// </summary>
        [Input("mobilePhone")]
        public Input<string>? MobilePhone { get; set; }

        /// <summary>
        /// The email address of the user’s parent or guardian. This field is used to allow a child user to identify their parent so FusionAuth can make a request to the parent to confirm the parent relationship.
        /// </summary>
        [Input("parentEmail")]
        public Input<string>? ParentEmail { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The User’s plain texts password. This password will be hashed and the provided value will never be stored and cannot be retrieved.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Indicates that the User’s password needs to be changed during their next login attempt.
        /// </summary>
        [Input("passwordChangeRequired")]
        public Input<bool>? PasswordChangeRequired { get; set; }

        [Input("preferredLanguages")]
        private InputList<string>? _preferredLanguages;

        /// <summary>
        /// An array of locale strings that give, in order, the User’s preferred languages. These are important for email templates and other localizable text.
        /// </summary>
        public InputList<string> PreferredLanguages
        {
            get => _preferredLanguages ?? (_preferredLanguages = new InputList<string>());
            set => _preferredLanguages = value;
        }

        /// <summary>
        /// Indicates to FusionAuth to send the User an email asking them to set their password. The Email Template that is used is configured in the System Configuration setting for Set Password Email Template.
        /// </summary>
        [Input("sendSetPasswordEmail")]
        public Input<bool>? SendSetPasswordEmail { get; set; }

        /// <summary>
        /// Indicates to FusionAuth that it should skip email verification even if it is enabled. This is useful for creating admin or internal User accounts.
        /// </summary>
        [Input("skipVerification")]
        public Input<bool>? SkipVerification { get; set; }

        /// <summary>
        /// The unique Id of the tenant used to scope this API request.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The User’s preferred timezone. The string must be in an IANA time zone format.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("twoFactorMethods")]
        private InputList<Inputs.FusionAuthUserTwoFactorMethodArgs>? _twoFactorMethods;
        public InputList<Inputs.FusionAuthUserTwoFactorMethodArgs> TwoFactorMethods
        {
            get => _twoFactorMethods ?? (_twoFactorMethods = new InputList<Inputs.FusionAuthUserTwoFactorMethodArgs>());
            set => _twoFactorMethods = value;
        }

        [Input("twoFactorRecoveryCodes")]
        private InputList<string>? _twoFactorRecoveryCodes;

        /// <summary>
        /// A list of recovery codes. These may be used in place of a code provided by an MFA factor. They are single use. If a recovery code is used in a disable request, all MFA methods are removed. If, after that, a Multi-Factor method is added, a new set of recovery codes will be generated.
        /// </summary>
        public InputList<string> TwoFactorRecoveryCodes
        {
            get => _twoFactorRecoveryCodes ?? (_twoFactorRecoveryCodes = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _twoFactorRecoveryCodes = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The Id to use for the new User. If not specified a secure random UUID will be generated..
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// The username of the User. The username is stored and returned as a case sensitive value, however a username is considered unique regardless of the case. bob is considered equal to BoB so either version of this username can be used whenever providing it as input to an API.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// The current status of the username. This is used if you are moderating usernames via CleanSpeak.
        /// </summary>
        [Input("usernameStatus")]
        public Input<string>? UsernameStatus { get; set; }

        public FusionAuthUserArgs()
        {
        }
        public static new FusionAuthUserArgs Empty => new FusionAuthUserArgs();
    }

    public sealed class FusionAuthUserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional Application Id. When this value is provided, it will be used to resolve an application specific email template if you have configured transactional emails such as setup password, email verification and others.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// An ISO-8601 formatted date of the User’s birthdate such as YYYY-MM-DD.
        /// </summary>
        [Input("birthDate")]
        public Input<string>? BirthDate { get; set; }

        /// <summary>
        /// An object that can hold any information about a User that should be persisted. Must be a JSON serialised string.
        /// </summary>
        [Input("data")]
        public Input<string>? Data { get; set; }

        /// <summary>
        /// An optional Application Id. When this value is provided, it will be used to resolve an application specific email template if you have configured transactional emails such as setup password, email verification and others.
        /// </summary>
        [Input("disableDomainBlock")]
        public Input<bool>? DisableDomainBlock { get; set; }

        /// <summary>
        /// The value of the email address for this method.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// The method for encrypting the User’s password.
        /// </summary>
        [Input("encryptionScheme")]
        public Input<string>? EncryptionScheme { get; set; }

        /// <summary>
        /// The expiration instant of the User’s account. An expired user is not permitted to login.
        /// </summary>
        [Input("expiry")]
        public Input<int>? Expiry { get; set; }

        /// <summary>
        /// The first name of the User.
        /// </summary>
        [Input("firstName")]
        public Input<string>? FirstName { get; set; }

        /// <summary>
        /// The User’s full name as a separate field that is not calculated from firstName and lastName.
        /// </summary>
        [Input("fullName")]
        public Input<string>? FullName { get; set; }

        /// <summary>
        /// The URL that points to an image file that is the User’s profile image.
        /// </summary>
        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        /// <summary>
        /// The User’s last name.
        /// </summary>
        [Input("lastName")]
        public Input<string>? LastName { get; set; }

        /// <summary>
        /// The User’s middle name.
        /// </summary>
        [Input("middleName")]
        public Input<string>? MiddleName { get; set; }

        /// <summary>
        /// The value of the mobile phone for this method.
        /// </summary>
        [Input("mobilePhone")]
        public Input<string>? MobilePhone { get; set; }

        /// <summary>
        /// The email address of the user’s parent or guardian. This field is used to allow a child user to identify their parent so FusionAuth can make a request to the parent to confirm the parent relationship.
        /// </summary>
        [Input("parentEmail")]
        public Input<string>? ParentEmail { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The User’s plain texts password. This password will be hashed and the provided value will never be stored and cannot be retrieved.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Indicates that the User’s password needs to be changed during their next login attempt.
        /// </summary>
        [Input("passwordChangeRequired")]
        public Input<bool>? PasswordChangeRequired { get; set; }

        [Input("preferredLanguages")]
        private InputList<string>? _preferredLanguages;

        /// <summary>
        /// An array of locale strings that give, in order, the User’s preferred languages. These are important for email templates and other localizable text.
        /// </summary>
        public InputList<string> PreferredLanguages
        {
            get => _preferredLanguages ?? (_preferredLanguages = new InputList<string>());
            set => _preferredLanguages = value;
        }

        /// <summary>
        /// Indicates to FusionAuth to send the User an email asking them to set their password. The Email Template that is used is configured in the System Configuration setting for Set Password Email Template.
        /// </summary>
        [Input("sendSetPasswordEmail")]
        public Input<bool>? SendSetPasswordEmail { get; set; }

        /// <summary>
        /// Indicates to FusionAuth that it should skip email verification even if it is enabled. This is useful for creating admin or internal User accounts.
        /// </summary>
        [Input("skipVerification")]
        public Input<bool>? SkipVerification { get; set; }

        /// <summary>
        /// The unique Id of the tenant used to scope this API request.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The User’s preferred timezone. The string must be in an IANA time zone format.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("twoFactorMethods")]
        private InputList<Inputs.FusionAuthUserTwoFactorMethodGetArgs>? _twoFactorMethods;
        public InputList<Inputs.FusionAuthUserTwoFactorMethodGetArgs> TwoFactorMethods
        {
            get => _twoFactorMethods ?? (_twoFactorMethods = new InputList<Inputs.FusionAuthUserTwoFactorMethodGetArgs>());
            set => _twoFactorMethods = value;
        }

        [Input("twoFactorRecoveryCodes")]
        private InputList<string>? _twoFactorRecoveryCodes;

        /// <summary>
        /// A list of recovery codes. These may be used in place of a code provided by an MFA factor. They are single use. If a recovery code is used in a disable request, all MFA methods are removed. If, after that, a Multi-Factor method is added, a new set of recovery codes will be generated.
        /// </summary>
        public InputList<string> TwoFactorRecoveryCodes
        {
            get => _twoFactorRecoveryCodes ?? (_twoFactorRecoveryCodes = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _twoFactorRecoveryCodes = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The Id to use for the new User. If not specified a secure random UUID will be generated..
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// The username of the User. The username is stored and returned as a case sensitive value, however a username is considered unique regardless of the case. bob is considered equal to BoB so either version of this username can be used whenever providing it as input to an API.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// The current status of the username. This is used if you are moderating usernames via CleanSpeak.
        /// </summary>
        [Input("usernameStatus")]
        public Input<string>? UsernameStatus { get; set; }

        public FusionAuthUserState()
        {
        }
        public static new FusionAuthUserState Empty => new FusionAuthUserState();
    }
}
