// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace theogravity.Fusionauth.Inputs
{

    public sealed class FusionAuthTenantJwtConfigurationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique id of the signing key used to sign the access token. Required prior to `1.30.0`.
        /// </summary>
        [Input("accessTokenKeyId")]
        public Input<string>? AccessTokenKeyId { get; set; }

        /// <summary>
        /// The unique id of the signing key used to sign the Id token. Required prior to `1.30.0`.
        /// </summary>
        [Input("idTokenKeyId")]
        public Input<string>? IdTokenKeyId { get; set; }

        /// <summary>
        /// The refresh token expiration policy.
        /// </summary>
        [Input("refreshTokenExpirationPolicy")]
        public Input<string>? RefreshTokenExpirationPolicy { get; set; }

        /// <summary>
        /// The length of time specified in seconds that a one-time use token can be reused. This value must be greater than 0 and less than 86400 which is equal to 24 hours. Setting this value to 0 effectively disables the grace period which means a one-time token may not be reused. For security reasons, you should keep this value as small as possible, and only increase past 0 to improve reliability for an asynchronous or clustered integration that may require a brief grace period. Defaults to 0.
        /// </summary>
        [Input("refreshTokenOneTimeUseConfigurationGracePeriodInSeconds")]
        public Input<int>? RefreshTokenOneTimeUseConfigurationGracePeriodInSeconds { get; set; }

        /// <summary>
        /// When enabled, the refresh token will be revoked when a user action, such as locking an account based on a number of failed login attempts, prevents user login.
        /// </summary>
        [Input("refreshTokenRevocationPolicyOnLoginPrevented")]
        public Input<bool>? RefreshTokenRevocationPolicyOnLoginPrevented { get; set; }

        /// <summary>
        /// When enabled, all refresh tokens will be revoked when a user enables multi-factor authentication for the first time. This policy will not be applied when adding subsequent multi-factor methods to the user.
        /// </summary>
        [Input("refreshTokenRevocationPolicyOnMultiFactorEnable")]
        public Input<bool>? RefreshTokenRevocationPolicyOnMultiFactorEnable { get; set; }

        /// <summary>
        /// When enabled, if a one-time use refresh token is reused, the token will be revoked. This does not cause all refresh tokens to be revoked, only the reused token is revoked.
        /// </summary>
        [Input("refreshTokenRevocationPolicyOnOneTimeTokenReuse")]
        public Input<bool>? RefreshTokenRevocationPolicyOnOneTimeTokenReuse { get; set; }

        /// <summary>
        /// When enabled, the refresh token will be revoked when a user changes their password."
        /// </summary>
        [Input("refreshTokenRevocationPolicyOnPasswordChange")]
        public Input<bool>? RefreshTokenRevocationPolicyOnPasswordChange { get; set; }

        /// <summary>
        /// The maximum lifetime of a refresh token when using a refresh token expiration policy of SlidingWindowWithMaximumLifetime. Value must be greater than 0.
        /// </summary>
        [Input("refreshTokenSlidingWindowMaximumTimeToLiveInMinutes")]
        public Input<int>? RefreshTokenSlidingWindowMaximumTimeToLiveInMinutes { get; set; }

        /// <summary>
        /// The length of time in minutes a Refresh Token is valid from the time it was issued. Value must be greater than 0.
        /// </summary>
        [Input("refreshTokenTimeToLiveInMinutes")]
        public Input<int>? RefreshTokenTimeToLiveInMinutes { get; set; }

        /// <summary>
        /// The refresh token usage policy.
        /// </summary>
        [Input("refreshTokenUsagePolicy")]
        public Input<string>? RefreshTokenUsagePolicy { get; set; }

        /// <summary>
        /// The length of time in seconds this JWT is valid from the time it was issued. Value must be greater than 0.
        /// </summary>
        [Input("timeToLiveInSeconds")]
        public Input<int>? TimeToLiveInSeconds { get; set; }

        public FusionAuthTenantJwtConfigurationGetArgs()
        {
        }
        public static new FusionAuthTenantJwtConfigurationGetArgs Empty => new FusionAuthTenantJwtConfigurationGetArgs();
    }
}
