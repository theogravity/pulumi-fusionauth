// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fusionauth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/theogravity/pulumi-fusionauth/sdk/v4/go/fusionauth/internal"
)

// ## # Facebook Identity Provider Resource
//
// The Facebook identity provider type will use the Facebook OAuth login API. It will provide a `Login with Facebook` button on FusionAuth’s login page that will leverage the Facebook login pop-up dialog. Additionally, this identity provider will call Facebook’s Graph API to load additional details about the user and store them in FusionAuth.
//
// The email address returned by the Facebook Graph API will be used to create or lookup the existing user. Additional claims returned by Facebook can be used to reconcile the User to FusionAuth by using a Facebook Reconcile Lambda. Unless you assign a reconcile lambda to this provider, on the `email` address will be used from the available claims returned by Facebook.
//
// When the `picture` field is not requested FusionAuth will also call Facebook’s `/me/picture` API to load the user’s profile image and store it as the `imageUrl` in FusionAuth. When the `picture` field is requested, the user’s profile image will be returned by the `/me` API and a second request to the `/me/picture` endpoint will not be required.
//
// Finally, FusionAuth will call Facebook’s `/oauth/access_token` API to exchange the login token for a long-lived Facebook token. This token is stored in the `UserRegistration` object inside the `tokens` Map. This Map stores the tokens from the various identity providers so that you can use them in your application to call their APIs.
//
// Please note if an `idpHint` is appended to the OAuth Authorize endpoint, then the interaction behavior will be defaulted to `redirect`, even if popup interaction is explicitly configured.
//
// [Facebook Identity Providers API](https://fusionauth.io/docs/v1/tech/apis/identity-providers/facebook)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/theogravity/pulumi-fusionauth/sdk/v4/go/fusionauth"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fusionauth.NewFusionAuthIdpFacebook(ctx, "facebook", &fusionauth.FusionAuthIdpFacebookArgs{
//				ApplicationConfigurations: fusionauth.FusionAuthIdpFacebookApplicationConfigurationArray{
//					&fusionauth.FusionAuthIdpFacebookApplicationConfigurationArgs{
//						ApplicationId:      pulumi.Any(fusionauth_application.Myapp.Id),
//						CreateRegistration: pulumi.Bool(true),
//						Enabled:            pulumi.Bool(true),
//					},
//				},
//				ButtonText:   pulumi.String("Login with Facebook"),
//				Debug:        pulumi.Bool(false),
//				Enabled:      pulumi.Bool(true),
//				AppId:        pulumi.String("9876543210"),
//				ClientSecret: pulumi.String("716a572f917640698cdb99e9d7e64115"),
//				Fields:       pulumi.String("email"),
//				Permissions:  pulumi.String("email"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FusionAuthIdpFacebook struct {
	pulumi.CustomResourceState

	// The top-level Facebook `appId` for your Application. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpFacebookApplicationConfigurationArrayOutput `pulumi:"applicationConfigurations"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringOutput `pulumi:"buttonText"`
	// The top-level client secret, also known as 'App Secret', to use with the Facebook Identity Provider when retrieving the long-lived token. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// Determines if debug is enabled for this provider. When enabled, an Event Log is created each time this provider is invoked to reconcile a login.
	Debug pulumi.BoolPtrOutput `pulumi:"debug"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The top-level fields that you are requesting from Facebook.
	// Field values are documented at [Facebook Graph API](https://developers.facebook.com/docs/graph-api/using-graph-api/)
	Fields pulumi.StringPtrOutput `pulumi:"fields"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringOutput `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the Facebook Identity Provider and the user.
	// The valid values are:
	// - `CreatePendingLink` - Do not automatically link, instead return a pending link identifier that can be used to link to an existing user.
	// - `LinkAnonymously` - Always create a link based upon the unique Id returned by the identity provider. A username or email is not required and will not be used to link the user. A reconcile lambda will not be used in this configuration.
	// - `LinkByEmail` - Link to an existing user based upon email. A user will be created with the email returned by the identity provider if one does not already exist.
	// - `LinkByEmailForExistingUser` - Only link to an existing user based upon email. A user will not be created if one does not already exist with email returned by the identity provider.
	// - `LinkByUsername` - Link to an existing user based upon username. A user will be created with the username returned by the identity provider if one does not already exist.
	// - `LinkByUsernameForExistingUser` - Only link to an existing user based upon username. A user will not be created if one does not already exist with username returned by the identity provider.
	LinkingStrategy pulumi.StringOutput `pulumi:"linkingStrategy"`
	// The login method to use for this Identity Provider.
	// The valid values are:
	// - `UsePopup` - When logging in use a popup window and the Facebook javascript library.
	// - `UseRedirect` - When logging in use the Facebook OAuth redirect login flow.
	LoginMethod pulumi.StringPtrOutput `pulumi:"loginMethod"`
	// The top-level permissions that your application is asking of the user’s Facebook account.
	// Permission values are documented at [Facebook Login API](https://developers.facebook.com/docs/permissions/reference)
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpFacebookTenantConfigurationArrayOutput `pulumi:"tenantConfigurations"`
}

// NewFusionAuthIdpFacebook registers a new resource with the given unique name, arguments, and options.
func NewFusionAuthIdpFacebook(ctx *pulumi.Context,
	name string, args *FusionAuthIdpFacebookArgs, opts ...pulumi.ResourceOption) (*FusionAuthIdpFacebook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.ButtonText == nil {
		return nil, errors.New("invalid value for required argument 'ButtonText'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FusionAuthIdpFacebook
	err := ctx.RegisterResource("fusionauth:index/fusionAuthIdpFacebook:FusionAuthIdpFacebook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFusionAuthIdpFacebook gets an existing FusionAuthIdpFacebook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFusionAuthIdpFacebook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FusionAuthIdpFacebookState, opts ...pulumi.ResourceOption) (*FusionAuthIdpFacebook, error) {
	var resource FusionAuthIdpFacebook
	err := ctx.ReadResource("fusionauth:index/fusionAuthIdpFacebook:FusionAuthIdpFacebook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FusionAuthIdpFacebook resources.
type fusionAuthIdpFacebookState struct {
	// The top-level Facebook `appId` for your Application. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
	AppId *string `pulumi:"appId"`
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations []FusionAuthIdpFacebookApplicationConfiguration `pulumi:"applicationConfigurations"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText *string `pulumi:"buttonText"`
	// The top-level client secret, also known as 'App Secret', to use with the Facebook Identity Provider when retrieving the long-lived token. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
	ClientSecret *string `pulumi:"clientSecret"`
	// Determines if debug is enabled for this provider. When enabled, an Event Log is created each time this provider is invoked to reconcile a login.
	Debug *bool `pulumi:"debug"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled *bool `pulumi:"enabled"`
	// The top-level fields that you are requesting from Facebook.
	// Field values are documented at [Facebook Graph API](https://developers.facebook.com/docs/graph-api/using-graph-api/)
	Fields *string `pulumi:"fields"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId *string `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the Facebook Identity Provider and the user.
	// The valid values are:
	// - `CreatePendingLink` - Do not automatically link, instead return a pending link identifier that can be used to link to an existing user.
	// - `LinkAnonymously` - Always create a link based upon the unique Id returned by the identity provider. A username or email is not required and will not be used to link the user. A reconcile lambda will not be used in this configuration.
	// - `LinkByEmail` - Link to an existing user based upon email. A user will be created with the email returned by the identity provider if one does not already exist.
	// - `LinkByEmailForExistingUser` - Only link to an existing user based upon email. A user will not be created if one does not already exist with email returned by the identity provider.
	// - `LinkByUsername` - Link to an existing user based upon username. A user will be created with the username returned by the identity provider if one does not already exist.
	// - `LinkByUsernameForExistingUser` - Only link to an existing user based upon username. A user will not be created if one does not already exist with username returned by the identity provider.
	LinkingStrategy *string `pulumi:"linkingStrategy"`
	// The login method to use for this Identity Provider.
	// The valid values are:
	// - `UsePopup` - When logging in use a popup window and the Facebook javascript library.
	// - `UseRedirect` - When logging in use the Facebook OAuth redirect login flow.
	LoginMethod *string `pulumi:"loginMethod"`
	// The top-level permissions that your application is asking of the user’s Facebook account.
	// Permission values are documented at [Facebook Login API](https://developers.facebook.com/docs/permissions/reference)
	Permissions *string `pulumi:"permissions"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations []FusionAuthIdpFacebookTenantConfiguration `pulumi:"tenantConfigurations"`
}

type FusionAuthIdpFacebookState struct {
	// The top-level Facebook `appId` for your Application. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
	AppId pulumi.StringPtrInput
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpFacebookApplicationConfigurationArrayInput
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringPtrInput
	// The top-level client secret, also known as 'App Secret', to use with the Facebook Identity Provider when retrieving the long-lived token. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
	ClientSecret pulumi.StringPtrInput
	// Determines if debug is enabled for this provider. When enabled, an Event Log is created each time this provider is invoked to reconcile a login.
	Debug pulumi.BoolPtrInput
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrInput
	// The top-level fields that you are requesting from Facebook.
	// Field values are documented at [Facebook Graph API](https://developers.facebook.com/docs/graph-api/using-graph-api/)
	Fields pulumi.StringPtrInput
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringPtrInput
	// The linking strategy to use when creating the link between the Facebook Identity Provider and the user.
	// The valid values are:
	// - `CreatePendingLink` - Do not automatically link, instead return a pending link identifier that can be used to link to an existing user.
	// - `LinkAnonymously` - Always create a link based upon the unique Id returned by the identity provider. A username or email is not required and will not be used to link the user. A reconcile lambda will not be used in this configuration.
	// - `LinkByEmail` - Link to an existing user based upon email. A user will be created with the email returned by the identity provider if one does not already exist.
	// - `LinkByEmailForExistingUser` - Only link to an existing user based upon email. A user will not be created if one does not already exist with email returned by the identity provider.
	// - `LinkByUsername` - Link to an existing user based upon username. A user will be created with the username returned by the identity provider if one does not already exist.
	// - `LinkByUsernameForExistingUser` - Only link to an existing user based upon username. A user will not be created if one does not already exist with username returned by the identity provider.
	LinkingStrategy pulumi.StringPtrInput
	// The login method to use for this Identity Provider.
	// The valid values are:
	// - `UsePopup` - When logging in use a popup window and the Facebook javascript library.
	// - `UseRedirect` - When logging in use the Facebook OAuth redirect login flow.
	LoginMethod pulumi.StringPtrInput
	// The top-level permissions that your application is asking of the user’s Facebook account.
	// Permission values are documented at [Facebook Login API](https://developers.facebook.com/docs/permissions/reference)
	Permissions pulumi.StringPtrInput
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpFacebookTenantConfigurationArrayInput
}

func (FusionAuthIdpFacebookState) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthIdpFacebookState)(nil)).Elem()
}

type fusionAuthIdpFacebookArgs struct {
	// The top-level Facebook `appId` for your Application. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
	AppId string `pulumi:"appId"`
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations []FusionAuthIdpFacebookApplicationConfiguration `pulumi:"applicationConfigurations"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText string `pulumi:"buttonText"`
	// The top-level client secret, also known as 'App Secret', to use with the Facebook Identity Provider when retrieving the long-lived token. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
	ClientSecret string `pulumi:"clientSecret"`
	// Determines if debug is enabled for this provider. When enabled, an Event Log is created each time this provider is invoked to reconcile a login.
	Debug *bool `pulumi:"debug"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled *bool `pulumi:"enabled"`
	// The top-level fields that you are requesting from Facebook.
	// Field values are documented at [Facebook Graph API](https://developers.facebook.com/docs/graph-api/using-graph-api/)
	Fields *string `pulumi:"fields"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId *string `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the Facebook Identity Provider and the user.
	// The valid values are:
	// - `CreatePendingLink` - Do not automatically link, instead return a pending link identifier that can be used to link to an existing user.
	// - `LinkAnonymously` - Always create a link based upon the unique Id returned by the identity provider. A username or email is not required and will not be used to link the user. A reconcile lambda will not be used in this configuration.
	// - `LinkByEmail` - Link to an existing user based upon email. A user will be created with the email returned by the identity provider if one does not already exist.
	// - `LinkByEmailForExistingUser` - Only link to an existing user based upon email. A user will not be created if one does not already exist with email returned by the identity provider.
	// - `LinkByUsername` - Link to an existing user based upon username. A user will be created with the username returned by the identity provider if one does not already exist.
	// - `LinkByUsernameForExistingUser` - Only link to an existing user based upon username. A user will not be created if one does not already exist with username returned by the identity provider.
	LinkingStrategy *string `pulumi:"linkingStrategy"`
	// The login method to use for this Identity Provider.
	// The valid values are:
	// - `UsePopup` - When logging in use a popup window and the Facebook javascript library.
	// - `UseRedirect` - When logging in use the Facebook OAuth redirect login flow.
	LoginMethod *string `pulumi:"loginMethod"`
	// The top-level permissions that your application is asking of the user’s Facebook account.
	// Permission values are documented at [Facebook Login API](https://developers.facebook.com/docs/permissions/reference)
	Permissions *string `pulumi:"permissions"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations []FusionAuthIdpFacebookTenantConfiguration `pulumi:"tenantConfigurations"`
}

// The set of arguments for constructing a FusionAuthIdpFacebook resource.
type FusionAuthIdpFacebookArgs struct {
	// The top-level Facebook `appId` for your Application. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
	AppId pulumi.StringInput
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpFacebookApplicationConfigurationArrayInput
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringInput
	// The top-level client secret, also known as 'App Secret', to use with the Facebook Identity Provider when retrieving the long-lived token. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
	ClientSecret pulumi.StringInput
	// Determines if debug is enabled for this provider. When enabled, an Event Log is created each time this provider is invoked to reconcile a login.
	Debug pulumi.BoolPtrInput
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrInput
	// The top-level fields that you are requesting from Facebook.
	// Field values are documented at [Facebook Graph API](https://developers.facebook.com/docs/graph-api/using-graph-api/)
	Fields pulumi.StringPtrInput
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringPtrInput
	// The linking strategy to use when creating the link between the Facebook Identity Provider and the user.
	// The valid values are:
	// - `CreatePendingLink` - Do not automatically link, instead return a pending link identifier that can be used to link to an existing user.
	// - `LinkAnonymously` - Always create a link based upon the unique Id returned by the identity provider. A username or email is not required and will not be used to link the user. A reconcile lambda will not be used in this configuration.
	// - `LinkByEmail` - Link to an existing user based upon email. A user will be created with the email returned by the identity provider if one does not already exist.
	// - `LinkByEmailForExistingUser` - Only link to an existing user based upon email. A user will not be created if one does not already exist with email returned by the identity provider.
	// - `LinkByUsername` - Link to an existing user based upon username. A user will be created with the username returned by the identity provider if one does not already exist.
	// - `LinkByUsernameForExistingUser` - Only link to an existing user based upon username. A user will not be created if one does not already exist with username returned by the identity provider.
	LinkingStrategy pulumi.StringPtrInput
	// The login method to use for this Identity Provider.
	// The valid values are:
	// - `UsePopup` - When logging in use a popup window and the Facebook javascript library.
	// - `UseRedirect` - When logging in use the Facebook OAuth redirect login flow.
	LoginMethod pulumi.StringPtrInput
	// The top-level permissions that your application is asking of the user’s Facebook account.
	// Permission values are documented at [Facebook Login API](https://developers.facebook.com/docs/permissions/reference)
	Permissions pulumi.StringPtrInput
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpFacebookTenantConfigurationArrayInput
}

func (FusionAuthIdpFacebookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthIdpFacebookArgs)(nil)).Elem()
}

type FusionAuthIdpFacebookInput interface {
	pulumi.Input

	ToFusionAuthIdpFacebookOutput() FusionAuthIdpFacebookOutput
	ToFusionAuthIdpFacebookOutputWithContext(ctx context.Context) FusionAuthIdpFacebookOutput
}

func (*FusionAuthIdpFacebook) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthIdpFacebook)(nil)).Elem()
}

func (i *FusionAuthIdpFacebook) ToFusionAuthIdpFacebookOutput() FusionAuthIdpFacebookOutput {
	return i.ToFusionAuthIdpFacebookOutputWithContext(context.Background())
}

func (i *FusionAuthIdpFacebook) ToFusionAuthIdpFacebookOutputWithContext(ctx context.Context) FusionAuthIdpFacebookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpFacebookOutput)
}

// FusionAuthIdpFacebookArrayInput is an input type that accepts FusionAuthIdpFacebookArray and FusionAuthIdpFacebookArrayOutput values.
// You can construct a concrete instance of `FusionAuthIdpFacebookArrayInput` via:
//
//	FusionAuthIdpFacebookArray{ FusionAuthIdpFacebookArgs{...} }
type FusionAuthIdpFacebookArrayInput interface {
	pulumi.Input

	ToFusionAuthIdpFacebookArrayOutput() FusionAuthIdpFacebookArrayOutput
	ToFusionAuthIdpFacebookArrayOutputWithContext(context.Context) FusionAuthIdpFacebookArrayOutput
}

type FusionAuthIdpFacebookArray []FusionAuthIdpFacebookInput

func (FusionAuthIdpFacebookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthIdpFacebook)(nil)).Elem()
}

func (i FusionAuthIdpFacebookArray) ToFusionAuthIdpFacebookArrayOutput() FusionAuthIdpFacebookArrayOutput {
	return i.ToFusionAuthIdpFacebookArrayOutputWithContext(context.Background())
}

func (i FusionAuthIdpFacebookArray) ToFusionAuthIdpFacebookArrayOutputWithContext(ctx context.Context) FusionAuthIdpFacebookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpFacebookArrayOutput)
}

// FusionAuthIdpFacebookMapInput is an input type that accepts FusionAuthIdpFacebookMap and FusionAuthIdpFacebookMapOutput values.
// You can construct a concrete instance of `FusionAuthIdpFacebookMapInput` via:
//
//	FusionAuthIdpFacebookMap{ "key": FusionAuthIdpFacebookArgs{...} }
type FusionAuthIdpFacebookMapInput interface {
	pulumi.Input

	ToFusionAuthIdpFacebookMapOutput() FusionAuthIdpFacebookMapOutput
	ToFusionAuthIdpFacebookMapOutputWithContext(context.Context) FusionAuthIdpFacebookMapOutput
}

type FusionAuthIdpFacebookMap map[string]FusionAuthIdpFacebookInput

func (FusionAuthIdpFacebookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthIdpFacebook)(nil)).Elem()
}

func (i FusionAuthIdpFacebookMap) ToFusionAuthIdpFacebookMapOutput() FusionAuthIdpFacebookMapOutput {
	return i.ToFusionAuthIdpFacebookMapOutputWithContext(context.Background())
}

func (i FusionAuthIdpFacebookMap) ToFusionAuthIdpFacebookMapOutputWithContext(ctx context.Context) FusionAuthIdpFacebookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpFacebookMapOutput)
}

type FusionAuthIdpFacebookOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpFacebookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthIdpFacebook)(nil)).Elem()
}

func (o FusionAuthIdpFacebookOutput) ToFusionAuthIdpFacebookOutput() FusionAuthIdpFacebookOutput {
	return o
}

func (o FusionAuthIdpFacebookOutput) ToFusionAuthIdpFacebookOutputWithContext(ctx context.Context) FusionAuthIdpFacebookOutput {
	return o
}

// The top-level Facebook `appId` for your Application. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
func (o FusionAuthIdpFacebookOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The configuration for each Application that the identity provider is enabled for.
func (o FusionAuthIdpFacebookOutput) ApplicationConfigurations() FusionAuthIdpFacebookApplicationConfigurationArrayOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) FusionAuthIdpFacebookApplicationConfigurationArrayOutput {
		return v.ApplicationConfigurations
	}).(FusionAuthIdpFacebookApplicationConfigurationArrayOutput)
}

// The top-level button text to use on the FusionAuth login page for this Identity Provider.
func (o FusionAuthIdpFacebookOutput) ButtonText() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) pulumi.StringOutput { return v.ButtonText }).(pulumi.StringOutput)
}

// The top-level client secret, also known as 'App Secret', to use with the Facebook Identity Provider when retrieving the long-lived token. This value is retrieved from the Facebook developer website when you setup your Facebook developer account.
func (o FusionAuthIdpFacebookOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// Determines if debug is enabled for this provider. When enabled, an Event Log is created each time this provider is invoked to reconcile a login.
func (o FusionAuthIdpFacebookOutput) Debug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) pulumi.BoolPtrOutput { return v.Debug }).(pulumi.BoolPtrOutput)
}

// Determines if this provider is enabled. If it is false then it will be disabled globally.
func (o FusionAuthIdpFacebookOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The top-level fields that you are requesting from Facebook.
// Field values are documented at [Facebook Graph API](https://developers.facebook.com/docs/graph-api/using-graph-api/)
func (o FusionAuthIdpFacebookOutput) Fields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) pulumi.StringPtrOutput { return v.Fields }).(pulumi.StringPtrOutput)
}

// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
func (o FusionAuthIdpFacebookOutput) LambdaReconcileId() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) pulumi.StringOutput { return v.LambdaReconcileId }).(pulumi.StringOutput)
}

// The linking strategy to use when creating the link between the Facebook Identity Provider and the user.
// The valid values are:
// - `CreatePendingLink` - Do not automatically link, instead return a pending link identifier that can be used to link to an existing user.
// - `LinkAnonymously` - Always create a link based upon the unique Id returned by the identity provider. A username or email is not required and will not be used to link the user. A reconcile lambda will not be used in this configuration.
// - `LinkByEmail` - Link to an existing user based upon email. A user will be created with the email returned by the identity provider if one does not already exist.
// - `LinkByEmailForExistingUser` - Only link to an existing user based upon email. A user will not be created if one does not already exist with email returned by the identity provider.
// - `LinkByUsername` - Link to an existing user based upon username. A user will be created with the username returned by the identity provider if one does not already exist.
// - `LinkByUsernameForExistingUser` - Only link to an existing user based upon username. A user will not be created if one does not already exist with username returned by the identity provider.
func (o FusionAuthIdpFacebookOutput) LinkingStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) pulumi.StringOutput { return v.LinkingStrategy }).(pulumi.StringOutput)
}

// The login method to use for this Identity Provider.
// The valid values are:
// - `UsePopup` - When logging in use a popup window and the Facebook javascript library.
// - `UseRedirect` - When logging in use the Facebook OAuth redirect login flow.
func (o FusionAuthIdpFacebookOutput) LoginMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) pulumi.StringPtrOutput { return v.LoginMethod }).(pulumi.StringPtrOutput)
}

// The top-level permissions that your application is asking of the user’s Facebook account.
// Permission values are documented at [Facebook Login API](https://developers.facebook.com/docs/permissions/reference)
func (o FusionAuthIdpFacebookOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) pulumi.StringPtrOutput { return v.Permissions }).(pulumi.StringPtrOutput)
}

// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
func (o FusionAuthIdpFacebookOutput) TenantConfigurations() FusionAuthIdpFacebookTenantConfigurationArrayOutput {
	return o.ApplyT(func(v *FusionAuthIdpFacebook) FusionAuthIdpFacebookTenantConfigurationArrayOutput {
		return v.TenantConfigurations
	}).(FusionAuthIdpFacebookTenantConfigurationArrayOutput)
}

type FusionAuthIdpFacebookArrayOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpFacebookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthIdpFacebook)(nil)).Elem()
}

func (o FusionAuthIdpFacebookArrayOutput) ToFusionAuthIdpFacebookArrayOutput() FusionAuthIdpFacebookArrayOutput {
	return o
}

func (o FusionAuthIdpFacebookArrayOutput) ToFusionAuthIdpFacebookArrayOutputWithContext(ctx context.Context) FusionAuthIdpFacebookArrayOutput {
	return o
}

func (o FusionAuthIdpFacebookArrayOutput) Index(i pulumi.IntInput) FusionAuthIdpFacebookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FusionAuthIdpFacebook {
		return vs[0].([]*FusionAuthIdpFacebook)[vs[1].(int)]
	}).(FusionAuthIdpFacebookOutput)
}

type FusionAuthIdpFacebookMapOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpFacebookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthIdpFacebook)(nil)).Elem()
}

func (o FusionAuthIdpFacebookMapOutput) ToFusionAuthIdpFacebookMapOutput() FusionAuthIdpFacebookMapOutput {
	return o
}

func (o FusionAuthIdpFacebookMapOutput) ToFusionAuthIdpFacebookMapOutputWithContext(ctx context.Context) FusionAuthIdpFacebookMapOutput {
	return o
}

func (o FusionAuthIdpFacebookMapOutput) MapIndex(k pulumi.StringInput) FusionAuthIdpFacebookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FusionAuthIdpFacebook {
		return vs[0].(map[string]*FusionAuthIdpFacebook)[vs[1].(string)]
	}).(FusionAuthIdpFacebookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpFacebookInput)(nil)).Elem(), &FusionAuthIdpFacebook{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpFacebookArrayInput)(nil)).Elem(), FusionAuthIdpFacebookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpFacebookMapInput)(nil)).Elem(), FusionAuthIdpFacebookMap{})
	pulumi.RegisterOutputType(FusionAuthIdpFacebookOutput{})
	pulumi.RegisterOutputType(FusionAuthIdpFacebookArrayOutput{})
	pulumi.RegisterOutputType(FusionAuthIdpFacebookMapOutput{})
}
