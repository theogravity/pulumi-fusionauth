// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fusionauth

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/theogravity/pulumi-fusionauth/sdk/v4/go/fusionauth/internal"
)

// ## # Tenant Resource
//
// A FusionAuth Tenant is a named object that represents a discrete namespace for Users, Applications and Groups. A user is unique by email address or username within a tenant.
//
// Tenants may be useful to support a multi-tenant application where you wish to use a single instance of FusionAuth but require the ability to have duplicate users across the tenants in your own application. In this scenario a user may exist multiple times with the same email address and different passwords across tenants.
//
// Tenants may also be useful in a test or staging environment to allow multiple users to call APIs and create and modify users without possibility of collision.
//
// [Tenants API](https://fusionauth.io/docs/v1/tech/apis/tenants)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/theogravity/pulumi-fusionauth/sdk/v4/go/fusionauth"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fusionauth.GetTenant(ctx, &fusionauth.GetTenantArgs{
//				Name: "Default",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTenant(ctx *pulumi.Context, args *GetTenantArgs, opts ...pulumi.InvokeOption) (*GetTenantResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTenantResult
	err := ctx.Invoke("fusionauth:index/getTenant:getTenant", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTenant.
type GetTenantArgs struct {
	// The name of the Tenant.
	Name string `pulumi:"name"`
}

// A collection of values returned by getTenant.
type GetTenantResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func GetTenantOutput(ctx *pulumi.Context, args GetTenantOutputArgs, opts ...pulumi.InvokeOption) GetTenantResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTenantResult, error) {
			args := v.(GetTenantArgs)
			r, err := GetTenant(ctx, &args, opts...)
			var s GetTenantResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTenantResultOutput)
}

// A collection of arguments for invoking getTenant.
type GetTenantOutputArgs struct {
	// The name of the Tenant.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetTenantOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTenantArgs)(nil)).Elem()
}

// A collection of values returned by getTenant.
type GetTenantResultOutput struct{ *pulumi.OutputState }

func (GetTenantResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTenantResult)(nil)).Elem()
}

func (o GetTenantResultOutput) ToGetTenantResultOutput() GetTenantResultOutput {
	return o
}

func (o GetTenantResultOutput) ToGetTenantResultOutputWithContext(ctx context.Context) GetTenantResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetTenantResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTenantResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTenantResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTenantResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTenantResultOutput{})
}
