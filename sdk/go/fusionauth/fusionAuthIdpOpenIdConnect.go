// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fusionauth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # OpenID Connect Identity Provider Resource
//
// OpenID Connect identity providers connect to external OpenID Connect login systems. This type of login will optionally provide a Login with …​ button on FusionAuth’s login page. This button is customizable by using different properties of the identity provider.
//
// Optionally, this identity provider can define one or more domains it is associated with. This is useful for allowing employees to log in with their corporate credentials. As long as the company has an identity solution that provides OpenID Connect, you can leverage this feature. This is referred to as a Domain Based Identity Provider. If you enable domains for an identity provider, the Login with …​ button will not be displayed. Instead, only the email form field will be displayed initially on the FusionAuth login page. Once the user types in their email address, FusionAuth will determine if the user is logging in locally or if they should be redirected to this identity provider. This is determined by extracting the domain from their email address and comparing it to the domains associated with the identity provider.
//
// FusionAuth will also leverage the /userinfo API that is part of the OpenID Connect specification. The email address returned from the Userinfo response will be used to create or lookup the existing user. Additional claims from the Userinfo response can be used to reconcile the User in FusionAuth by using an OpenID Connect Reconcile Lambda. Unless you assign a reconcile lambda to this provider, on the email address will be used from the available claims returned by the OpenID Connect identity provider.
//
// If the external OpenID Connect identity provider returns a refresh token, it will be stored in the UserRegistration object inside the tokens Map. This Map stores the tokens from the various identity providers so that you can use them in your application to call their APIs.
//
// [OpenID Connect Identity Providers API](https://fusionauth.io/docs/v1/tech/apis/identity-providers/openid-connect)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/theogravity/pulumi-fusionauth/sdk/v2/go/fusionauth"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fusionauth.NewFusionAuthIdpOpenIdConnect(ctx, "openID", &fusionauth.FusionAuthIdpOpenIdConnectArgs{
//				ApplicationConfigurations: fusionauth.FusionAuthIdpOpenIdConnectApplicationConfigurationArray{
//					&fusionauth.FusionAuthIdpOpenIdConnectApplicationConfigurationArgs{
//						ApplicationId:      pulumi.Any(fusionauth_application.Myapp.Id),
//						CreateRegistration: pulumi.Bool(true),
//						Enabled:            pulumi.Bool(true),
//					},
//				},
//				Oauth2AuthorizationEndpoint:      pulumi.String("https://acme.com/oauth2/authorization"),
//				Oauth2ClientId:                   pulumi.String("191c23dc-b772-4558-bd21-dc1cbf74ae21"),
//				Oauth2ClientSecret:               pulumi.String("SUsnoP0pWUYfXvWbSe5pvj8Di5nAxOvO"),
//				Oauth2ClientAuthenticationMethod: pulumi.String("client_secret_basic"),
//				Oauth2Scope:                      pulumi.String("openid offline_access"),
//				Oauth2TokenEndpoint:              pulumi.String("https://acme.com/oauth2/token"),
//				Oauth2UserInfoEndpoint:           pulumi.String("https://acme.com/oauth2/userinfo"),
//				ButtonText:                       pulumi.String("Login with OpenID Connect"),
//				Debug:                            pulumi.Bool(false),
//				Enabled:                          pulumi.Bool(true),
//				TenantConfigurations: fusionauth.FusionAuthIdpOpenIdConnectTenantConfigurationArray{
//					&fusionauth.FusionAuthIdpOpenIdConnectTenantConfigurationArgs{
//						TenantId:                       pulumi.Any(fusionauth_tenant.Example.Id),
//						LimitUserLinkCountEnabled:      pulumi.Bool(false),
//						LimitUserLinkCountMaximumLinks: pulumi.Int(42),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FusionAuthIdpOpenIdConnect struct {
	pulumi.CustomResourceState

	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpOpenIdConnectApplicationConfigurationArrayOutput `pulumi:"applicationConfigurations"`
	// The top-level button image (URL) to use on the FusionAuth login page for this Identity Provider.
	ButtonImageUrl pulumi.StringPtrOutput `pulumi:"buttonImageUrl"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringOutput `pulumi:"buttonText"`
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug pulumi.BoolPtrOutput `pulumi:"debug"`
	// This is an optional list of domains that this OpenID Connect provider should be used for. This converts the FusionAuth login form to a domain-based login form. This type of form first asks the user for their email. FusionAuth then uses their email to determine if an OpenID Connect identity provider should be used. If an OpenID Connect provider should be used, the browser is redirected to the authorization endpoint of that identity provider. Otherwise, the password field is revealed on the form so that the user can login using FusionAuth.
	Domains pulumi.StringArrayOutput `pulumi:"domains"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId pulumi.StringPtrOutput `pulumi:"idpId"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringPtrOutput `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy pulumi.StringOutput `pulumi:"linkingStrategy"`
	// The name of this OpenID Connect identity provider. This is only used for display purposes.
	Name pulumi.StringOutput `pulumi:"name"`
	// The top-level authorization endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the authorization endpoint. If you provide an issuer then this field will be ignored.
	Oauth2AuthorizationEndpoint pulumi.StringPtrOutput `pulumi:"oauth2AuthorizationEndpoint"`
	// The client authentication method to use with the OpenID Connect identity provider.
	Oauth2ClientAuthenticationMethod pulumi.StringPtrOutput `pulumi:"oauth2ClientAuthenticationMethod"`
	// The top-level client id for your Application.
	Oauth2ClientId pulumi.StringOutput `pulumi:"oauth2ClientId"`
	// The top-level client secret to use with the OpenID Connect identity provider.
	Oauth2ClientSecret pulumi.StringPtrOutput `pulumi:"oauth2ClientSecret"`
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the email address.
	Oauth2EmailClaim pulumi.StringPtrOutput `pulumi:"oauth2EmailClaim"`
	// The top-level issuer URI for the OpenID Connect identity provider. If this is provided, the authorization endpoint, token endpoint and userinfo endpoint will all be resolved using the issuer URI plus /.well-known/openid-configuration.
	Oauth2Issuer pulumi.StringPtrOutput `pulumi:"oauth2Issuer"`
	// The top-level scope that you are requesting from the OpenID Connect identity provider.
	Oauth2Scope pulumi.StringPtrOutput `pulumi:"oauth2Scope"`
	// The top-level token endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the token endpoint. If you provide an issuer then this field will be ignored.
	Oauth2TokenEndpoint pulumi.StringPtrOutput `pulumi:"oauth2TokenEndpoint"`
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the user Id.
	Oauth2UniqueIdClaim pulumi.StringPtrOutput `pulumi:"oauth2UniqueIdClaim"`
	// The top-level userinfo endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the userinfo endpoint. If you provide an issuer then this field will be ignored.
	Oauth2UserInfoEndpoint pulumi.StringPtrOutput `pulumi:"oauth2UserInfoEndpoint"`
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the username.
	Oauth2UsernameClaim pulumi.StringPtrOutput `pulumi:"oauth2UsernameClaim"`
	// Set this value equal to true if you wish to use POST bindings with this OpenID Connect identity provider. The default value of false means that a redirect binding which uses a GET request will be used.
	PostRequest pulumi.BoolPtrOutput `pulumi:"postRequest"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpOpenIdConnectTenantConfigurationArrayOutput `pulumi:"tenantConfigurations"`
}

// NewFusionAuthIdpOpenIdConnect registers a new resource with the given unique name, arguments, and options.
func NewFusionAuthIdpOpenIdConnect(ctx *pulumi.Context,
	name string, args *FusionAuthIdpOpenIdConnectArgs, opts ...pulumi.ResourceOption) (*FusionAuthIdpOpenIdConnect, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ButtonText == nil {
		return nil, errors.New("invalid value for required argument 'ButtonText'")
	}
	if args.Oauth2ClientId == nil {
		return nil, errors.New("invalid value for required argument 'Oauth2ClientId'")
	}
	if args.Oauth2ClientSecret != nil {
		args.Oauth2ClientSecret = pulumi.ToSecret(args.Oauth2ClientSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"oauth2ClientSecret",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource FusionAuthIdpOpenIdConnect
	err := ctx.RegisterResource("fusionauth:index/fusionAuthIdpOpenIdConnect:FusionAuthIdpOpenIdConnect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFusionAuthIdpOpenIdConnect gets an existing FusionAuthIdpOpenIdConnect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFusionAuthIdpOpenIdConnect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FusionAuthIdpOpenIdConnectState, opts ...pulumi.ResourceOption) (*FusionAuthIdpOpenIdConnect, error) {
	var resource FusionAuthIdpOpenIdConnect
	err := ctx.ReadResource("fusionauth:index/fusionAuthIdpOpenIdConnect:FusionAuthIdpOpenIdConnect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FusionAuthIdpOpenIdConnect resources.
type fusionAuthIdpOpenIdConnectState struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations []FusionAuthIdpOpenIdConnectApplicationConfiguration `pulumi:"applicationConfigurations"`
	// The top-level button image (URL) to use on the FusionAuth login page for this Identity Provider.
	ButtonImageUrl *string `pulumi:"buttonImageUrl"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText *string `pulumi:"buttonText"`
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug *bool `pulumi:"debug"`
	// This is an optional list of domains that this OpenID Connect provider should be used for. This converts the FusionAuth login form to a domain-based login form. This type of form first asks the user for their email. FusionAuth then uses their email to determine if an OpenID Connect identity provider should be used. If an OpenID Connect provider should be used, the browser is redirected to the authorization endpoint of that identity provider. Otherwise, the password field is revealed on the form so that the user can login using FusionAuth.
	Domains []string `pulumi:"domains"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled *bool `pulumi:"enabled"`
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId *string `pulumi:"idpId"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId *string `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy *string `pulumi:"linkingStrategy"`
	// The name of this OpenID Connect identity provider. This is only used for display purposes.
	Name *string `pulumi:"name"`
	// The top-level authorization endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the authorization endpoint. If you provide an issuer then this field will be ignored.
	Oauth2AuthorizationEndpoint *string `pulumi:"oauth2AuthorizationEndpoint"`
	// The client authentication method to use with the OpenID Connect identity provider.
	Oauth2ClientAuthenticationMethod *string `pulumi:"oauth2ClientAuthenticationMethod"`
	// The top-level client id for your Application.
	Oauth2ClientId *string `pulumi:"oauth2ClientId"`
	// The top-level client secret to use with the OpenID Connect identity provider.
	Oauth2ClientSecret *string `pulumi:"oauth2ClientSecret"`
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the email address.
	Oauth2EmailClaim *string `pulumi:"oauth2EmailClaim"`
	// The top-level issuer URI for the OpenID Connect identity provider. If this is provided, the authorization endpoint, token endpoint and userinfo endpoint will all be resolved using the issuer URI plus /.well-known/openid-configuration.
	Oauth2Issuer *string `pulumi:"oauth2Issuer"`
	// The top-level scope that you are requesting from the OpenID Connect identity provider.
	Oauth2Scope *string `pulumi:"oauth2Scope"`
	// The top-level token endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the token endpoint. If you provide an issuer then this field will be ignored.
	Oauth2TokenEndpoint *string `pulumi:"oauth2TokenEndpoint"`
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the user Id.
	Oauth2UniqueIdClaim *string `pulumi:"oauth2UniqueIdClaim"`
	// The top-level userinfo endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the userinfo endpoint. If you provide an issuer then this field will be ignored.
	Oauth2UserInfoEndpoint *string `pulumi:"oauth2UserInfoEndpoint"`
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the username.
	Oauth2UsernameClaim *string `pulumi:"oauth2UsernameClaim"`
	// Set this value equal to true if you wish to use POST bindings with this OpenID Connect identity provider. The default value of false means that a redirect binding which uses a GET request will be used.
	PostRequest *bool `pulumi:"postRequest"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations []FusionAuthIdpOpenIdConnectTenantConfiguration `pulumi:"tenantConfigurations"`
}

type FusionAuthIdpOpenIdConnectState struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpOpenIdConnectApplicationConfigurationArrayInput
	// The top-level button image (URL) to use on the FusionAuth login page for this Identity Provider.
	ButtonImageUrl pulumi.StringPtrInput
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringPtrInput
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug pulumi.BoolPtrInput
	// This is an optional list of domains that this OpenID Connect provider should be used for. This converts the FusionAuth login form to a domain-based login form. This type of form first asks the user for their email. FusionAuth then uses their email to determine if an OpenID Connect identity provider should be used. If an OpenID Connect provider should be used, the browser is redirected to the authorization endpoint of that identity provider. Otherwise, the password field is revealed on the form so that the user can login using FusionAuth.
	Domains pulumi.StringArrayInput
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrInput
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId pulumi.StringPtrInput
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringPtrInput
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy pulumi.StringPtrInput
	// The name of this OpenID Connect identity provider. This is only used for display purposes.
	Name pulumi.StringPtrInput
	// The top-level authorization endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the authorization endpoint. If you provide an issuer then this field will be ignored.
	Oauth2AuthorizationEndpoint pulumi.StringPtrInput
	// The client authentication method to use with the OpenID Connect identity provider.
	Oauth2ClientAuthenticationMethod pulumi.StringPtrInput
	// The top-level client id for your Application.
	Oauth2ClientId pulumi.StringPtrInput
	// The top-level client secret to use with the OpenID Connect identity provider.
	Oauth2ClientSecret pulumi.StringPtrInput
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the email address.
	Oauth2EmailClaim pulumi.StringPtrInput
	// The top-level issuer URI for the OpenID Connect identity provider. If this is provided, the authorization endpoint, token endpoint and userinfo endpoint will all be resolved using the issuer URI plus /.well-known/openid-configuration.
	Oauth2Issuer pulumi.StringPtrInput
	// The top-level scope that you are requesting from the OpenID Connect identity provider.
	Oauth2Scope pulumi.StringPtrInput
	// The top-level token endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the token endpoint. If you provide an issuer then this field will be ignored.
	Oauth2TokenEndpoint pulumi.StringPtrInput
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the user Id.
	Oauth2UniqueIdClaim pulumi.StringPtrInput
	// The top-level userinfo endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the userinfo endpoint. If you provide an issuer then this field will be ignored.
	Oauth2UserInfoEndpoint pulumi.StringPtrInput
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the username.
	Oauth2UsernameClaim pulumi.StringPtrInput
	// Set this value equal to true if you wish to use POST bindings with this OpenID Connect identity provider. The default value of false means that a redirect binding which uses a GET request will be used.
	PostRequest pulumi.BoolPtrInput
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpOpenIdConnectTenantConfigurationArrayInput
}

func (FusionAuthIdpOpenIdConnectState) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthIdpOpenIdConnectState)(nil)).Elem()
}

type fusionAuthIdpOpenIdConnectArgs struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations []FusionAuthIdpOpenIdConnectApplicationConfiguration `pulumi:"applicationConfigurations"`
	// The top-level button image (URL) to use on the FusionAuth login page for this Identity Provider.
	ButtonImageUrl *string `pulumi:"buttonImageUrl"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText string `pulumi:"buttonText"`
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug *bool `pulumi:"debug"`
	// This is an optional list of domains that this OpenID Connect provider should be used for. This converts the FusionAuth login form to a domain-based login form. This type of form first asks the user for their email. FusionAuth then uses their email to determine if an OpenID Connect identity provider should be used. If an OpenID Connect provider should be used, the browser is redirected to the authorization endpoint of that identity provider. Otherwise, the password field is revealed on the form so that the user can login using FusionAuth.
	Domains []string `pulumi:"domains"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled *bool `pulumi:"enabled"`
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId *string `pulumi:"idpId"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId *string `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy *string `pulumi:"linkingStrategy"`
	// The name of this OpenID Connect identity provider. This is only used for display purposes.
	Name *string `pulumi:"name"`
	// The top-level authorization endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the authorization endpoint. If you provide an issuer then this field will be ignored.
	Oauth2AuthorizationEndpoint *string `pulumi:"oauth2AuthorizationEndpoint"`
	// The client authentication method to use with the OpenID Connect identity provider.
	Oauth2ClientAuthenticationMethod *string `pulumi:"oauth2ClientAuthenticationMethod"`
	// The top-level client id for your Application.
	Oauth2ClientId string `pulumi:"oauth2ClientId"`
	// The top-level client secret to use with the OpenID Connect identity provider.
	Oauth2ClientSecret *string `pulumi:"oauth2ClientSecret"`
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the email address.
	Oauth2EmailClaim *string `pulumi:"oauth2EmailClaim"`
	// The top-level issuer URI for the OpenID Connect identity provider. If this is provided, the authorization endpoint, token endpoint and userinfo endpoint will all be resolved using the issuer URI plus /.well-known/openid-configuration.
	Oauth2Issuer *string `pulumi:"oauth2Issuer"`
	// The top-level scope that you are requesting from the OpenID Connect identity provider.
	Oauth2Scope *string `pulumi:"oauth2Scope"`
	// The top-level token endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the token endpoint. If you provide an issuer then this field will be ignored.
	Oauth2TokenEndpoint *string `pulumi:"oauth2TokenEndpoint"`
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the user Id.
	Oauth2UniqueIdClaim *string `pulumi:"oauth2UniqueIdClaim"`
	// The top-level userinfo endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the userinfo endpoint. If you provide an issuer then this field will be ignored.
	Oauth2UserInfoEndpoint *string `pulumi:"oauth2UserInfoEndpoint"`
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the username.
	Oauth2UsernameClaim *string `pulumi:"oauth2UsernameClaim"`
	// Set this value equal to true if you wish to use POST bindings with this OpenID Connect identity provider. The default value of false means that a redirect binding which uses a GET request will be used.
	PostRequest *bool `pulumi:"postRequest"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations []FusionAuthIdpOpenIdConnectTenantConfiguration `pulumi:"tenantConfigurations"`
}

// The set of arguments for constructing a FusionAuthIdpOpenIdConnect resource.
type FusionAuthIdpOpenIdConnectArgs struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpOpenIdConnectApplicationConfigurationArrayInput
	// The top-level button image (URL) to use on the FusionAuth login page for this Identity Provider.
	ButtonImageUrl pulumi.StringPtrInput
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringInput
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug pulumi.BoolPtrInput
	// This is an optional list of domains that this OpenID Connect provider should be used for. This converts the FusionAuth login form to a domain-based login form. This type of form first asks the user for their email. FusionAuth then uses their email to determine if an OpenID Connect identity provider should be used. If an OpenID Connect provider should be used, the browser is redirected to the authorization endpoint of that identity provider. Otherwise, the password field is revealed on the form so that the user can login using FusionAuth.
	Domains pulumi.StringArrayInput
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrInput
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId pulumi.StringPtrInput
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringPtrInput
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy pulumi.StringPtrInput
	// The name of this OpenID Connect identity provider. This is only used for display purposes.
	Name pulumi.StringPtrInput
	// The top-level authorization endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the authorization endpoint. If you provide an issuer then this field will be ignored.
	Oauth2AuthorizationEndpoint pulumi.StringPtrInput
	// The client authentication method to use with the OpenID Connect identity provider.
	Oauth2ClientAuthenticationMethod pulumi.StringPtrInput
	// The top-level client id for your Application.
	Oauth2ClientId pulumi.StringInput
	// The top-level client secret to use with the OpenID Connect identity provider.
	Oauth2ClientSecret pulumi.StringPtrInput
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the email address.
	Oauth2EmailClaim pulumi.StringPtrInput
	// The top-level issuer URI for the OpenID Connect identity provider. If this is provided, the authorization endpoint, token endpoint and userinfo endpoint will all be resolved using the issuer URI plus /.well-known/openid-configuration.
	Oauth2Issuer pulumi.StringPtrInput
	// The top-level scope that you are requesting from the OpenID Connect identity provider.
	Oauth2Scope pulumi.StringPtrInput
	// The top-level token endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the token endpoint. If you provide an issuer then this field will be ignored.
	Oauth2TokenEndpoint pulumi.StringPtrInput
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the user Id.
	Oauth2UniqueIdClaim pulumi.StringPtrInput
	// The top-level userinfo endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the userinfo endpoint. If you provide an issuer then this field will be ignored.
	Oauth2UserInfoEndpoint pulumi.StringPtrInput
	// An optional configuration to modify the expected name of the claim returned by the IdP that contains the username.
	Oauth2UsernameClaim pulumi.StringPtrInput
	// Set this value equal to true if you wish to use POST bindings with this OpenID Connect identity provider. The default value of false means that a redirect binding which uses a GET request will be used.
	PostRequest pulumi.BoolPtrInput
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpOpenIdConnectTenantConfigurationArrayInput
}

func (FusionAuthIdpOpenIdConnectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthIdpOpenIdConnectArgs)(nil)).Elem()
}

type FusionAuthIdpOpenIdConnectInput interface {
	pulumi.Input

	ToFusionAuthIdpOpenIdConnectOutput() FusionAuthIdpOpenIdConnectOutput
	ToFusionAuthIdpOpenIdConnectOutputWithContext(ctx context.Context) FusionAuthIdpOpenIdConnectOutput
}

func (*FusionAuthIdpOpenIdConnect) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthIdpOpenIdConnect)(nil)).Elem()
}

func (i *FusionAuthIdpOpenIdConnect) ToFusionAuthIdpOpenIdConnectOutput() FusionAuthIdpOpenIdConnectOutput {
	return i.ToFusionAuthIdpOpenIdConnectOutputWithContext(context.Background())
}

func (i *FusionAuthIdpOpenIdConnect) ToFusionAuthIdpOpenIdConnectOutputWithContext(ctx context.Context) FusionAuthIdpOpenIdConnectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpOpenIdConnectOutput)
}

// FusionAuthIdpOpenIdConnectArrayInput is an input type that accepts FusionAuthIdpOpenIdConnectArray and FusionAuthIdpOpenIdConnectArrayOutput values.
// You can construct a concrete instance of `FusionAuthIdpOpenIdConnectArrayInput` via:
//
//	FusionAuthIdpOpenIdConnectArray{ FusionAuthIdpOpenIdConnectArgs{...} }
type FusionAuthIdpOpenIdConnectArrayInput interface {
	pulumi.Input

	ToFusionAuthIdpOpenIdConnectArrayOutput() FusionAuthIdpOpenIdConnectArrayOutput
	ToFusionAuthIdpOpenIdConnectArrayOutputWithContext(context.Context) FusionAuthIdpOpenIdConnectArrayOutput
}

type FusionAuthIdpOpenIdConnectArray []FusionAuthIdpOpenIdConnectInput

func (FusionAuthIdpOpenIdConnectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthIdpOpenIdConnect)(nil)).Elem()
}

func (i FusionAuthIdpOpenIdConnectArray) ToFusionAuthIdpOpenIdConnectArrayOutput() FusionAuthIdpOpenIdConnectArrayOutput {
	return i.ToFusionAuthIdpOpenIdConnectArrayOutputWithContext(context.Background())
}

func (i FusionAuthIdpOpenIdConnectArray) ToFusionAuthIdpOpenIdConnectArrayOutputWithContext(ctx context.Context) FusionAuthIdpOpenIdConnectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpOpenIdConnectArrayOutput)
}

// FusionAuthIdpOpenIdConnectMapInput is an input type that accepts FusionAuthIdpOpenIdConnectMap and FusionAuthIdpOpenIdConnectMapOutput values.
// You can construct a concrete instance of `FusionAuthIdpOpenIdConnectMapInput` via:
//
//	FusionAuthIdpOpenIdConnectMap{ "key": FusionAuthIdpOpenIdConnectArgs{...} }
type FusionAuthIdpOpenIdConnectMapInput interface {
	pulumi.Input

	ToFusionAuthIdpOpenIdConnectMapOutput() FusionAuthIdpOpenIdConnectMapOutput
	ToFusionAuthIdpOpenIdConnectMapOutputWithContext(context.Context) FusionAuthIdpOpenIdConnectMapOutput
}

type FusionAuthIdpOpenIdConnectMap map[string]FusionAuthIdpOpenIdConnectInput

func (FusionAuthIdpOpenIdConnectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthIdpOpenIdConnect)(nil)).Elem()
}

func (i FusionAuthIdpOpenIdConnectMap) ToFusionAuthIdpOpenIdConnectMapOutput() FusionAuthIdpOpenIdConnectMapOutput {
	return i.ToFusionAuthIdpOpenIdConnectMapOutputWithContext(context.Background())
}

func (i FusionAuthIdpOpenIdConnectMap) ToFusionAuthIdpOpenIdConnectMapOutputWithContext(ctx context.Context) FusionAuthIdpOpenIdConnectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpOpenIdConnectMapOutput)
}

type FusionAuthIdpOpenIdConnectOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpOpenIdConnectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthIdpOpenIdConnect)(nil)).Elem()
}

func (o FusionAuthIdpOpenIdConnectOutput) ToFusionAuthIdpOpenIdConnectOutput() FusionAuthIdpOpenIdConnectOutput {
	return o
}

func (o FusionAuthIdpOpenIdConnectOutput) ToFusionAuthIdpOpenIdConnectOutputWithContext(ctx context.Context) FusionAuthIdpOpenIdConnectOutput {
	return o
}

// The configuration for each Application that the identity provider is enabled for.
func (o FusionAuthIdpOpenIdConnectOutput) ApplicationConfigurations() FusionAuthIdpOpenIdConnectApplicationConfigurationArrayOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) FusionAuthIdpOpenIdConnectApplicationConfigurationArrayOutput {
		return v.ApplicationConfigurations
	}).(FusionAuthIdpOpenIdConnectApplicationConfigurationArrayOutput)
}

// The top-level button image (URL) to use on the FusionAuth login page for this Identity Provider.
func (o FusionAuthIdpOpenIdConnectOutput) ButtonImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.ButtonImageUrl }).(pulumi.StringPtrOutput)
}

// The top-level button text to use on the FusionAuth login page for this Identity Provider.
func (o FusionAuthIdpOpenIdConnectOutput) ButtonText() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringOutput { return v.ButtonText }).(pulumi.StringOutput)
}

// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
func (o FusionAuthIdpOpenIdConnectOutput) Debug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.BoolPtrOutput { return v.Debug }).(pulumi.BoolPtrOutput)
}

// This is an optional list of domains that this OpenID Connect provider should be used for. This converts the FusionAuth login form to a domain-based login form. This type of form first asks the user for their email. FusionAuth then uses their email to determine if an OpenID Connect identity provider should be used. If an OpenID Connect provider should be used, the browser is redirected to the authorization endpoint of that identity provider. Otherwise, the password field is revealed on the form so that the user can login using FusionAuth.
func (o FusionAuthIdpOpenIdConnectOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringArrayOutput { return v.Domains }).(pulumi.StringArrayOutput)
}

// Determines if this provider is enabled. If it is false then it will be disabled globally.
func (o FusionAuthIdpOpenIdConnectOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
func (o FusionAuthIdpOpenIdConnectOutput) IdpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.IdpId }).(pulumi.StringPtrOutput)
}

// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
func (o FusionAuthIdpOpenIdConnectOutput) LambdaReconcileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.LambdaReconcileId }).(pulumi.StringPtrOutput)
}

// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
func (o FusionAuthIdpOpenIdConnectOutput) LinkingStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringOutput { return v.LinkingStrategy }).(pulumi.StringOutput)
}

// The name of this OpenID Connect identity provider. This is only used for display purposes.
func (o FusionAuthIdpOpenIdConnectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The top-level authorization endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the authorization endpoint. If you provide an issuer then this field will be ignored.
func (o FusionAuthIdpOpenIdConnectOutput) Oauth2AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.Oauth2AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// The client authentication method to use with the OpenID Connect identity provider.
func (o FusionAuthIdpOpenIdConnectOutput) Oauth2ClientAuthenticationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.Oauth2ClientAuthenticationMethod }).(pulumi.StringPtrOutput)
}

// The top-level client id for your Application.
func (o FusionAuthIdpOpenIdConnectOutput) Oauth2ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringOutput { return v.Oauth2ClientId }).(pulumi.StringOutput)
}

// The top-level client secret to use with the OpenID Connect identity provider.
func (o FusionAuthIdpOpenIdConnectOutput) Oauth2ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.Oauth2ClientSecret }).(pulumi.StringPtrOutput)
}

// An optional configuration to modify the expected name of the claim returned by the IdP that contains the email address.
func (o FusionAuthIdpOpenIdConnectOutput) Oauth2EmailClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.Oauth2EmailClaim }).(pulumi.StringPtrOutput)
}

// The top-level issuer URI for the OpenID Connect identity provider. If this is provided, the authorization endpoint, token endpoint and userinfo endpoint will all be resolved using the issuer URI plus /.well-known/openid-configuration.
func (o FusionAuthIdpOpenIdConnectOutput) Oauth2Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.Oauth2Issuer }).(pulumi.StringPtrOutput)
}

// The top-level scope that you are requesting from the OpenID Connect identity provider.
func (o FusionAuthIdpOpenIdConnectOutput) Oauth2Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.Oauth2Scope }).(pulumi.StringPtrOutput)
}

// The top-level token endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the token endpoint. If you provide an issuer then this field will be ignored.
func (o FusionAuthIdpOpenIdConnectOutput) Oauth2TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.Oauth2TokenEndpoint }).(pulumi.StringPtrOutput)
}

// An optional configuration to modify the expected name of the claim returned by the IdP that contains the user Id.
func (o FusionAuthIdpOpenIdConnectOutput) Oauth2UniqueIdClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.Oauth2UniqueIdClaim }).(pulumi.StringPtrOutput)
}

// The top-level userinfo endpoint for the OpenID Connect identity provider. You can leave this blank if you provide the issuer field, which will be used to make a request to the OpenID Connect .well-known endpoint in order to dynamically resolve the userinfo endpoint. If you provide an issuer then this field will be ignored.
func (o FusionAuthIdpOpenIdConnectOutput) Oauth2UserInfoEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.Oauth2UserInfoEndpoint }).(pulumi.StringPtrOutput)
}

// An optional configuration to modify the expected name of the claim returned by the IdP that contains the username.
func (o FusionAuthIdpOpenIdConnectOutput) Oauth2UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.StringPtrOutput { return v.Oauth2UsernameClaim }).(pulumi.StringPtrOutput)
}

// Set this value equal to true if you wish to use POST bindings with this OpenID Connect identity provider. The default value of false means that a redirect binding which uses a GET request will be used.
func (o FusionAuthIdpOpenIdConnectOutput) PostRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) pulumi.BoolPtrOutput { return v.PostRequest }).(pulumi.BoolPtrOutput)
}

// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
func (o FusionAuthIdpOpenIdConnectOutput) TenantConfigurations() FusionAuthIdpOpenIdConnectTenantConfigurationArrayOutput {
	return o.ApplyT(func(v *FusionAuthIdpOpenIdConnect) FusionAuthIdpOpenIdConnectTenantConfigurationArrayOutput {
		return v.TenantConfigurations
	}).(FusionAuthIdpOpenIdConnectTenantConfigurationArrayOutput)
}

type FusionAuthIdpOpenIdConnectArrayOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpOpenIdConnectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthIdpOpenIdConnect)(nil)).Elem()
}

func (o FusionAuthIdpOpenIdConnectArrayOutput) ToFusionAuthIdpOpenIdConnectArrayOutput() FusionAuthIdpOpenIdConnectArrayOutput {
	return o
}

func (o FusionAuthIdpOpenIdConnectArrayOutput) ToFusionAuthIdpOpenIdConnectArrayOutputWithContext(ctx context.Context) FusionAuthIdpOpenIdConnectArrayOutput {
	return o
}

func (o FusionAuthIdpOpenIdConnectArrayOutput) Index(i pulumi.IntInput) FusionAuthIdpOpenIdConnectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FusionAuthIdpOpenIdConnect {
		return vs[0].([]*FusionAuthIdpOpenIdConnect)[vs[1].(int)]
	}).(FusionAuthIdpOpenIdConnectOutput)
}

type FusionAuthIdpOpenIdConnectMapOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpOpenIdConnectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthIdpOpenIdConnect)(nil)).Elem()
}

func (o FusionAuthIdpOpenIdConnectMapOutput) ToFusionAuthIdpOpenIdConnectMapOutput() FusionAuthIdpOpenIdConnectMapOutput {
	return o
}

func (o FusionAuthIdpOpenIdConnectMapOutput) ToFusionAuthIdpOpenIdConnectMapOutputWithContext(ctx context.Context) FusionAuthIdpOpenIdConnectMapOutput {
	return o
}

func (o FusionAuthIdpOpenIdConnectMapOutput) MapIndex(k pulumi.StringInput) FusionAuthIdpOpenIdConnectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FusionAuthIdpOpenIdConnect {
		return vs[0].(map[string]*FusionAuthIdpOpenIdConnect)[vs[1].(string)]
	}).(FusionAuthIdpOpenIdConnectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpOpenIdConnectInput)(nil)).Elem(), &FusionAuthIdpOpenIdConnect{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpOpenIdConnectArrayInput)(nil)).Elem(), FusionAuthIdpOpenIdConnectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpOpenIdConnectMapInput)(nil)).Elem(), FusionAuthIdpOpenIdConnectMap{})
	pulumi.RegisterOutputType(FusionAuthIdpOpenIdConnectOutput{})
	pulumi.RegisterOutputType(FusionAuthIdpOpenIdConnectArrayOutput{})
	pulumi.RegisterOutputType(FusionAuthIdpOpenIdConnectMapOutput{})
}
