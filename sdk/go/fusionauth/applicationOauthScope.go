// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fusionauth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/theogravity/pulumi-fusionauth/sdk/go/fusionauth/internal"
)

// ## # Application OAuth Scope Resource
//
// The Application OAuth Scope resource allows you to define the scopes that an application can request when using OAuth.
//
// [Application OAuth Scope API](https://fusionauth.io/docs/apis/scopes)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/theogravity/pulumi-fusionauth/sdk/go/fusionauth"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fusionauth.NewFusionAuthApplicationOAuthScope(ctx, "this", &fusionauth.FusionAuthApplicationOAuthScopeArgs{
//				ApplicationId: pulumi.Any(fusionauth_application.This.Id),
//				Data: pulumi.StringMap{
//					"addedBy": pulumi.String("Tom"),
//					"addedOn": pulumi.String("2025-02-05"),
//				},
//				DefaultConsentDetail:  pulumi.String("This will provide the requesting application read-only access to your data"),
//				DefaultConsentMessage: pulumi.String("View your data"),
//				Description:           pulumi.String("Provides an application read-only access to a user's data"),
//				Required:              pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: fusionauth.index/applicationoauthscope.ApplicationOauthScope has been deprecated in favor of fusionauth.index/fusionauthapplicationoauthscope.FusionAuthApplicationOAuthScope
type ApplicationOauthScope struct {
	pulumi.CustomResourceState

	// ID of the application that this role is for.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// An object that can hold any information about the OAuth Scope that should be persisted.
	Data pulumi.StringMapOutput `pulumi:"data"`
	// "The default detail to display on the OAuth consent screen if one cannot be found in the theme.
	DefaultConsentDetail pulumi.StringPtrOutput `pulumi:"defaultConsentDetail"`
	// The default message to display on the OAuth consent screen if one cannot be found in the theme.
	DefaultConsentMessage pulumi.StringPtrOutput `pulumi:"defaultConsentMessage"`
	// A description of the OAuth Scope. This is used for display purposes only.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Role.
	Name pulumi.StringOutput `pulumi:"name"`
	// Determines if the OAuth Scope is required when requested in an OAuth workflow.
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// The Id to use for the new OAuth Scope. If not specified a secure random UUID will be generated.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
}

// NewApplicationOauthScope registers a new resource with the given unique name, arguments, and options.
func NewApplicationOauthScope(ctx *pulumi.Context,
	name string, args *ApplicationOauthScopeArgs, opts ...pulumi.ResourceOption) (*ApplicationOauthScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationOauthScope
	err := ctx.RegisterResource("fusionauth:index/applicationOauthScope:ApplicationOauthScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationOauthScope gets an existing ApplicationOauthScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationOauthScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationOauthScopeState, opts ...pulumi.ResourceOption) (*ApplicationOauthScope, error) {
	var resource ApplicationOauthScope
	err := ctx.ReadResource("fusionauth:index/applicationOauthScope:ApplicationOauthScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationOauthScope resources.
type applicationOauthScopeState struct {
	// ID of the application that this role is for.
	ApplicationId *string `pulumi:"applicationId"`
	// An object that can hold any information about the OAuth Scope that should be persisted.
	Data map[string]string `pulumi:"data"`
	// "The default detail to display on the OAuth consent screen if one cannot be found in the theme.
	DefaultConsentDetail *string `pulumi:"defaultConsentDetail"`
	// The default message to display on the OAuth consent screen if one cannot be found in the theme.
	DefaultConsentMessage *string `pulumi:"defaultConsentMessage"`
	// A description of the OAuth Scope. This is used for display purposes only.
	Description *string `pulumi:"description"`
	// The name of the Role.
	Name *string `pulumi:"name"`
	// Determines if the OAuth Scope is required when requested in an OAuth workflow.
	Required *bool `pulumi:"required"`
	// The Id to use for the new OAuth Scope. If not specified a secure random UUID will be generated.
	ScopeId *string `pulumi:"scopeId"`
}

type ApplicationOauthScopeState struct {
	// ID of the application that this role is for.
	ApplicationId pulumi.StringPtrInput
	// An object that can hold any information about the OAuth Scope that should be persisted.
	Data pulumi.StringMapInput
	// "The default detail to display on the OAuth consent screen if one cannot be found in the theme.
	DefaultConsentDetail pulumi.StringPtrInput
	// The default message to display on the OAuth consent screen if one cannot be found in the theme.
	DefaultConsentMessage pulumi.StringPtrInput
	// A description of the OAuth Scope. This is used for display purposes only.
	Description pulumi.StringPtrInput
	// The name of the Role.
	Name pulumi.StringPtrInput
	// Determines if the OAuth Scope is required when requested in an OAuth workflow.
	Required pulumi.BoolPtrInput
	// The Id to use for the new OAuth Scope. If not specified a secure random UUID will be generated.
	ScopeId pulumi.StringPtrInput
}

func (ApplicationOauthScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationOauthScopeState)(nil)).Elem()
}

type applicationOauthScopeArgs struct {
	// ID of the application that this role is for.
	ApplicationId string `pulumi:"applicationId"`
	// An object that can hold any information about the OAuth Scope that should be persisted.
	Data map[string]string `pulumi:"data"`
	// "The default detail to display on the OAuth consent screen if one cannot be found in the theme.
	DefaultConsentDetail *string `pulumi:"defaultConsentDetail"`
	// The default message to display on the OAuth consent screen if one cannot be found in the theme.
	DefaultConsentMessage *string `pulumi:"defaultConsentMessage"`
	// A description of the OAuth Scope. This is used for display purposes only.
	Description *string `pulumi:"description"`
	// The name of the Role.
	Name *string `pulumi:"name"`
	// Determines if the OAuth Scope is required when requested in an OAuth workflow.
	Required *bool `pulumi:"required"`
	// The Id to use for the new OAuth Scope. If not specified a secure random UUID will be generated.
	ScopeId *string `pulumi:"scopeId"`
}

// The set of arguments for constructing a ApplicationOauthScope resource.
type ApplicationOauthScopeArgs struct {
	// ID of the application that this role is for.
	ApplicationId pulumi.StringInput
	// An object that can hold any information about the OAuth Scope that should be persisted.
	Data pulumi.StringMapInput
	// "The default detail to display on the OAuth consent screen if one cannot be found in the theme.
	DefaultConsentDetail pulumi.StringPtrInput
	// The default message to display on the OAuth consent screen if one cannot be found in the theme.
	DefaultConsentMessage pulumi.StringPtrInput
	// A description of the OAuth Scope. This is used for display purposes only.
	Description pulumi.StringPtrInput
	// The name of the Role.
	Name pulumi.StringPtrInput
	// Determines if the OAuth Scope is required when requested in an OAuth workflow.
	Required pulumi.BoolPtrInput
	// The Id to use for the new OAuth Scope. If not specified a secure random UUID will be generated.
	ScopeId pulumi.StringPtrInput
}

func (ApplicationOauthScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationOauthScopeArgs)(nil)).Elem()
}

type ApplicationOauthScopeInput interface {
	pulumi.Input

	ToApplicationOauthScopeOutput() ApplicationOauthScopeOutput
	ToApplicationOauthScopeOutputWithContext(ctx context.Context) ApplicationOauthScopeOutput
}

func (*ApplicationOauthScope) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOauthScope)(nil)).Elem()
}

func (i *ApplicationOauthScope) ToApplicationOauthScopeOutput() ApplicationOauthScopeOutput {
	return i.ToApplicationOauthScopeOutputWithContext(context.Background())
}

func (i *ApplicationOauthScope) ToApplicationOauthScopeOutputWithContext(ctx context.Context) ApplicationOauthScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOauthScopeOutput)
}

// ApplicationOauthScopeArrayInput is an input type that accepts ApplicationOauthScopeArray and ApplicationOauthScopeArrayOutput values.
// You can construct a concrete instance of `ApplicationOauthScopeArrayInput` via:
//
//	ApplicationOauthScopeArray{ ApplicationOauthScopeArgs{...} }
type ApplicationOauthScopeArrayInput interface {
	pulumi.Input

	ToApplicationOauthScopeArrayOutput() ApplicationOauthScopeArrayOutput
	ToApplicationOauthScopeArrayOutputWithContext(context.Context) ApplicationOauthScopeArrayOutput
}

type ApplicationOauthScopeArray []ApplicationOauthScopeInput

func (ApplicationOauthScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationOauthScope)(nil)).Elem()
}

func (i ApplicationOauthScopeArray) ToApplicationOauthScopeArrayOutput() ApplicationOauthScopeArrayOutput {
	return i.ToApplicationOauthScopeArrayOutputWithContext(context.Background())
}

func (i ApplicationOauthScopeArray) ToApplicationOauthScopeArrayOutputWithContext(ctx context.Context) ApplicationOauthScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOauthScopeArrayOutput)
}

// ApplicationOauthScopeMapInput is an input type that accepts ApplicationOauthScopeMap and ApplicationOauthScopeMapOutput values.
// You can construct a concrete instance of `ApplicationOauthScopeMapInput` via:
//
//	ApplicationOauthScopeMap{ "key": ApplicationOauthScopeArgs{...} }
type ApplicationOauthScopeMapInput interface {
	pulumi.Input

	ToApplicationOauthScopeMapOutput() ApplicationOauthScopeMapOutput
	ToApplicationOauthScopeMapOutputWithContext(context.Context) ApplicationOauthScopeMapOutput
}

type ApplicationOauthScopeMap map[string]ApplicationOauthScopeInput

func (ApplicationOauthScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationOauthScope)(nil)).Elem()
}

func (i ApplicationOauthScopeMap) ToApplicationOauthScopeMapOutput() ApplicationOauthScopeMapOutput {
	return i.ToApplicationOauthScopeMapOutputWithContext(context.Background())
}

func (i ApplicationOauthScopeMap) ToApplicationOauthScopeMapOutputWithContext(ctx context.Context) ApplicationOauthScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOauthScopeMapOutput)
}

type ApplicationOauthScopeOutput struct{ *pulumi.OutputState }

func (ApplicationOauthScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOauthScope)(nil)).Elem()
}

func (o ApplicationOauthScopeOutput) ToApplicationOauthScopeOutput() ApplicationOauthScopeOutput {
	return o
}

func (o ApplicationOauthScopeOutput) ToApplicationOauthScopeOutputWithContext(ctx context.Context) ApplicationOauthScopeOutput {
	return o
}

// ID of the application that this role is for.
func (o ApplicationOauthScopeOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationOauthScope) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// An object that can hold any information about the OAuth Scope that should be persisted.
func (o ApplicationOauthScopeOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApplicationOauthScope) pulumi.StringMapOutput { return v.Data }).(pulumi.StringMapOutput)
}

// "The default detail to display on the OAuth consent screen if one cannot be found in the theme.
func (o ApplicationOauthScopeOutput) DefaultConsentDetail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOauthScope) pulumi.StringPtrOutput { return v.DefaultConsentDetail }).(pulumi.StringPtrOutput)
}

// The default message to display on the OAuth consent screen if one cannot be found in the theme.
func (o ApplicationOauthScopeOutput) DefaultConsentMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOauthScope) pulumi.StringPtrOutput { return v.DefaultConsentMessage }).(pulumi.StringPtrOutput)
}

// A description of the OAuth Scope. This is used for display purposes only.
func (o ApplicationOauthScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOauthScope) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Role.
func (o ApplicationOauthScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationOauthScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Determines if the OAuth Scope is required when requested in an OAuth workflow.
func (o ApplicationOauthScopeOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationOauthScope) pulumi.BoolPtrOutput { return v.Required }).(pulumi.BoolPtrOutput)
}

// The Id to use for the new OAuth Scope. If not specified a secure random UUID will be generated.
func (o ApplicationOauthScopeOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationOauthScope) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

type ApplicationOauthScopeArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOauthScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationOauthScope)(nil)).Elem()
}

func (o ApplicationOauthScopeArrayOutput) ToApplicationOauthScopeArrayOutput() ApplicationOauthScopeArrayOutput {
	return o
}

func (o ApplicationOauthScopeArrayOutput) ToApplicationOauthScopeArrayOutputWithContext(ctx context.Context) ApplicationOauthScopeArrayOutput {
	return o
}

func (o ApplicationOauthScopeArrayOutput) Index(i pulumi.IntInput) ApplicationOauthScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationOauthScope {
		return vs[0].([]*ApplicationOauthScope)[vs[1].(int)]
	}).(ApplicationOauthScopeOutput)
}

type ApplicationOauthScopeMapOutput struct{ *pulumi.OutputState }

func (ApplicationOauthScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationOauthScope)(nil)).Elem()
}

func (o ApplicationOauthScopeMapOutput) ToApplicationOauthScopeMapOutput() ApplicationOauthScopeMapOutput {
	return o
}

func (o ApplicationOauthScopeMapOutput) ToApplicationOauthScopeMapOutputWithContext(ctx context.Context) ApplicationOauthScopeMapOutput {
	return o
}

func (o ApplicationOauthScopeMapOutput) MapIndex(k pulumi.StringInput) ApplicationOauthScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationOauthScope {
		return vs[0].(map[string]*ApplicationOauthScope)[vs[1].(string)]
	}).(ApplicationOauthScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOauthScopeInput)(nil)).Elem(), &ApplicationOauthScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOauthScopeArrayInput)(nil)).Elem(), ApplicationOauthScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOauthScopeMapInput)(nil)).Elem(), ApplicationOauthScopeMap{})
	pulumi.RegisterOutputType(ApplicationOauthScopeOutput{})
	pulumi.RegisterOutputType(ApplicationOauthScopeArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOauthScopeMapOutput{})
}
