// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fusionauth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/theogravity/pulumi-fusionauth/sdk/go/fusionauth/internal"
)

// ## # User Group Membership Resource
//
// [User Group Membership API](https://fusionauth.io/docs/apis/groups#request-5)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/theogravity/pulumi-fusionauth/sdk/go/fusionauth"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fusionauth.NewFusionAuthUserGroupMembership(ctx, "this", &fusionauth.FusionAuthUserGroupMembershipArgs{
//				GroupId: pulumi.Any(fusionauth_group.This.Id),
//				UserId:  pulumi.Any(fusionauth_user.This.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: fusionauth.index/usergroupmembership.UserGroupMembership has been deprecated in favor of fusionauth.index/fusionauthusergroupmembership.FusionAuthUserGroupMembership
type UserGroupMembership struct {
	pulumi.CustomResourceState

	// An object that can hold any information about the User for this membership that should be persisted.
	Data pulumi.StringMapOutput `pulumi:"data"`
	// The Id of the Group of this membership.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The Id of the User Group Membership. If not provided, a random UUID will be generated.
	MembershipId pulumi.StringOutput `pulumi:"membershipId"`
	// "The Id of the User of this membership.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewUserGroupMembership(ctx *pulumi.Context,
	name string, args *UserGroupMembershipArgs, opts ...pulumi.ResourceOption) (*UserGroupMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroupMembership
	err := ctx.RegisterResource("fusionauth:index/userGroupMembership:UserGroupMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroupMembership gets an existing UserGroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupMembershipState, opts ...pulumi.ResourceOption) (*UserGroupMembership, error) {
	var resource UserGroupMembership
	err := ctx.ReadResource("fusionauth:index/userGroupMembership:UserGroupMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroupMembership resources.
type userGroupMembershipState struct {
	// An object that can hold any information about the User for this membership that should be persisted.
	Data map[string]string `pulumi:"data"`
	// The Id of the Group of this membership.
	GroupId *string `pulumi:"groupId"`
	// The Id of the User Group Membership. If not provided, a random UUID will be generated.
	MembershipId *string `pulumi:"membershipId"`
	// "The Id of the User of this membership.
	UserId *string `pulumi:"userId"`
}

type UserGroupMembershipState struct {
	// An object that can hold any information about the User for this membership that should be persisted.
	Data pulumi.StringMapInput
	// The Id of the Group of this membership.
	GroupId pulumi.StringPtrInput
	// The Id of the User Group Membership. If not provided, a random UUID will be generated.
	MembershipId pulumi.StringPtrInput
	// "The Id of the User of this membership.
	UserId pulumi.StringPtrInput
}

func (UserGroupMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupMembershipState)(nil)).Elem()
}

type userGroupMembershipArgs struct {
	// An object that can hold any information about the User for this membership that should be persisted.
	Data map[string]string `pulumi:"data"`
	// The Id of the Group of this membership.
	GroupId string `pulumi:"groupId"`
	// The Id of the User Group Membership. If not provided, a random UUID will be generated.
	MembershipId *string `pulumi:"membershipId"`
	// "The Id of the User of this membership.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserGroupMembership resource.
type UserGroupMembershipArgs struct {
	// An object that can hold any information about the User for this membership that should be persisted.
	Data pulumi.StringMapInput
	// The Id of the Group of this membership.
	GroupId pulumi.StringInput
	// The Id of the User Group Membership. If not provided, a random UUID will be generated.
	MembershipId pulumi.StringPtrInput
	// "The Id of the User of this membership.
	UserId pulumi.StringInput
}

func (UserGroupMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupMembershipArgs)(nil)).Elem()
}

type UserGroupMembershipInput interface {
	pulumi.Input

	ToUserGroupMembershipOutput() UserGroupMembershipOutput
	ToUserGroupMembershipOutputWithContext(ctx context.Context) UserGroupMembershipOutput
}

func (*UserGroupMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupMembership)(nil)).Elem()
}

func (i *UserGroupMembership) ToUserGroupMembershipOutput() UserGroupMembershipOutput {
	return i.ToUserGroupMembershipOutputWithContext(context.Background())
}

func (i *UserGroupMembership) ToUserGroupMembershipOutputWithContext(ctx context.Context) UserGroupMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupMembershipOutput)
}

// UserGroupMembershipArrayInput is an input type that accepts UserGroupMembershipArray and UserGroupMembershipArrayOutput values.
// You can construct a concrete instance of `UserGroupMembershipArrayInput` via:
//
//	UserGroupMembershipArray{ UserGroupMembershipArgs{...} }
type UserGroupMembershipArrayInput interface {
	pulumi.Input

	ToUserGroupMembershipArrayOutput() UserGroupMembershipArrayOutput
	ToUserGroupMembershipArrayOutputWithContext(context.Context) UserGroupMembershipArrayOutput
}

type UserGroupMembershipArray []UserGroupMembershipInput

func (UserGroupMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupMembership)(nil)).Elem()
}

func (i UserGroupMembershipArray) ToUserGroupMembershipArrayOutput() UserGroupMembershipArrayOutput {
	return i.ToUserGroupMembershipArrayOutputWithContext(context.Background())
}

func (i UserGroupMembershipArray) ToUserGroupMembershipArrayOutputWithContext(ctx context.Context) UserGroupMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupMembershipArrayOutput)
}

// UserGroupMembershipMapInput is an input type that accepts UserGroupMembershipMap and UserGroupMembershipMapOutput values.
// You can construct a concrete instance of `UserGroupMembershipMapInput` via:
//
//	UserGroupMembershipMap{ "key": UserGroupMembershipArgs{...} }
type UserGroupMembershipMapInput interface {
	pulumi.Input

	ToUserGroupMembershipMapOutput() UserGroupMembershipMapOutput
	ToUserGroupMembershipMapOutputWithContext(context.Context) UserGroupMembershipMapOutput
}

type UserGroupMembershipMap map[string]UserGroupMembershipInput

func (UserGroupMembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupMembership)(nil)).Elem()
}

func (i UserGroupMembershipMap) ToUserGroupMembershipMapOutput() UserGroupMembershipMapOutput {
	return i.ToUserGroupMembershipMapOutputWithContext(context.Background())
}

func (i UserGroupMembershipMap) ToUserGroupMembershipMapOutputWithContext(ctx context.Context) UserGroupMembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupMembershipMapOutput)
}

type UserGroupMembershipOutput struct{ *pulumi.OutputState }

func (UserGroupMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupMembership)(nil)).Elem()
}

func (o UserGroupMembershipOutput) ToUserGroupMembershipOutput() UserGroupMembershipOutput {
	return o
}

func (o UserGroupMembershipOutput) ToUserGroupMembershipOutputWithContext(ctx context.Context) UserGroupMembershipOutput {
	return o
}

// An object that can hold any information about the User for this membership that should be persisted.
func (o UserGroupMembershipOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UserGroupMembership) pulumi.StringMapOutput { return v.Data }).(pulumi.StringMapOutput)
}

// The Id of the Group of this membership.
func (o UserGroupMembershipOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupMembership) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The Id of the User Group Membership. If not provided, a random UUID will be generated.
func (o UserGroupMembershipOutput) MembershipId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupMembership) pulumi.StringOutput { return v.MembershipId }).(pulumi.StringOutput)
}

// "The Id of the User of this membership.
func (o UserGroupMembershipOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupMembership) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserGroupMembershipArrayOutput struct{ *pulumi.OutputState }

func (UserGroupMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupMembership)(nil)).Elem()
}

func (o UserGroupMembershipArrayOutput) ToUserGroupMembershipArrayOutput() UserGroupMembershipArrayOutput {
	return o
}

func (o UserGroupMembershipArrayOutput) ToUserGroupMembershipArrayOutputWithContext(ctx context.Context) UserGroupMembershipArrayOutput {
	return o
}

func (o UserGroupMembershipArrayOutput) Index(i pulumi.IntInput) UserGroupMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserGroupMembership {
		return vs[0].([]*UserGroupMembership)[vs[1].(int)]
	}).(UserGroupMembershipOutput)
}

type UserGroupMembershipMapOutput struct{ *pulumi.OutputState }

func (UserGroupMembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupMembership)(nil)).Elem()
}

func (o UserGroupMembershipMapOutput) ToUserGroupMembershipMapOutput() UserGroupMembershipMapOutput {
	return o
}

func (o UserGroupMembershipMapOutput) ToUserGroupMembershipMapOutputWithContext(ctx context.Context) UserGroupMembershipMapOutput {
	return o
}

func (o UserGroupMembershipMapOutput) MapIndex(k pulumi.StringInput) UserGroupMembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserGroupMembership {
		return vs[0].(map[string]*UserGroupMembership)[vs[1].(string)]
	}).(UserGroupMembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupMembershipInput)(nil)).Elem(), &UserGroupMembership{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupMembershipArrayInput)(nil)).Elem(), UserGroupMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupMembershipMapInput)(nil)).Elem(), UserGroupMembershipMap{})
	pulumi.RegisterOutputType(UserGroupMembershipOutput{})
	pulumi.RegisterOutputType(UserGroupMembershipArrayOutput{})
	pulumi.RegisterOutputType(UserGroupMembershipMapOutput{})
}
