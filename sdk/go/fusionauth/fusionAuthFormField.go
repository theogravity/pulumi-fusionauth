// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fusionauth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/theogravity/pulumi-fusionauth/sdk/v4/go/fusionauth/internal"
)

// ## # Form Field Resource
//
// A FusionAuth Form Field is an object that can be customized to receive input within a FusionAuth Form.
//
// [Form Field API](https://fusionauth.io/docs/v1/tech/apis/form-fields/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/theogravity/pulumi-fusionauth/sdk/v4/go/fusionauth"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fusionauth.NewFusionAuthFormField(ctx, "field", &fusionauth.FusionAuthFormFieldArgs{
//				Confirm: pulumi.Bool(true),
//				Data: pulumi.Map{
//					"leftAddOn": pulumi.Any("send"),
//				},
//				Description: pulumi.String("Information about this custom field"),
//				Key:         pulumi.String("user.firstName"),
//				Required:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FusionAuthFormField struct {
	pulumi.CustomResourceState

	// Determines if the user input should be confirmed by requiring the value to be entered twice. If true, a confirmation field is included.
	Confirm pulumi.BoolPtrOutput `pulumi:"confirm"`
	// The Id of an existing Consent. This field will be required when the type is set to consent.
	ConsentId pulumi.StringPtrOutput `pulumi:"consentId"`
	// The Form Field control
	Control pulumi.StringOutput `pulumi:"control"`
	// An object that can hold any information about the Form Field that should be persisted.
	Data pulumi.MapOutput `pulumi:"data"`
	// A description of the Form Field.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Id to use for the new Form Field. If not specified a secure random UUID will be generated.
	FormFieldId pulumi.StringPtrOutput `pulumi:"formFieldId"`
	// The key is the path to the value in the user or registration object.
	Key pulumi.StringOutput `pulumi:"key"`
	// The unique name of the Form Field.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of options that are applied to checkbox, radio, or select controls.
	Options pulumi.StringArrayOutput `pulumi:"options"`
	// Determines if a value is required to complete the form.
	Required pulumi.BoolPtrOutput `pulumi:"required"`
	// The data type used to store the value in FusionAuth.
	Type      pulumi.StringPtrOutput             `pulumi:"type"`
	Validator FusionAuthFormFieldValidatorOutput `pulumi:"validator"`
}

// NewFusionAuthFormField registers a new resource with the given unique name, arguments, and options.
func NewFusionAuthFormField(ctx *pulumi.Context,
	name string, args *FusionAuthFormFieldArgs, opts ...pulumi.ResourceOption) (*FusionAuthFormField, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FusionAuthFormField
	err := ctx.RegisterResource("fusionauth:index/fusionAuthFormField:FusionAuthFormField", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFusionAuthFormField gets an existing FusionAuthFormField resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFusionAuthFormField(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FusionAuthFormFieldState, opts ...pulumi.ResourceOption) (*FusionAuthFormField, error) {
	var resource FusionAuthFormField
	err := ctx.ReadResource("fusionauth:index/fusionAuthFormField:FusionAuthFormField", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FusionAuthFormField resources.
type fusionAuthFormFieldState struct {
	// Determines if the user input should be confirmed by requiring the value to be entered twice. If true, a confirmation field is included.
	Confirm *bool `pulumi:"confirm"`
	// The Id of an existing Consent. This field will be required when the type is set to consent.
	ConsentId *string `pulumi:"consentId"`
	// The Form Field control
	Control *string `pulumi:"control"`
	// An object that can hold any information about the Form Field that should be persisted.
	Data map[string]interface{} `pulumi:"data"`
	// A description of the Form Field.
	Description *string `pulumi:"description"`
	// The Id to use for the new Form Field. If not specified a secure random UUID will be generated.
	FormFieldId *string `pulumi:"formFieldId"`
	// The key is the path to the value in the user or registration object.
	Key *string `pulumi:"key"`
	// The unique name of the Form Field.
	Name *string `pulumi:"name"`
	// A list of options that are applied to checkbox, radio, or select controls.
	Options []string `pulumi:"options"`
	// Determines if a value is required to complete the form.
	Required *bool `pulumi:"required"`
	// The data type used to store the value in FusionAuth.
	Type      *string                       `pulumi:"type"`
	Validator *FusionAuthFormFieldValidator `pulumi:"validator"`
}

type FusionAuthFormFieldState struct {
	// Determines if the user input should be confirmed by requiring the value to be entered twice. If true, a confirmation field is included.
	Confirm pulumi.BoolPtrInput
	// The Id of an existing Consent. This field will be required when the type is set to consent.
	ConsentId pulumi.StringPtrInput
	// The Form Field control
	Control pulumi.StringPtrInput
	// An object that can hold any information about the Form Field that should be persisted.
	Data pulumi.MapInput
	// A description of the Form Field.
	Description pulumi.StringPtrInput
	// The Id to use for the new Form Field. If not specified a secure random UUID will be generated.
	FormFieldId pulumi.StringPtrInput
	// The key is the path to the value in the user or registration object.
	Key pulumi.StringPtrInput
	// The unique name of the Form Field.
	Name pulumi.StringPtrInput
	// A list of options that are applied to checkbox, radio, or select controls.
	Options pulumi.StringArrayInput
	// Determines if a value is required to complete the form.
	Required pulumi.BoolPtrInput
	// The data type used to store the value in FusionAuth.
	Type      pulumi.StringPtrInput
	Validator FusionAuthFormFieldValidatorPtrInput
}

func (FusionAuthFormFieldState) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthFormFieldState)(nil)).Elem()
}

type fusionAuthFormFieldArgs struct {
	// Determines if the user input should be confirmed by requiring the value to be entered twice. If true, a confirmation field is included.
	Confirm *bool `pulumi:"confirm"`
	// The Id of an existing Consent. This field will be required when the type is set to consent.
	ConsentId *string `pulumi:"consentId"`
	// The Form Field control
	Control *string `pulumi:"control"`
	// An object that can hold any information about the Form Field that should be persisted.
	Data map[string]interface{} `pulumi:"data"`
	// A description of the Form Field.
	Description *string `pulumi:"description"`
	// The Id to use for the new Form Field. If not specified a secure random UUID will be generated.
	FormFieldId *string `pulumi:"formFieldId"`
	// The key is the path to the value in the user or registration object.
	Key string `pulumi:"key"`
	// The unique name of the Form Field.
	Name *string `pulumi:"name"`
	// A list of options that are applied to checkbox, radio, or select controls.
	Options []string `pulumi:"options"`
	// Determines if a value is required to complete the form.
	Required *bool `pulumi:"required"`
	// The data type used to store the value in FusionAuth.
	Type      *string                       `pulumi:"type"`
	Validator *FusionAuthFormFieldValidator `pulumi:"validator"`
}

// The set of arguments for constructing a FusionAuthFormField resource.
type FusionAuthFormFieldArgs struct {
	// Determines if the user input should be confirmed by requiring the value to be entered twice. If true, a confirmation field is included.
	Confirm pulumi.BoolPtrInput
	// The Id of an existing Consent. This field will be required when the type is set to consent.
	ConsentId pulumi.StringPtrInput
	// The Form Field control
	Control pulumi.StringPtrInput
	// An object that can hold any information about the Form Field that should be persisted.
	Data pulumi.MapInput
	// A description of the Form Field.
	Description pulumi.StringPtrInput
	// The Id to use for the new Form Field. If not specified a secure random UUID will be generated.
	FormFieldId pulumi.StringPtrInput
	// The key is the path to the value in the user or registration object.
	Key pulumi.StringInput
	// The unique name of the Form Field.
	Name pulumi.StringPtrInput
	// A list of options that are applied to checkbox, radio, or select controls.
	Options pulumi.StringArrayInput
	// Determines if a value is required to complete the form.
	Required pulumi.BoolPtrInput
	// The data type used to store the value in FusionAuth.
	Type      pulumi.StringPtrInput
	Validator FusionAuthFormFieldValidatorPtrInput
}

func (FusionAuthFormFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthFormFieldArgs)(nil)).Elem()
}

type FusionAuthFormFieldInput interface {
	pulumi.Input

	ToFusionAuthFormFieldOutput() FusionAuthFormFieldOutput
	ToFusionAuthFormFieldOutputWithContext(ctx context.Context) FusionAuthFormFieldOutput
}

func (*FusionAuthFormField) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthFormField)(nil)).Elem()
}

func (i *FusionAuthFormField) ToFusionAuthFormFieldOutput() FusionAuthFormFieldOutput {
	return i.ToFusionAuthFormFieldOutputWithContext(context.Background())
}

func (i *FusionAuthFormField) ToFusionAuthFormFieldOutputWithContext(ctx context.Context) FusionAuthFormFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthFormFieldOutput)
}

// FusionAuthFormFieldArrayInput is an input type that accepts FusionAuthFormFieldArray and FusionAuthFormFieldArrayOutput values.
// You can construct a concrete instance of `FusionAuthFormFieldArrayInput` via:
//
//	FusionAuthFormFieldArray{ FusionAuthFormFieldArgs{...} }
type FusionAuthFormFieldArrayInput interface {
	pulumi.Input

	ToFusionAuthFormFieldArrayOutput() FusionAuthFormFieldArrayOutput
	ToFusionAuthFormFieldArrayOutputWithContext(context.Context) FusionAuthFormFieldArrayOutput
}

type FusionAuthFormFieldArray []FusionAuthFormFieldInput

func (FusionAuthFormFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthFormField)(nil)).Elem()
}

func (i FusionAuthFormFieldArray) ToFusionAuthFormFieldArrayOutput() FusionAuthFormFieldArrayOutput {
	return i.ToFusionAuthFormFieldArrayOutputWithContext(context.Background())
}

func (i FusionAuthFormFieldArray) ToFusionAuthFormFieldArrayOutputWithContext(ctx context.Context) FusionAuthFormFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthFormFieldArrayOutput)
}

// FusionAuthFormFieldMapInput is an input type that accepts FusionAuthFormFieldMap and FusionAuthFormFieldMapOutput values.
// You can construct a concrete instance of `FusionAuthFormFieldMapInput` via:
//
//	FusionAuthFormFieldMap{ "key": FusionAuthFormFieldArgs{...} }
type FusionAuthFormFieldMapInput interface {
	pulumi.Input

	ToFusionAuthFormFieldMapOutput() FusionAuthFormFieldMapOutput
	ToFusionAuthFormFieldMapOutputWithContext(context.Context) FusionAuthFormFieldMapOutput
}

type FusionAuthFormFieldMap map[string]FusionAuthFormFieldInput

func (FusionAuthFormFieldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthFormField)(nil)).Elem()
}

func (i FusionAuthFormFieldMap) ToFusionAuthFormFieldMapOutput() FusionAuthFormFieldMapOutput {
	return i.ToFusionAuthFormFieldMapOutputWithContext(context.Background())
}

func (i FusionAuthFormFieldMap) ToFusionAuthFormFieldMapOutputWithContext(ctx context.Context) FusionAuthFormFieldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthFormFieldMapOutput)
}

type FusionAuthFormFieldOutput struct{ *pulumi.OutputState }

func (FusionAuthFormFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthFormField)(nil)).Elem()
}

func (o FusionAuthFormFieldOutput) ToFusionAuthFormFieldOutput() FusionAuthFormFieldOutput {
	return o
}

func (o FusionAuthFormFieldOutput) ToFusionAuthFormFieldOutputWithContext(ctx context.Context) FusionAuthFormFieldOutput {
	return o
}

// Determines if the user input should be confirmed by requiring the value to be entered twice. If true, a confirmation field is included.
func (o FusionAuthFormFieldOutput) Confirm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FusionAuthFormField) pulumi.BoolPtrOutput { return v.Confirm }).(pulumi.BoolPtrOutput)
}

// The Id of an existing Consent. This field will be required when the type is set to consent.
func (o FusionAuthFormFieldOutput) ConsentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthFormField) pulumi.StringPtrOutput { return v.ConsentId }).(pulumi.StringPtrOutput)
}

// The Form Field control
func (o FusionAuthFormFieldOutput) Control() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthFormField) pulumi.StringOutput { return v.Control }).(pulumi.StringOutput)
}

// An object that can hold any information about the Form Field that should be persisted.
func (o FusionAuthFormFieldOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v *FusionAuthFormField) pulumi.MapOutput { return v.Data }).(pulumi.MapOutput)
}

// A description of the Form Field.
func (o FusionAuthFormFieldOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthFormField) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Id to use for the new Form Field. If not specified a secure random UUID will be generated.
func (o FusionAuthFormFieldOutput) FormFieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthFormField) pulumi.StringPtrOutput { return v.FormFieldId }).(pulumi.StringPtrOutput)
}

// The key is the path to the value in the user or registration object.
func (o FusionAuthFormFieldOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthFormField) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The unique name of the Form Field.
func (o FusionAuthFormFieldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthFormField) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of options that are applied to checkbox, radio, or select controls.
func (o FusionAuthFormFieldOutput) Options() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FusionAuthFormField) pulumi.StringArrayOutput { return v.Options }).(pulumi.StringArrayOutput)
}

// Determines if a value is required to complete the form.
func (o FusionAuthFormFieldOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FusionAuthFormField) pulumi.BoolPtrOutput { return v.Required }).(pulumi.BoolPtrOutput)
}

// The data type used to store the value in FusionAuth.
func (o FusionAuthFormFieldOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthFormField) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o FusionAuthFormFieldOutput) Validator() FusionAuthFormFieldValidatorOutput {
	return o.ApplyT(func(v *FusionAuthFormField) FusionAuthFormFieldValidatorOutput { return v.Validator }).(FusionAuthFormFieldValidatorOutput)
}

type FusionAuthFormFieldArrayOutput struct{ *pulumi.OutputState }

func (FusionAuthFormFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthFormField)(nil)).Elem()
}

func (o FusionAuthFormFieldArrayOutput) ToFusionAuthFormFieldArrayOutput() FusionAuthFormFieldArrayOutput {
	return o
}

func (o FusionAuthFormFieldArrayOutput) ToFusionAuthFormFieldArrayOutputWithContext(ctx context.Context) FusionAuthFormFieldArrayOutput {
	return o
}

func (o FusionAuthFormFieldArrayOutput) Index(i pulumi.IntInput) FusionAuthFormFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FusionAuthFormField {
		return vs[0].([]*FusionAuthFormField)[vs[1].(int)]
	}).(FusionAuthFormFieldOutput)
}

type FusionAuthFormFieldMapOutput struct{ *pulumi.OutputState }

func (FusionAuthFormFieldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthFormField)(nil)).Elem()
}

func (o FusionAuthFormFieldMapOutput) ToFusionAuthFormFieldMapOutput() FusionAuthFormFieldMapOutput {
	return o
}

func (o FusionAuthFormFieldMapOutput) ToFusionAuthFormFieldMapOutputWithContext(ctx context.Context) FusionAuthFormFieldMapOutput {
	return o
}

func (o FusionAuthFormFieldMapOutput) MapIndex(k pulumi.StringInput) FusionAuthFormFieldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FusionAuthFormField {
		return vs[0].(map[string]*FusionAuthFormField)[vs[1].(string)]
	}).(FusionAuthFormFieldOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthFormFieldInput)(nil)).Elem(), &FusionAuthFormField{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthFormFieldArrayInput)(nil)).Elem(), FusionAuthFormFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthFormFieldMapInput)(nil)).Elem(), FusionAuthFormFieldMap{})
	pulumi.RegisterOutputType(FusionAuthFormFieldOutput{})
	pulumi.RegisterOutputType(FusionAuthFormFieldArrayOutput{})
	pulumi.RegisterOutputType(FusionAuthFormFieldMapOutput{})
}
