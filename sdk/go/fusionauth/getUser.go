// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fusionauth

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # User Data Source
//
// This data source can be used to fetch information about a specific user.
//
// [Users API](https://fusionauth.io/docs/v1/tech/apis/users)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/theogravity/pulumi-fusionauth/sdk/v2/go/fusionauth"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fusionauth.GetUser(ctx, &fusionauth.GetUserArgs{
//				Username: pulumi.StringRef("foo@example.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetUser(ctx *pulumi.Context, args *GetUserArgs, opts ...pulumi.InvokeOption) (*GetUserResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetUserResult
	err := ctx.Invoke("fusionauth:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type GetUserArgs struct {
	// The Id of the tenant used to scope this API request.
	TenantId *string `pulumi:"tenantId"`
	// The Id of the user. Either `userId` or `username` must be specified.
	UserId *string `pulumi:"userId"`
	// The username of the user. Either `userId` or `username` must be specified.
	Username *string `pulumi:"username"`
}

// A collection of values returned by getUser.
type GetUserResult struct {
	// True if the user is active. False if the user has been deactivated. Deactivated users will not be able to login.
	Active bool `pulumi:"active"`
	// An ISO-8601 formatted date of the user’s birthdate such as YYYY-MM-DD.
	BirthDate string `pulumi:"birthDate"`
	// A JSON serialised string that can hold any information about the user.
	Data string `pulumi:"data"`
	// The user’s email address.
	Email string `pulumi:"email"`
	// The expiration instant of the user’s account. An expired user is not permitted to login.
	Expiry int `pulumi:"expiry"`
	// The first name of the user.
	FirstName string `pulumi:"firstName"`
	// The user’s full name.
	FullName string `pulumi:"fullName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The URL that points to an image file that is the user’s profile image.
	ImageUrl string `pulumi:"imageUrl"`
	// The user’s last name.
	LastName string `pulumi:"lastName"`
	// The user’s middle name.
	MiddleName string `pulumi:"middleName"`
	// The user’s mobile phone number.
	MobilePhone string `pulumi:"mobilePhone"`
	// The email address of the user’s parent or guardian.
	ParentEmail string `pulumi:"parentEmail"`
	// Indicates that the user’s password needs to be changed during their next login attempt.
	PasswordChangeRequired bool `pulumi:"passwordChangeRequired"`
	// An array of locale strings that give, in order, the user’s preferred languages.
	PreferredLanguages []string `pulumi:"preferredLanguages"`
	TenantId           string   `pulumi:"tenantId"`
	// The user’s preferred timezone.
	Timezone string `pulumi:"timezone"`
	UserId   string `pulumi:"userId"`
	Username string `pulumi:"username"`
	// The current status of the username. This is used if you are moderating usernames via CleanSpeak.
	UsernameStatus string `pulumi:"usernameStatus"`
}

func GetUserOutput(ctx *pulumi.Context, args GetUserOutputArgs, opts ...pulumi.InvokeOption) GetUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUserResult, error) {
			args := v.(GetUserArgs)
			r, err := GetUser(ctx, &args, opts...)
			var s GetUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUserResultOutput)
}

// A collection of arguments for invoking getUser.
type GetUserOutputArgs struct {
	// The Id of the tenant used to scope this API request.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The Id of the user. Either `userId` or `username` must be specified.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
	// The username of the user. Either `userId` or `username` must be specified.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type GetUserResultOutput struct{ *pulumi.OutputState }

func (GetUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserResult)(nil)).Elem()
}

func (o GetUserResultOutput) ToGetUserResultOutput() GetUserResultOutput {
	return o
}

func (o GetUserResultOutput) ToGetUserResultOutputWithContext(ctx context.Context) GetUserResultOutput {
	return o
}

// True if the user is active. False if the user has been deactivated. Deactivated users will not be able to login.
func (o GetUserResultOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserResult) bool { return v.Active }).(pulumi.BoolOutput)
}

// An ISO-8601 formatted date of the user’s birthdate such as YYYY-MM-DD.
func (o GetUserResultOutput) BirthDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.BirthDate }).(pulumi.StringOutput)
}

// A JSON serialised string that can hold any information about the user.
func (o GetUserResultOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.Data }).(pulumi.StringOutput)
}

// The user’s email address.
func (o GetUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.Email }).(pulumi.StringOutput)
}

// The expiration instant of the user’s account. An expired user is not permitted to login.
func (o GetUserResultOutput) Expiry() pulumi.IntOutput {
	return o.ApplyT(func(v GetUserResult) int { return v.Expiry }).(pulumi.IntOutput)
}

// The first name of the user.
func (o GetUserResultOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.FirstName }).(pulumi.StringOutput)
}

// The user’s full name.
func (o GetUserResultOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.FullName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The URL that points to an image file that is the user’s profile image.
func (o GetUserResultOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.ImageUrl }).(pulumi.StringOutput)
}

// The user’s last name.
func (o GetUserResultOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.LastName }).(pulumi.StringOutput)
}

// The user’s middle name.
func (o GetUserResultOutput) MiddleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.MiddleName }).(pulumi.StringOutput)
}

// The user’s mobile phone number.
func (o GetUserResultOutput) MobilePhone() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.MobilePhone }).(pulumi.StringOutput)
}

// The email address of the user’s parent or guardian.
func (o GetUserResultOutput) ParentEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.ParentEmail }).(pulumi.StringOutput)
}

// Indicates that the user’s password needs to be changed during their next login attempt.
func (o GetUserResultOutput) PasswordChangeRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserResult) bool { return v.PasswordChangeRequired }).(pulumi.BoolOutput)
}

// An array of locale strings that give, in order, the user’s preferred languages.
func (o GetUserResultOutput) PreferredLanguages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserResult) []string { return v.PreferredLanguages }).(pulumi.StringArrayOutput)
}

func (o GetUserResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.TenantId }).(pulumi.StringOutput)
}

// The user’s preferred timezone.
func (o GetUserResultOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.Timezone }).(pulumi.StringOutput)
}

func (o GetUserResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.UserId }).(pulumi.StringOutput)
}

func (o GetUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.Username }).(pulumi.StringOutput)
}

// The current status of the username. This is used if you are moderating usernames via CleanSpeak.
func (o GetUserResultOutput) UsernameStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.UsernameStatus }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUserResultOutput{})
}
