// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fusionauth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Xbox Identity Provider Resource
//
// The Xbox identity provider type will use the Xbox OAuth v2.0 login API. It will also provide a Login with Xbox button on FusionAuth’s login page that will direct a user to the Xbox login page.
//
// This identity provider will call Xbox’s API to load the user’s email and gtg (Gamer Tag) and use those as email and username to lookup or create a user in FusionAuth depending on the linking strategy configured for this identity provider. Additional claims returned by Xbox can be used to reconcile the user to FusionAuth by using an Xbox Reconcile Lambda.
//
// FusionAuth will also store the Xbox refreshToken returned from the Xbox API in the link between the user and the identity provider. This token can be used by an application to make further requests to Xbox APIs on behalf of the user.
//
// [Xbox Identity Provider APIs](https://fusionauth.io/docs/v1/tech/apis/identity-providers/xbox/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/theogravity/pulumi-fusionauth/sdk/v3/go/fusionauth"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fusionauth.NewFusionAuthIdpXBox(ctx, "xbox", &fusionauth.FusionAuthIdpXBoxArgs{
//				ApplicationConfigurations: fusionauth.FusionAuthIdpXBoxApplicationConfigurationArray{
//					&fusionauth.FusionAuthIdpXBoxApplicationConfigurationArgs{
//						ApplicationId:      pulumi.Any(fusionauth_application.GPS_Insight.Id),
//						CreateRegistration: pulumi.Bool(true),
//						Enabled:            pulumi.Bool(true),
//					},
//				},
//				ButtonText:   pulumi.String("Login with Xbox"),
//				ClientId:     pulumi.String("0eb1ce3c-2fb1-4ae9-b361-d49fc6e764cc"),
//				ClientSecret: pulumi.String("693s000cbn66k0mxtqzr_c_NfLy3~6_SEA"),
//				Scope:        pulumi.String("Xboxlive.signin Xboxlive.offline_access"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FusionAuthIdpXBox struct {
	pulumi.CustomResourceState

	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpXBoxApplicationConfigurationArrayOutput `pulumi:"applicationConfigurations"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringOutput `pulumi:"buttonText"`
	// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug pulumi.BoolPtrOutput `pulumi:"debug"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId pulumi.StringPtrOutput `pulumi:"idpId"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringPtrOutput `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy pulumi.StringOutput `pulumi:"linkingStrategy"`
	// The top-level scope that you are requesting from Xbox.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpXBoxTenantConfigurationArrayOutput `pulumi:"tenantConfigurations"`
}

// NewFusionAuthIdpXBox registers a new resource with the given unique name, arguments, and options.
func NewFusionAuthIdpXBox(ctx *pulumi.Context,
	name string, args *FusionAuthIdpXBoxArgs, opts ...pulumi.ResourceOption) (*FusionAuthIdpXBox, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ButtonText == nil {
		return nil, errors.New("invalid value for required argument 'ButtonText'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FusionAuthIdpXBox
	err := ctx.RegisterResource("fusionauth:index/fusionAuthIdpXBox:FusionAuthIdpXBox", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFusionAuthIdpXBox gets an existing FusionAuthIdpXBox resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFusionAuthIdpXBox(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FusionAuthIdpXBoxState, opts ...pulumi.ResourceOption) (*FusionAuthIdpXBox, error) {
	var resource FusionAuthIdpXBox
	err := ctx.ReadResource("fusionauth:index/fusionAuthIdpXBox:FusionAuthIdpXBox", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FusionAuthIdpXBox resources.
type fusionAuthIdpXBoxState struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations []FusionAuthIdpXBoxApplicationConfiguration `pulumi:"applicationConfigurations"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText *string `pulumi:"buttonText"`
	// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientId *string `pulumi:"clientId"`
	// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientSecret *string `pulumi:"clientSecret"`
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug *bool `pulumi:"debug"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled *bool `pulumi:"enabled"`
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId *string `pulumi:"idpId"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId *string `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy *string `pulumi:"linkingStrategy"`
	// The top-level scope that you are requesting from Xbox.
	Scope *string `pulumi:"scope"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations []FusionAuthIdpXBoxTenantConfiguration `pulumi:"tenantConfigurations"`
}

type FusionAuthIdpXBoxState struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpXBoxApplicationConfigurationArrayInput
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringPtrInput
	// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientId pulumi.StringPtrInput
	// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientSecret pulumi.StringPtrInput
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug pulumi.BoolPtrInput
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrInput
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId pulumi.StringPtrInput
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringPtrInput
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy pulumi.StringPtrInput
	// The top-level scope that you are requesting from Xbox.
	Scope pulumi.StringPtrInput
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpXBoxTenantConfigurationArrayInput
}

func (FusionAuthIdpXBoxState) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthIdpXBoxState)(nil)).Elem()
}

type fusionAuthIdpXBoxArgs struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations []FusionAuthIdpXBoxApplicationConfiguration `pulumi:"applicationConfigurations"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText string `pulumi:"buttonText"`
	// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientId string `pulumi:"clientId"`
	// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientSecret string `pulumi:"clientSecret"`
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug *bool `pulumi:"debug"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled *bool `pulumi:"enabled"`
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId *string `pulumi:"idpId"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId *string `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy *string `pulumi:"linkingStrategy"`
	// The top-level scope that you are requesting from Xbox.
	Scope *string `pulumi:"scope"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations []FusionAuthIdpXBoxTenantConfiguration `pulumi:"tenantConfigurations"`
}

// The set of arguments for constructing a FusionAuthIdpXBox resource.
type FusionAuthIdpXBoxArgs struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpXBoxApplicationConfigurationArrayInput
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringInput
	// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientId pulumi.StringInput
	// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientSecret pulumi.StringInput
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug pulumi.BoolPtrInput
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrInput
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId pulumi.StringPtrInput
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringPtrInput
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy pulumi.StringPtrInput
	// The top-level scope that you are requesting from Xbox.
	Scope pulumi.StringPtrInput
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpXBoxTenantConfigurationArrayInput
}

func (FusionAuthIdpXBoxArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthIdpXBoxArgs)(nil)).Elem()
}

type FusionAuthIdpXBoxInput interface {
	pulumi.Input

	ToFusionAuthIdpXBoxOutput() FusionAuthIdpXBoxOutput
	ToFusionAuthIdpXBoxOutputWithContext(ctx context.Context) FusionAuthIdpXBoxOutput
}

func (*FusionAuthIdpXBox) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthIdpXBox)(nil)).Elem()
}

func (i *FusionAuthIdpXBox) ToFusionAuthIdpXBoxOutput() FusionAuthIdpXBoxOutput {
	return i.ToFusionAuthIdpXBoxOutputWithContext(context.Background())
}

func (i *FusionAuthIdpXBox) ToFusionAuthIdpXBoxOutputWithContext(ctx context.Context) FusionAuthIdpXBoxOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpXBoxOutput)
}

// FusionAuthIdpXBoxArrayInput is an input type that accepts FusionAuthIdpXBoxArray and FusionAuthIdpXBoxArrayOutput values.
// You can construct a concrete instance of `FusionAuthIdpXBoxArrayInput` via:
//
//	FusionAuthIdpXBoxArray{ FusionAuthIdpXBoxArgs{...} }
type FusionAuthIdpXBoxArrayInput interface {
	pulumi.Input

	ToFusionAuthIdpXBoxArrayOutput() FusionAuthIdpXBoxArrayOutput
	ToFusionAuthIdpXBoxArrayOutputWithContext(context.Context) FusionAuthIdpXBoxArrayOutput
}

type FusionAuthIdpXBoxArray []FusionAuthIdpXBoxInput

func (FusionAuthIdpXBoxArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthIdpXBox)(nil)).Elem()
}

func (i FusionAuthIdpXBoxArray) ToFusionAuthIdpXBoxArrayOutput() FusionAuthIdpXBoxArrayOutput {
	return i.ToFusionAuthIdpXBoxArrayOutputWithContext(context.Background())
}

func (i FusionAuthIdpXBoxArray) ToFusionAuthIdpXBoxArrayOutputWithContext(ctx context.Context) FusionAuthIdpXBoxArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpXBoxArrayOutput)
}

// FusionAuthIdpXBoxMapInput is an input type that accepts FusionAuthIdpXBoxMap and FusionAuthIdpXBoxMapOutput values.
// You can construct a concrete instance of `FusionAuthIdpXBoxMapInput` via:
//
//	FusionAuthIdpXBoxMap{ "key": FusionAuthIdpXBoxArgs{...} }
type FusionAuthIdpXBoxMapInput interface {
	pulumi.Input

	ToFusionAuthIdpXBoxMapOutput() FusionAuthIdpXBoxMapOutput
	ToFusionAuthIdpXBoxMapOutputWithContext(context.Context) FusionAuthIdpXBoxMapOutput
}

type FusionAuthIdpXBoxMap map[string]FusionAuthIdpXBoxInput

func (FusionAuthIdpXBoxMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthIdpXBox)(nil)).Elem()
}

func (i FusionAuthIdpXBoxMap) ToFusionAuthIdpXBoxMapOutput() FusionAuthIdpXBoxMapOutput {
	return i.ToFusionAuthIdpXBoxMapOutputWithContext(context.Background())
}

func (i FusionAuthIdpXBoxMap) ToFusionAuthIdpXBoxMapOutputWithContext(ctx context.Context) FusionAuthIdpXBoxMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpXBoxMapOutput)
}

type FusionAuthIdpXBoxOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpXBoxOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthIdpXBox)(nil)).Elem()
}

func (o FusionAuthIdpXBoxOutput) ToFusionAuthIdpXBoxOutput() FusionAuthIdpXBoxOutput {
	return o
}

func (o FusionAuthIdpXBoxOutput) ToFusionAuthIdpXBoxOutputWithContext(ctx context.Context) FusionAuthIdpXBoxOutput {
	return o
}

// The configuration for each Application that the identity provider is enabled for.
func (o FusionAuthIdpXBoxOutput) ApplicationConfigurations() FusionAuthIdpXBoxApplicationConfigurationArrayOutput {
	return o.ApplyT(func(v *FusionAuthIdpXBox) FusionAuthIdpXBoxApplicationConfigurationArrayOutput {
		return v.ApplicationConfigurations
	}).(FusionAuthIdpXBoxApplicationConfigurationArrayOutput)
}

// The top-level button text to use on the FusionAuth login page for this Identity Provider.
func (o FusionAuthIdpXBoxOutput) ButtonText() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpXBox) pulumi.StringOutput { return v.ButtonText }).(pulumi.StringOutput)
}

// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
func (o FusionAuthIdpXBoxOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpXBox) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
func (o FusionAuthIdpXBoxOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpXBox) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
func (o FusionAuthIdpXBoxOutput) Debug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpXBox) pulumi.BoolPtrOutput { return v.Debug }).(pulumi.BoolPtrOutput)
}

// Determines if this provider is enabled. If it is false then it will be disabled globally.
func (o FusionAuthIdpXBoxOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpXBox) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
func (o FusionAuthIdpXBoxOutput) IdpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpXBox) pulumi.StringPtrOutput { return v.IdpId }).(pulumi.StringPtrOutput)
}

// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
func (o FusionAuthIdpXBoxOutput) LambdaReconcileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpXBox) pulumi.StringPtrOutput { return v.LambdaReconcileId }).(pulumi.StringPtrOutput)
}

// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
func (o FusionAuthIdpXBoxOutput) LinkingStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpXBox) pulumi.StringOutput { return v.LinkingStrategy }).(pulumi.StringOutput)
}

// The top-level scope that you are requesting from Xbox.
func (o FusionAuthIdpXBoxOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpXBox) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
func (o FusionAuthIdpXBoxOutput) TenantConfigurations() FusionAuthIdpXBoxTenantConfigurationArrayOutput {
	return o.ApplyT(func(v *FusionAuthIdpXBox) FusionAuthIdpXBoxTenantConfigurationArrayOutput {
		return v.TenantConfigurations
	}).(FusionAuthIdpXBoxTenantConfigurationArrayOutput)
}

type FusionAuthIdpXBoxArrayOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpXBoxArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthIdpXBox)(nil)).Elem()
}

func (o FusionAuthIdpXBoxArrayOutput) ToFusionAuthIdpXBoxArrayOutput() FusionAuthIdpXBoxArrayOutput {
	return o
}

func (o FusionAuthIdpXBoxArrayOutput) ToFusionAuthIdpXBoxArrayOutputWithContext(ctx context.Context) FusionAuthIdpXBoxArrayOutput {
	return o
}

func (o FusionAuthIdpXBoxArrayOutput) Index(i pulumi.IntInput) FusionAuthIdpXBoxOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FusionAuthIdpXBox {
		return vs[0].([]*FusionAuthIdpXBox)[vs[1].(int)]
	}).(FusionAuthIdpXBoxOutput)
}

type FusionAuthIdpXBoxMapOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpXBoxMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthIdpXBox)(nil)).Elem()
}

func (o FusionAuthIdpXBoxMapOutput) ToFusionAuthIdpXBoxMapOutput() FusionAuthIdpXBoxMapOutput {
	return o
}

func (o FusionAuthIdpXBoxMapOutput) ToFusionAuthIdpXBoxMapOutputWithContext(ctx context.Context) FusionAuthIdpXBoxMapOutput {
	return o
}

func (o FusionAuthIdpXBoxMapOutput) MapIndex(k pulumi.StringInput) FusionAuthIdpXBoxOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FusionAuthIdpXBox {
		return vs[0].(map[string]*FusionAuthIdpXBox)[vs[1].(string)]
	}).(FusionAuthIdpXBoxOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpXBoxInput)(nil)).Elem(), &FusionAuthIdpXBox{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpXBoxArrayInput)(nil)).Elem(), FusionAuthIdpXBoxArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpXBoxMapInput)(nil)).Elem(), FusionAuthIdpXBoxMap{})
	pulumi.RegisterOutputType(FusionAuthIdpXBoxOutput{})
	pulumi.RegisterOutputType(FusionAuthIdpXBoxArrayOutput{})
	pulumi.RegisterOutputType(FusionAuthIdpXBoxMapOutput{})
}
