// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fusionauth

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Imported Key Resource
//
// Cryptographic keys are used in signing and verifying JWTs and verifying responses for third party identity providers. It is more likely you will interact with keys using the FusionAuth UI in the Key Master menu.
//
// [Keys API](https://fusionauth.io/docs/v1/tech/apis/keys)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/theogravity/pulumi-fusionauth/sdk/v3/go/fusionauth"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fusionauth.NewFusionAuthImportedKey(ctx, "name", &fusionauth.FusionAuthImportedKeyArgs{
//				Kid:        pulumi.String("8675309"),
//				PrivateKey: readFileOrPanic("./AuthKey_8675309.p8"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FusionAuthImportedKey struct {
	pulumi.CustomResourceState

	// The algorithm used to encrypt the Key. The following values represent algorithms supported by FusionAuth:
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// The certificate to import. The publicKey will be extracted from the certificate.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// The Id to use for the new key. If not specified a secure random UUID will be generated.
	KeyId pulumi.StringPtrOutput `pulumi:"keyId"`
	// The Key identifier 'kid'.
	Kid pulumi.StringOutput `pulumi:"kid"`
	// The name of the Key.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Key private key. Optional if importing an RSA or EC key. If the key is only to be used for token validation, only a public key is necessary and this field may be omitted.
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// "The Key public key. Required if importing an RSA or EC key and a certificate is not provided."
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// The Key secret. This field is required if importing an HMAC key type.
	Secret pulumi.StringPtrOutput `pulumi:"secret"`
	// The Key type. This field is required if importing an HMAC key type, or if importing a public key / private key pair. The possible values are:
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFusionAuthImportedKey registers a new resource with the given unique name, arguments, and options.
func NewFusionAuthImportedKey(ctx *pulumi.Context,
	name string, args *FusionAuthImportedKeyArgs, opts ...pulumi.ResourceOption) (*FusionAuthImportedKey, error) {
	if args == nil {
		args = &FusionAuthImportedKeyArgs{}
	}

	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	if args.Secret != nil {
		args.Secret = pulumi.ToSecret(args.Secret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
		"secret",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource FusionAuthImportedKey
	err := ctx.RegisterResource("fusionauth:index/fusionAuthImportedKey:FusionAuthImportedKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFusionAuthImportedKey gets an existing FusionAuthImportedKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFusionAuthImportedKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FusionAuthImportedKeyState, opts ...pulumi.ResourceOption) (*FusionAuthImportedKey, error) {
	var resource FusionAuthImportedKey
	err := ctx.ReadResource("fusionauth:index/fusionAuthImportedKey:FusionAuthImportedKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FusionAuthImportedKey resources.
type fusionAuthImportedKeyState struct {
	// The algorithm used to encrypt the Key. The following values represent algorithms supported by FusionAuth:
	Algorithm *string `pulumi:"algorithm"`
	// The certificate to import. The publicKey will be extracted from the certificate.
	Certificate *string `pulumi:"certificate"`
	// The Id to use for the new key. If not specified a secure random UUID will be generated.
	KeyId *string `pulumi:"keyId"`
	// The Key identifier 'kid'.
	Kid *string `pulumi:"kid"`
	// The name of the Key.
	Name *string `pulumi:"name"`
	// The Key private key. Optional if importing an RSA or EC key. If the key is only to be used for token validation, only a public key is necessary and this field may be omitted.
	PrivateKey *string `pulumi:"privateKey"`
	// "The Key public key. Required if importing an RSA or EC key and a certificate is not provided."
	PublicKey *string `pulumi:"publicKey"`
	// The Key secret. This field is required if importing an HMAC key type.
	Secret *string `pulumi:"secret"`
	// The Key type. This field is required if importing an HMAC key type, or if importing a public key / private key pair. The possible values are:
	Type *string `pulumi:"type"`
}

type FusionAuthImportedKeyState struct {
	// The algorithm used to encrypt the Key. The following values represent algorithms supported by FusionAuth:
	Algorithm pulumi.StringPtrInput
	// The certificate to import. The publicKey will be extracted from the certificate.
	Certificate pulumi.StringPtrInput
	// The Id to use for the new key. If not specified a secure random UUID will be generated.
	KeyId pulumi.StringPtrInput
	// The Key identifier 'kid'.
	Kid pulumi.StringPtrInput
	// The name of the Key.
	Name pulumi.StringPtrInput
	// The Key private key. Optional if importing an RSA or EC key. If the key is only to be used for token validation, only a public key is necessary and this field may be omitted.
	PrivateKey pulumi.StringPtrInput
	// "The Key public key. Required if importing an RSA or EC key and a certificate is not provided."
	PublicKey pulumi.StringPtrInput
	// The Key secret. This field is required if importing an HMAC key type.
	Secret pulumi.StringPtrInput
	// The Key type. This field is required if importing an HMAC key type, or if importing a public key / private key pair. The possible values are:
	Type pulumi.StringPtrInput
}

func (FusionAuthImportedKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthImportedKeyState)(nil)).Elem()
}

type fusionAuthImportedKeyArgs struct {
	// The algorithm used to encrypt the Key. The following values represent algorithms supported by FusionAuth:
	Algorithm *string `pulumi:"algorithm"`
	// The certificate to import. The publicKey will be extracted from the certificate.
	Certificate *string `pulumi:"certificate"`
	// The Id to use for the new key. If not specified a secure random UUID will be generated.
	KeyId *string `pulumi:"keyId"`
	// The Key identifier 'kid'.
	Kid *string `pulumi:"kid"`
	// The name of the Key.
	Name *string `pulumi:"name"`
	// The Key private key. Optional if importing an RSA or EC key. If the key is only to be used for token validation, only a public key is necessary and this field may be omitted.
	PrivateKey *string `pulumi:"privateKey"`
	// "The Key public key. Required if importing an RSA or EC key and a certificate is not provided."
	PublicKey *string `pulumi:"publicKey"`
	// The Key secret. This field is required if importing an HMAC key type.
	Secret *string `pulumi:"secret"`
	// The Key type. This field is required if importing an HMAC key type, or if importing a public key / private key pair. The possible values are:
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a FusionAuthImportedKey resource.
type FusionAuthImportedKeyArgs struct {
	// The algorithm used to encrypt the Key. The following values represent algorithms supported by FusionAuth:
	Algorithm pulumi.StringPtrInput
	// The certificate to import. The publicKey will be extracted from the certificate.
	Certificate pulumi.StringPtrInput
	// The Id to use for the new key. If not specified a secure random UUID will be generated.
	KeyId pulumi.StringPtrInput
	// The Key identifier 'kid'.
	Kid pulumi.StringPtrInput
	// The name of the Key.
	Name pulumi.StringPtrInput
	// The Key private key. Optional if importing an RSA or EC key. If the key is only to be used for token validation, only a public key is necessary and this field may be omitted.
	PrivateKey pulumi.StringPtrInput
	// "The Key public key. Required if importing an RSA or EC key and a certificate is not provided."
	PublicKey pulumi.StringPtrInput
	// The Key secret. This field is required if importing an HMAC key type.
	Secret pulumi.StringPtrInput
	// The Key type. This field is required if importing an HMAC key type, or if importing a public key / private key pair. The possible values are:
	Type pulumi.StringPtrInput
}

func (FusionAuthImportedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthImportedKeyArgs)(nil)).Elem()
}

type FusionAuthImportedKeyInput interface {
	pulumi.Input

	ToFusionAuthImportedKeyOutput() FusionAuthImportedKeyOutput
	ToFusionAuthImportedKeyOutputWithContext(ctx context.Context) FusionAuthImportedKeyOutput
}

func (*FusionAuthImportedKey) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthImportedKey)(nil)).Elem()
}

func (i *FusionAuthImportedKey) ToFusionAuthImportedKeyOutput() FusionAuthImportedKeyOutput {
	return i.ToFusionAuthImportedKeyOutputWithContext(context.Background())
}

func (i *FusionAuthImportedKey) ToFusionAuthImportedKeyOutputWithContext(ctx context.Context) FusionAuthImportedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthImportedKeyOutput)
}

// FusionAuthImportedKeyArrayInput is an input type that accepts FusionAuthImportedKeyArray and FusionAuthImportedKeyArrayOutput values.
// You can construct a concrete instance of `FusionAuthImportedKeyArrayInput` via:
//
//	FusionAuthImportedKeyArray{ FusionAuthImportedKeyArgs{...} }
type FusionAuthImportedKeyArrayInput interface {
	pulumi.Input

	ToFusionAuthImportedKeyArrayOutput() FusionAuthImportedKeyArrayOutput
	ToFusionAuthImportedKeyArrayOutputWithContext(context.Context) FusionAuthImportedKeyArrayOutput
}

type FusionAuthImportedKeyArray []FusionAuthImportedKeyInput

func (FusionAuthImportedKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthImportedKey)(nil)).Elem()
}

func (i FusionAuthImportedKeyArray) ToFusionAuthImportedKeyArrayOutput() FusionAuthImportedKeyArrayOutput {
	return i.ToFusionAuthImportedKeyArrayOutputWithContext(context.Background())
}

func (i FusionAuthImportedKeyArray) ToFusionAuthImportedKeyArrayOutputWithContext(ctx context.Context) FusionAuthImportedKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthImportedKeyArrayOutput)
}

// FusionAuthImportedKeyMapInput is an input type that accepts FusionAuthImportedKeyMap and FusionAuthImportedKeyMapOutput values.
// You can construct a concrete instance of `FusionAuthImportedKeyMapInput` via:
//
//	FusionAuthImportedKeyMap{ "key": FusionAuthImportedKeyArgs{...} }
type FusionAuthImportedKeyMapInput interface {
	pulumi.Input

	ToFusionAuthImportedKeyMapOutput() FusionAuthImportedKeyMapOutput
	ToFusionAuthImportedKeyMapOutputWithContext(context.Context) FusionAuthImportedKeyMapOutput
}

type FusionAuthImportedKeyMap map[string]FusionAuthImportedKeyInput

func (FusionAuthImportedKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthImportedKey)(nil)).Elem()
}

func (i FusionAuthImportedKeyMap) ToFusionAuthImportedKeyMapOutput() FusionAuthImportedKeyMapOutput {
	return i.ToFusionAuthImportedKeyMapOutputWithContext(context.Background())
}

func (i FusionAuthImportedKeyMap) ToFusionAuthImportedKeyMapOutputWithContext(ctx context.Context) FusionAuthImportedKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthImportedKeyMapOutput)
}

type FusionAuthImportedKeyOutput struct{ *pulumi.OutputState }

func (FusionAuthImportedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthImportedKey)(nil)).Elem()
}

func (o FusionAuthImportedKeyOutput) ToFusionAuthImportedKeyOutput() FusionAuthImportedKeyOutput {
	return o
}

func (o FusionAuthImportedKeyOutput) ToFusionAuthImportedKeyOutputWithContext(ctx context.Context) FusionAuthImportedKeyOutput {
	return o
}

// The algorithm used to encrypt the Key. The following values represent algorithms supported by FusionAuth:
func (o FusionAuthImportedKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthImportedKey) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

// The certificate to import. The publicKey will be extracted from the certificate.
func (o FusionAuthImportedKeyOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthImportedKey) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// The Id to use for the new key. If not specified a secure random UUID will be generated.
func (o FusionAuthImportedKeyOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthImportedKey) pulumi.StringPtrOutput { return v.KeyId }).(pulumi.StringPtrOutput)
}

// The Key identifier 'kid'.
func (o FusionAuthImportedKeyOutput) Kid() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthImportedKey) pulumi.StringOutput { return v.Kid }).(pulumi.StringOutput)
}

// The name of the Key.
func (o FusionAuthImportedKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthImportedKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Key private key. Optional if importing an RSA or EC key. If the key is only to be used for token validation, only a public key is necessary and this field may be omitted.
func (o FusionAuthImportedKeyOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthImportedKey) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// "The Key public key. Required if importing an RSA or EC key and a certificate is not provided."
func (o FusionAuthImportedKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthImportedKey) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// The Key secret. This field is required if importing an HMAC key type.
func (o FusionAuthImportedKeyOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthImportedKey) pulumi.StringPtrOutput { return v.Secret }).(pulumi.StringPtrOutput)
}

// The Key type. This field is required if importing an HMAC key type, or if importing a public key / private key pair. The possible values are:
func (o FusionAuthImportedKeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthImportedKey) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type FusionAuthImportedKeyArrayOutput struct{ *pulumi.OutputState }

func (FusionAuthImportedKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthImportedKey)(nil)).Elem()
}

func (o FusionAuthImportedKeyArrayOutput) ToFusionAuthImportedKeyArrayOutput() FusionAuthImportedKeyArrayOutput {
	return o
}

func (o FusionAuthImportedKeyArrayOutput) ToFusionAuthImportedKeyArrayOutputWithContext(ctx context.Context) FusionAuthImportedKeyArrayOutput {
	return o
}

func (o FusionAuthImportedKeyArrayOutput) Index(i pulumi.IntInput) FusionAuthImportedKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FusionAuthImportedKey {
		return vs[0].([]*FusionAuthImportedKey)[vs[1].(int)]
	}).(FusionAuthImportedKeyOutput)
}

type FusionAuthImportedKeyMapOutput struct{ *pulumi.OutputState }

func (FusionAuthImportedKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthImportedKey)(nil)).Elem()
}

func (o FusionAuthImportedKeyMapOutput) ToFusionAuthImportedKeyMapOutput() FusionAuthImportedKeyMapOutput {
	return o
}

func (o FusionAuthImportedKeyMapOutput) ToFusionAuthImportedKeyMapOutputWithContext(ctx context.Context) FusionAuthImportedKeyMapOutput {
	return o
}

func (o FusionAuthImportedKeyMapOutput) MapIndex(k pulumi.StringInput) FusionAuthImportedKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FusionAuthImportedKey {
		return vs[0].(map[string]*FusionAuthImportedKey)[vs[1].(string)]
	}).(FusionAuthImportedKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthImportedKeyInput)(nil)).Elem(), &FusionAuthImportedKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthImportedKeyArrayInput)(nil)).Elem(), FusionAuthImportedKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthImportedKeyMapInput)(nil)).Elem(), FusionAuthImportedKeyMap{})
	pulumi.RegisterOutputType(FusionAuthImportedKeyOutput{})
	pulumi.RegisterOutputType(FusionAuthImportedKeyArrayOutput{})
	pulumi.RegisterOutputType(FusionAuthImportedKeyMapOutput{})
}
