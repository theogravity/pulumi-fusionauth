// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fusionauth

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Form Field Resource
//
// A FusionAuth Form Field is an object that can be customized to receive input within a FusionAuth [Form](https://fusionauth.io/docs/v1/tech/apis/forms).
//
// [Form Field API](https://fusionauth.io/docs/v1/tech/apis/form-fields)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/theogravity/pulumi-fusionauth/sdk/v2/go/fusionauth"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fusionauth.GetFormField(ctx, &fusionauth.GetFormFieldArgs{
//				Name: pulumi.StringRef("Email"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFormField(ctx *pulumi.Context, args *GetFormFieldArgs, opts ...pulumi.InvokeOption) (*GetFormFieldResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetFormFieldResult
	err := ctx.Invoke("fusionauth:index/getFormField:getFormField", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFormField.
type GetFormFieldArgs struct {
	// Determines if the user input should be confirmed by requiring the value to be entered twice.
	// - consentId
	// - control
	Confirm   *bool   `pulumi:"confirm"`
	ConsentId *string `pulumi:"consentId"`
	Control   *string `pulumi:"control"`
	// An object that can hold any information about the Form Field that should be persisted.
	// - description
	// - key
	Data        map[string]interface{} `pulumi:"data"`
	Description *string                `pulumi:"description"`
	// The unique id of the Form Field. Either `formFieldId` or `name` must be specified.
	FormFieldId *string `pulumi:"formFieldId"`
	Key         *string `pulumi:"key"`
	// The name of the Form field. Either `formFieldId` or `name` must be specified.
	Name *string `pulumi:"name"`
	// A list of options that are applied to checkbox, radio, or select controls.
	Options []string `pulumi:"options"`
	// Determines if a value is required to complete the form.
	Required *bool `pulumi:"required"`
	// The form field type. The possible values are:
	Type      *string                `pulumi:"type"`
	Validator *GetFormFieldValidator `pulumi:"validator"`
}

// A collection of values returned by getFormField.
type GetFormFieldResult struct {
	// Determines if the user input should be confirmed by requiring the value to be entered twice.
	// - consentId
	// - control
	Confirm   *bool   `pulumi:"confirm"`
	ConsentId *string `pulumi:"consentId"`
	Control   string  `pulumi:"control"`
	// An object that can hold any information about the Form Field that should be persisted.
	// - description
	// - key
	Data        map[string]interface{} `pulumi:"data"`
	Description *string                `pulumi:"description"`
	FormFieldId string                 `pulumi:"formFieldId"`
	// The provider-assigned unique ID for this managed resource.
	Id  string  `pulumi:"id"`
	Key *string `pulumi:"key"`
	// The unique name of the Form Field.
	Name *string `pulumi:"name"`
	// A list of options that are applied to checkbox, radio, or select controls.
	Options []string `pulumi:"options"`
	// Determines if a value is required to complete the form.
	Required *bool `pulumi:"required"`
	// The form field type. The possible values are:
	Type      *string               `pulumi:"type"`
	Validator GetFormFieldValidator `pulumi:"validator"`
}

func GetFormFieldOutput(ctx *pulumi.Context, args GetFormFieldOutputArgs, opts ...pulumi.InvokeOption) GetFormFieldResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFormFieldResult, error) {
			args := v.(GetFormFieldArgs)
			r, err := GetFormField(ctx, &args, opts...)
			var s GetFormFieldResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetFormFieldResultOutput)
}

// A collection of arguments for invoking getFormField.
type GetFormFieldOutputArgs struct {
	// Determines if the user input should be confirmed by requiring the value to be entered twice.
	// - consentId
	// - control
	Confirm   pulumi.BoolPtrInput   `pulumi:"confirm"`
	ConsentId pulumi.StringPtrInput `pulumi:"consentId"`
	Control   pulumi.StringPtrInput `pulumi:"control"`
	// An object that can hold any information about the Form Field that should be persisted.
	// - description
	// - key
	Data        pulumi.MapInput       `pulumi:"data"`
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The unique id of the Form Field. Either `formFieldId` or `name` must be specified.
	FormFieldId pulumi.StringPtrInput `pulumi:"formFieldId"`
	Key         pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Form field. Either `formFieldId` or `name` must be specified.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A list of options that are applied to checkbox, radio, or select controls.
	Options pulumi.StringArrayInput `pulumi:"options"`
	// Determines if a value is required to complete the form.
	Required pulumi.BoolPtrInput `pulumi:"required"`
	// The form field type. The possible values are:
	Type      pulumi.StringPtrInput         `pulumi:"type"`
	Validator GetFormFieldValidatorPtrInput `pulumi:"validator"`
}

func (GetFormFieldOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFormFieldArgs)(nil)).Elem()
}

// A collection of values returned by getFormField.
type GetFormFieldResultOutput struct{ *pulumi.OutputState }

func (GetFormFieldResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFormFieldResult)(nil)).Elem()
}

func (o GetFormFieldResultOutput) ToGetFormFieldResultOutput() GetFormFieldResultOutput {
	return o
}

func (o GetFormFieldResultOutput) ToGetFormFieldResultOutputWithContext(ctx context.Context) GetFormFieldResultOutput {
	return o
}

// Determines if the user input should be confirmed by requiring the value to be entered twice.
// - consentId
// - control
func (o GetFormFieldResultOutput) Confirm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetFormFieldResult) *bool { return v.Confirm }).(pulumi.BoolPtrOutput)
}

func (o GetFormFieldResultOutput) ConsentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFormFieldResult) *string { return v.ConsentId }).(pulumi.StringPtrOutput)
}

func (o GetFormFieldResultOutput) Control() pulumi.StringOutput {
	return o.ApplyT(func(v GetFormFieldResult) string { return v.Control }).(pulumi.StringOutput)
}

// An object that can hold any information about the Form Field that should be persisted.
// - description
// - key
func (o GetFormFieldResultOutput) Data() pulumi.MapOutput {
	return o.ApplyT(func(v GetFormFieldResult) map[string]interface{} { return v.Data }).(pulumi.MapOutput)
}

func (o GetFormFieldResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFormFieldResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GetFormFieldResultOutput) FormFieldId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFormFieldResult) string { return v.FormFieldId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFormFieldResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFormFieldResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetFormFieldResultOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFormFieldResult) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The unique name of the Form Field.
func (o GetFormFieldResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFormFieldResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A list of options that are applied to checkbox, radio, or select controls.
func (o GetFormFieldResultOutput) Options() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFormFieldResult) []string { return v.Options }).(pulumi.StringArrayOutput)
}

// Determines if a value is required to complete the form.
func (o GetFormFieldResultOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetFormFieldResult) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// The form field type. The possible values are:
func (o GetFormFieldResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFormFieldResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GetFormFieldResultOutput) Validator() GetFormFieldValidatorOutput {
	return o.ApplyT(func(v GetFormFieldResult) GetFormFieldValidator { return v.Validator }).(GetFormFieldValidatorOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFormFieldResultOutput{})
}
