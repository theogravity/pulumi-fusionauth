// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fusionauth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Twitch Identity Provider Resource
//
// The Twitch identity provider type will use the Twitch OAuth v2.0 login API. It will also provide a Login with Twitch button on FusionAuth’s login page that will direct a user to the Twitch login page.
//
// This identity provider will call Twitch’s API to load the user’s email and preferredUsername and use those as email and username to lookup or create a user in FusionAuth depending on the linking strategy configured for this identity provider. Additional claims returned by Twitch can be used to reconcile the user to FusionAuth by using a Twitch Reconcile Lambda.
//
// FusionAuth will also store the Twitch refreshToken returned from the Twitch API in the link between the user and the identity provider. This token can be used by an application to make further requests to Twitch APIs on behalf of the user.
//
// [Twitch Identity Provider APIs](https://fusionauth.io/docs/v1/tech/apis/identity-providers/twitch/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/theogravity/pulumi-fusionauth/sdk/v2/go/fusionauth"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fusionauth.NewFusionAuthIdpTwitch(ctx, "twitch", &fusionauth.FusionAuthIdpTwitchArgs{
//				ApplicationConfigurations: fusionauth.FusionAuthIdpTwitchApplicationConfigurationArray{
//					&fusionauth.FusionAuthIdpTwitchApplicationConfigurationArgs{
//						ApplicationId:      pulumi.Any(fusionauth_application.My_app.Id),
//						CreateRegistration: pulumi.Bool(true),
//						Enabled:            pulumi.Bool(true),
//					},
//				},
//				ButtonText:   pulumi.String("Login with Twitch"),
//				ClientId:     pulumi.String("0eb1ce3c-2fb1-4ae9-b361-d49fc6e764cc"),
//				ClientSecret: pulumi.String("693s000cbn66k0mxtqzr_c_NfLy3~6_SEA"),
//				Scope:        pulumi.String("Xboxlive.signin Xboxlive.offline_access"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FusionAuthIdpTwitch struct {
	pulumi.CustomResourceState

	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpTwitchApplicationConfigurationArrayOutput `pulumi:"applicationConfigurations"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringOutput `pulumi:"buttonText"`
	// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug pulumi.BoolPtrOutput `pulumi:"debug"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId pulumi.StringPtrOutput `pulumi:"idpId"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringPtrOutput `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy pulumi.StringOutput `pulumi:"linkingStrategy"`
	// The top-level scope that you are requesting from Xbox.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpTwitchTenantConfigurationArrayOutput `pulumi:"tenantConfigurations"`
}

// NewFusionAuthIdpTwitch registers a new resource with the given unique name, arguments, and options.
func NewFusionAuthIdpTwitch(ctx *pulumi.Context,
	name string, args *FusionAuthIdpTwitchArgs, opts ...pulumi.ResourceOption) (*FusionAuthIdpTwitch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ButtonText == nil {
		return nil, errors.New("invalid value for required argument 'ButtonText'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FusionAuthIdpTwitch
	err := ctx.RegisterResource("fusionauth:index/fusionAuthIdpTwitch:FusionAuthIdpTwitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFusionAuthIdpTwitch gets an existing FusionAuthIdpTwitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFusionAuthIdpTwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FusionAuthIdpTwitchState, opts ...pulumi.ResourceOption) (*FusionAuthIdpTwitch, error) {
	var resource FusionAuthIdpTwitch
	err := ctx.ReadResource("fusionauth:index/fusionAuthIdpTwitch:FusionAuthIdpTwitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FusionAuthIdpTwitch resources.
type fusionAuthIdpTwitchState struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations []FusionAuthIdpTwitchApplicationConfiguration `pulumi:"applicationConfigurations"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText *string `pulumi:"buttonText"`
	// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientId *string `pulumi:"clientId"`
	// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientSecret *string `pulumi:"clientSecret"`
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug *bool `pulumi:"debug"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled *bool `pulumi:"enabled"`
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId *string `pulumi:"idpId"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId *string `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy *string `pulumi:"linkingStrategy"`
	// The top-level scope that you are requesting from Xbox.
	Scope *string `pulumi:"scope"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations []FusionAuthIdpTwitchTenantConfiguration `pulumi:"tenantConfigurations"`
}

type FusionAuthIdpTwitchState struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpTwitchApplicationConfigurationArrayInput
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringPtrInput
	// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientId pulumi.StringPtrInput
	// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientSecret pulumi.StringPtrInput
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug pulumi.BoolPtrInput
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrInput
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId pulumi.StringPtrInput
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringPtrInput
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy pulumi.StringPtrInput
	// The top-level scope that you are requesting from Xbox.
	Scope pulumi.StringPtrInput
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpTwitchTenantConfigurationArrayInput
}

func (FusionAuthIdpTwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthIdpTwitchState)(nil)).Elem()
}

type fusionAuthIdpTwitchArgs struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations []FusionAuthIdpTwitchApplicationConfiguration `pulumi:"applicationConfigurations"`
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText string `pulumi:"buttonText"`
	// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientId string `pulumi:"clientId"`
	// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientSecret string `pulumi:"clientSecret"`
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug *bool `pulumi:"debug"`
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled *bool `pulumi:"enabled"`
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId *string `pulumi:"idpId"`
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId *string `pulumi:"lambdaReconcileId"`
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy *string `pulumi:"linkingStrategy"`
	// The top-level scope that you are requesting from Xbox.
	Scope *string `pulumi:"scope"`
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations []FusionAuthIdpTwitchTenantConfiguration `pulumi:"tenantConfigurations"`
}

// The set of arguments for constructing a FusionAuthIdpTwitch resource.
type FusionAuthIdpTwitchArgs struct {
	// The configuration for each Application that the identity provider is enabled for.
	ApplicationConfigurations FusionAuthIdpTwitchApplicationConfigurationArrayInput
	// The top-level button text to use on the FusionAuth login page for this Identity Provider.
	ButtonText pulumi.StringInput
	// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientId pulumi.StringInput
	// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
	ClientSecret pulumi.StringInput
	// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
	Debug pulumi.BoolPtrInput
	// Determines if this provider is enabled. If it is false then it will be disabled globally.
	Enabled pulumi.BoolPtrInput
	// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
	IdpId pulumi.StringPtrInput
	// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
	LambdaReconcileId pulumi.StringPtrInput
	// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
	LinkingStrategy pulumi.StringPtrInput
	// The top-level scope that you are requesting from Xbox.
	Scope pulumi.StringPtrInput
	// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
	TenantConfigurations FusionAuthIdpTwitchTenantConfigurationArrayInput
}

func (FusionAuthIdpTwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fusionAuthIdpTwitchArgs)(nil)).Elem()
}

type FusionAuthIdpTwitchInput interface {
	pulumi.Input

	ToFusionAuthIdpTwitchOutput() FusionAuthIdpTwitchOutput
	ToFusionAuthIdpTwitchOutputWithContext(ctx context.Context) FusionAuthIdpTwitchOutput
}

func (*FusionAuthIdpTwitch) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthIdpTwitch)(nil)).Elem()
}

func (i *FusionAuthIdpTwitch) ToFusionAuthIdpTwitchOutput() FusionAuthIdpTwitchOutput {
	return i.ToFusionAuthIdpTwitchOutputWithContext(context.Background())
}

func (i *FusionAuthIdpTwitch) ToFusionAuthIdpTwitchOutputWithContext(ctx context.Context) FusionAuthIdpTwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpTwitchOutput)
}

// FusionAuthIdpTwitchArrayInput is an input type that accepts FusionAuthIdpTwitchArray and FusionAuthIdpTwitchArrayOutput values.
// You can construct a concrete instance of `FusionAuthIdpTwitchArrayInput` via:
//
//	FusionAuthIdpTwitchArray{ FusionAuthIdpTwitchArgs{...} }
type FusionAuthIdpTwitchArrayInput interface {
	pulumi.Input

	ToFusionAuthIdpTwitchArrayOutput() FusionAuthIdpTwitchArrayOutput
	ToFusionAuthIdpTwitchArrayOutputWithContext(context.Context) FusionAuthIdpTwitchArrayOutput
}

type FusionAuthIdpTwitchArray []FusionAuthIdpTwitchInput

func (FusionAuthIdpTwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthIdpTwitch)(nil)).Elem()
}

func (i FusionAuthIdpTwitchArray) ToFusionAuthIdpTwitchArrayOutput() FusionAuthIdpTwitchArrayOutput {
	return i.ToFusionAuthIdpTwitchArrayOutputWithContext(context.Background())
}

func (i FusionAuthIdpTwitchArray) ToFusionAuthIdpTwitchArrayOutputWithContext(ctx context.Context) FusionAuthIdpTwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpTwitchArrayOutput)
}

// FusionAuthIdpTwitchMapInput is an input type that accepts FusionAuthIdpTwitchMap and FusionAuthIdpTwitchMapOutput values.
// You can construct a concrete instance of `FusionAuthIdpTwitchMapInput` via:
//
//	FusionAuthIdpTwitchMap{ "key": FusionAuthIdpTwitchArgs{...} }
type FusionAuthIdpTwitchMapInput interface {
	pulumi.Input

	ToFusionAuthIdpTwitchMapOutput() FusionAuthIdpTwitchMapOutput
	ToFusionAuthIdpTwitchMapOutputWithContext(context.Context) FusionAuthIdpTwitchMapOutput
}

type FusionAuthIdpTwitchMap map[string]FusionAuthIdpTwitchInput

func (FusionAuthIdpTwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthIdpTwitch)(nil)).Elem()
}

func (i FusionAuthIdpTwitchMap) ToFusionAuthIdpTwitchMapOutput() FusionAuthIdpTwitchMapOutput {
	return i.ToFusionAuthIdpTwitchMapOutputWithContext(context.Background())
}

func (i FusionAuthIdpTwitchMap) ToFusionAuthIdpTwitchMapOutputWithContext(ctx context.Context) FusionAuthIdpTwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionAuthIdpTwitchMapOutput)
}

type FusionAuthIdpTwitchOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpTwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FusionAuthIdpTwitch)(nil)).Elem()
}

func (o FusionAuthIdpTwitchOutput) ToFusionAuthIdpTwitchOutput() FusionAuthIdpTwitchOutput {
	return o
}

func (o FusionAuthIdpTwitchOutput) ToFusionAuthIdpTwitchOutputWithContext(ctx context.Context) FusionAuthIdpTwitchOutput {
	return o
}

// The configuration for each Application that the identity provider is enabled for.
func (o FusionAuthIdpTwitchOutput) ApplicationConfigurations() FusionAuthIdpTwitchApplicationConfigurationArrayOutput {
	return o.ApplyT(func(v *FusionAuthIdpTwitch) FusionAuthIdpTwitchApplicationConfigurationArrayOutput {
		return v.ApplicationConfigurations
	}).(FusionAuthIdpTwitchApplicationConfigurationArrayOutput)
}

// The top-level button text to use on the FusionAuth login page for this Identity Provider.
func (o FusionAuthIdpTwitchOutput) ButtonText() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpTwitch) pulumi.StringOutput { return v.ButtonText }).(pulumi.StringOutput)
}

// TThe top-level Xbox client id for your Application. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
func (o FusionAuthIdpTwitchOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpTwitch) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// The top-level client secret to use with the Xbox Identity Provider when retrieving the long-lived token. This value is retrieved from the Xbox developer website when you setup your Xbox developer account.
func (o FusionAuthIdpTwitchOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpTwitch) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// Determines if debug is enabled for this provider. When enabled, each time this provider is invoked to reconcile a login an Event Log will be created.
func (o FusionAuthIdpTwitchOutput) Debug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpTwitch) pulumi.BoolPtrOutput { return v.Debug }).(pulumi.BoolPtrOutput)
}

// Determines if this provider is enabled. If it is false then it will be disabled globally.
func (o FusionAuthIdpTwitchOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpTwitch) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The ID to use for the new identity provider. If not specified a secure random UUID will be generated.
func (o FusionAuthIdpTwitchOutput) IdpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpTwitch) pulumi.StringPtrOutput { return v.IdpId }).(pulumi.StringPtrOutput)
}

// The unique Id of the lambda to used during the user reconcile process to map custom claims from the external identity provider to the FusionAuth user.
func (o FusionAuthIdpTwitchOutput) LambdaReconcileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpTwitch) pulumi.StringPtrOutput { return v.LambdaReconcileId }).(pulumi.StringPtrOutput)
}

// The linking strategy to use when creating the link between the {idp_display_name} Identity Provider and the user.
func (o FusionAuthIdpTwitchOutput) LinkingStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *FusionAuthIdpTwitch) pulumi.StringOutput { return v.LinkingStrategy }).(pulumi.StringOutput)
}

// The top-level scope that you are requesting from Xbox.
func (o FusionAuthIdpTwitchOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FusionAuthIdpTwitch) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// The configuration for each Tenant that limits the number of links a user may have for a particular identity provider.
func (o FusionAuthIdpTwitchOutput) TenantConfigurations() FusionAuthIdpTwitchTenantConfigurationArrayOutput {
	return o.ApplyT(func(v *FusionAuthIdpTwitch) FusionAuthIdpTwitchTenantConfigurationArrayOutput {
		return v.TenantConfigurations
	}).(FusionAuthIdpTwitchTenantConfigurationArrayOutput)
}

type FusionAuthIdpTwitchArrayOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpTwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FusionAuthIdpTwitch)(nil)).Elem()
}

func (o FusionAuthIdpTwitchArrayOutput) ToFusionAuthIdpTwitchArrayOutput() FusionAuthIdpTwitchArrayOutput {
	return o
}

func (o FusionAuthIdpTwitchArrayOutput) ToFusionAuthIdpTwitchArrayOutputWithContext(ctx context.Context) FusionAuthIdpTwitchArrayOutput {
	return o
}

func (o FusionAuthIdpTwitchArrayOutput) Index(i pulumi.IntInput) FusionAuthIdpTwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FusionAuthIdpTwitch {
		return vs[0].([]*FusionAuthIdpTwitch)[vs[1].(int)]
	}).(FusionAuthIdpTwitchOutput)
}

type FusionAuthIdpTwitchMapOutput struct{ *pulumi.OutputState }

func (FusionAuthIdpTwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FusionAuthIdpTwitch)(nil)).Elem()
}

func (o FusionAuthIdpTwitchMapOutput) ToFusionAuthIdpTwitchMapOutput() FusionAuthIdpTwitchMapOutput {
	return o
}

func (o FusionAuthIdpTwitchMapOutput) ToFusionAuthIdpTwitchMapOutputWithContext(ctx context.Context) FusionAuthIdpTwitchMapOutput {
	return o
}

func (o FusionAuthIdpTwitchMapOutput) MapIndex(k pulumi.StringInput) FusionAuthIdpTwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FusionAuthIdpTwitch {
		return vs[0].(map[string]*FusionAuthIdpTwitch)[vs[1].(string)]
	}).(FusionAuthIdpTwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpTwitchInput)(nil)).Elem(), &FusionAuthIdpTwitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpTwitchArrayInput)(nil)).Elem(), FusionAuthIdpTwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FusionAuthIdpTwitchMapInput)(nil)).Elem(), FusionAuthIdpTwitchMap{})
	pulumi.RegisterOutputType(FusionAuthIdpTwitchOutput{})
	pulumi.RegisterOutputType(FusionAuthIdpTwitchArrayOutput{})
	pulumi.RegisterOutputType(FusionAuthIdpTwitchMapOutput{})
}
